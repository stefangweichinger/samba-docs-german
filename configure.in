AC_INIT(entities/global.entities)

PAPERSIZE=""
DUPLICATE_ULINKS=""

DOCROP="0"

AC_ARG_WITH(samba-sources,
[ --with-samba-sources=DIR Specify path to Samba sources],
[ test "$withval" && SPECIFIED_SOURCEDIR="$withval" ])

AC_ARG_ENABLE(crop,
[ --enable-crop            Whether to use a crop template],
[ test "$withval" && DOCROP="1" ])

PAPERSIZE="a4paper"

AC_ARG_WITH(papersize,
[ --with-papersize         Specify papersize (a4paper,letter) ],
[ test "$withval" && PAPERSIZE="$withval" ])

FONTSIZE="10.5"

AC_ARG_WITH(fontsize,
[ --with-fontsize          Specify the fontsize in points (default: 10.5) ],
[ test "$withval" && FONTSIZE="$withval" ])

AC_ARG_ENABLE(printable,
[ --enable-printable       Printable output (expand ulinks, etc)],
[ test "$withval" && DUPLICATE_ULINKS="footnote" ])


DOC_BUILD_DATE=`date '+%d-%m-%Y'`
AC_SUBST(DOC_BUILD_DATE)
AC_SUBST(PAPERSIZE)
AC_SUBST(DUPLICATE_ULINKS)
AC_SUBST(FONTSIZE)
AC_SUBST(DOCROP)
AC_SUBST(SAMBASOURCEDIR)

DOCS_TARGET_REQUIRE_PROGRAM(XSLTPROC, xsltproc, ALL)
DOCS_TARGET_REQUIRE_PROGRAM(RM, rm, ALL)
DOCS_TARGET_REQUIRE_PROGRAM(DIA, dia, ALL)

# Check dia version number
[ DIA_VERSION=`dia -v | egrep -o '([0-9]+)\.([0-9]+)'`]
DIA_MAJ_VERSION=`echo $DIA_VERSION | cut -d . -f 1`
DIA_MIN_VERSION=`echo $DIA_VERSION | cut -d . -f 2`

if test "$DIA_MAJ_VERSION" -le "0"
then
	if test "$DIA_MIN_VERSION" -le "92" && test -z "$DISPLAY" 
	then
		AC_MSG_ERROR([Dia below 0.93 requires an X environment. Set \$DISPLAY or install Dia 0.93 or higher])
	fi
fi

DOCS_TARGET_REQUIRE_PROGRAM(MAKEINDEX, makeindex, LATEX)
DOCS_TARGET_REQUIRE_PROGRAM(PDFLATEX, pdflatex, PDF)
DOCS_TARGET_REQUIRE_PROGRAM(EPSTOPDF, epstopdf, PDF)
DOCS_TARGET_REQUIRE_PROGRAM(THUMBPDF, thumbpdf, PDF)
DOCS_TARGET_REQUIRE_PROGRAM(PNGTOPNM, pngtopnm, PS)
DOCS_TARGET_REQUIRE_PROGRAM(PNMTOPS, pnmtops, PS)
DOCS_TARGET_REQUIRE_PROGRAM(LATEX, latex, PS)
DOCS_TARGET_REQUIRE_PROGRAM(DVIPS, dvips, PS)
DOCS_TARGET_REQUIRE_PROGRAM(PLUCKERBUILD, plucker-build, PLUCKER)
DOCS_TARGET_REQUIRE_PROGRAM(HTML2TEXT, html2text, TXT)
DOCS_TARGET_REQUIRE_PROGRAM(PERL, perl, UNDOCUMENTED)
DOCS_TARGET_REQUIRE_PROGRAM(XMLLINT, xmllint, VERIFY)
DOCS_TARGET_REQUIRE_DIR([$SPECIFIED_SOURCEDIR ..], [source/configure.in], SAMBASOURCEDIR, UNDOCUMENTED)

AC_MSG_RESULT([])
AC_MSG_RESULT([Summary:])
AC_MSG_RESULT([--------------])

DOCS_DEFINE_TARGET(ALL, [], [base requirements], [])
DOCS_DEFINE_TARGET(LATEX, ALL, [LaTeX versions], [tex])
DOCS_DEFINE_TARGET(PDF, LATEX, [PDF versions], [pdf])
DOCS_DEFINE_TARGET(PS, LATEX, [PostScript versions], [ps])
DOCS_DEFINE_TARGET(HTML, ALL, [HTML versions], [html])
DOCS_DEFINE_TARGET(HTMLHELP, ALL, [HTML Help versions], [htmlhelp])
DOCS_DEFINE_TARGET(HTMLMAN, ALL, [HTML versions of the manpages], [htmlman])
DOCS_DEFINE_TARGET(MANPAGES, ALL, [manpages], [manpages])
DOCS_DEFINE_TARGET(PEARSON, ALL, [pearson-compatible XML], [pearson])
DOCS_DEFINE_TARGET(PLUCKER, HTML, [plucker versions], [plucker])
DOCS_DEFINE_TARGET(VERIFY, ALL, [verifying docbook output], [verify])
DOCS_DEFINE_TARGET(UNDOCUMENTED, MANPAGES, [list of undocumented options], [undocumented])
DOCS_DEFINE_TARGET(TXT, HTML, [text versions], [txt])

if test x"$TARGETS" = x; then 
	AC_MSG_ERROR([You won't be able to build any of the docs])
else 
	AC_MSG_RESULT([You will be able to build: $TARGETS])
fi

AC_SUBST(TARGETS)

AC_OUTPUT( Makefile settings.xsl )

<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="AccessControls">
<chapterinfo>
	&author.jht;
	&author.jeremy;
	<author>&person.jelmer;<contrib>drawing</contrib></author>
		&author.jht;
    <pubdate>April 3 2003</pubdate>
	<author>&author.luft;<contrib>Deutsche Übersetzung</contrib></author>
</chapterinfo>
<title>Dateien, Verzeichnisse und Netzlaufwerkszugriffskontolle</title>

<para>
<indexterm><primary>ACLs</primary></indexterm>
Fortgeschrittene Windows Benutzer sind häufig verwirrt, wenn eine Änderung des Besitzes von Dateien oder Verzeichnissen
auf dem Samba Server sich nicht so auswirken, wie sie es erwarten. MS Administratoren verwirrt es oft, wenn sie versuchen
Ihre Daten mit Zugriffskontrolllisten vor unerlaubten  Zugriffen zu schützen.
</para>

<para>
Viele UNIX Administratoren sind nicht mit der MS Windows Umgebung vertraut, besondere Probleme ergeben sich aus den
Benutzerwünschen über die Kontrolle von Dateien und Verzeichnisse und deren Einrichtung.
</para>

<para>
Das Problem begründet sich in den Unterschieden bei Datei- und Verzeichnis-Benutzerrechten der beiden Systeme. Diesen
Unterschied kann auch Samba nicht wirklich aus der Welt schaffen, aber er schafft eine Brücke zwischen den Umgebungen.
</para>

<para>
<indexterm><primary>Erweiterte Attribute</primary></indexterm>
<indexterm><primary>ACLs</primary><secondary>POSIX</secondary></indexterm>

POSIX ( UNIX, LINUX ) Zugriffskontrolltechnologie gibt es schon seit Jahren, aber sie wurden nie sehr intensiv genutzt.
Dies erklärt vielleicht auch, warum es länger dauert ehe diese in kommerzielle Linux Produkte eingebunden wurden. MS
Administratoren wird dies erstaunen, da dies seit Jahren elementarer Bestandteil von Windows Produkten ist.
</para>

<para>
Dieses Kapitel soll die Punkte im Einzelnen klären, die mit Samba-3 nötig und möglich sind um Administratoren die best-
erreichbare Zugriffsverwaltung zu ermöglichen, welche die Windows Benutzer benötigen.
</para>

<para>
Samba ist nicht primär dafür gedacht, eine Unix Plattform in eine Windows Plattform zu verwandeln, sondern soll höchst-
mögliche Kompatibilität zwischen den beiden Systemen schaffen.
</para>

<sect1>
<title>Möglichkeiten und Vorteile</title>

	<para>
	Samba ermöglicht eine hohe Flexibilität beim Systemzugriff. Hier sind die Zugriffskontrollmöglichkeiten der
	jetzigen Version (3) von Samba.
	</para>

	<itemizedlist>
	<title>Samba Zugriffskontrollmöglichkeiten</title>
		<listitem><para>
				<indexterm><primary>Berechtigungen</primary><secondary>UNIX Datei und Verzeichnis</secondary></indexterm>
		<emphasis>Unix Datei und Verzeichnis Berechtigungen</emphasis>
		</para>

			<para>
			Samba arbeitet mit den UNIX Dateizugriffskontrollen zusammen. Benutzer greifen dabei als Windowsbenutzer
			auf Samba zu. Informationen über den Benutzer werden beim Einloggen übergeben. Samba benutzt
			diese Login Informationen, um zu entscheiden, ob einem Benutzer Zugriff auf Systemdaten gewährt werden soll oder nicht. Dieses
			Kapitel enthält eine Übersicht von UNIX Berechtigungen für Nutzer, die diese nicht kennen oder etwas verwirrt über
			diese sind.
			</para>
		</listitem>

		<listitem><para>
		<emphasis>Samba Netzlaufwerk Definitionen</emphasis>
		</para>

			<para>
			Beim Konfigurieren von Netzlaufwerken mit Samba in der Datei smb.conf kann der Administrator
			Berechtigungen des darunter liegenden Dateisystems verändern und beeinflussen. Dies ermöglicht teilweise eine Annäherung
			an das Verhalten, dass Windowsbenutzer erwarten. Dieser Weg ist aber nur selten die beste Lösung.
			Die grundlegenden Möglichkeiten werden hier beschrieben.
			</para>
		</listitem>

		<listitem><para>
		<emphasis>Samba Netzlaufwerkskontrolllisten</emphasis>
		<indexterm><primary>ACLs</primary><secondary>share</secondary></indexterm>
		</para>

			<para>
			Wie in Windows NT ist es auch in Samba möglich, Netzlaufwerkskontrolllisten zu erstellen. Einige
			Benutzer machen Gebrauch davon, es ist zur Zeit eine der leichtesten Möglichkeiten Zugriffskontrolle zu erreichen im
			Gegensatz zu komplexeren anderen Methoden.
			</para>
		</listitem>

		<listitem><para>
				<indexterm><primary>ACLs</primary><secondary>POSIX</secondary></indexterm>
				<indexterm><primary>ACLs</primary><secondary>Windows</secondary></indexterm>
		<emphasis>MS Windows Zugriffskontrolllisten und UNIX Zugriffskontrolllisten</emphasis>
		</para>

			<para>
			Der Gebrauch von UNIXkontrolllisten ist nur möglich, wenn diese Funktionen in dem darunter liegenden
			Dateisystem implemtiert sind. In jedem anderem Fall ist deren Nutzung nicht möglich. Aktuelle Unix-Systeme sollten diese
			Unterstützung haben. Es gibt Patches für die Linux Kernel, die diese Möglichkeit implementieren, falls nicht vorhanden.
			Viele Unix-Systeme werden mit der Unterstützung ausgeliefert, in diesem Kapitel werden wir versuchen den Benutzern
			deren Gebrauch zu erklären.
			</para>
		</listitem>
	</itemizedlist>

</sect1>

<sect1>
<title>Dateisystem Zugriffskontrollen</title>

<para>
Es ist wichtig festzustellen, dass MS Windows ein völlig anderes Dateizugriffssystem benutzt als UNIX-Systeme. Wir werden
erst die Unterschiede erklären und dann, wie Samba hilft, dies zu überbrücken.
</para>

	<sect2>
	<title>Vergleich zwischen NTFS und dem UNIX-Dateisystem</title>

	<para>
<indexterm><primary>NTFS</primary></indexterm>
<indexterm><primary>File System</primary></indexterm>
<indexterm><primary>File System</primary><secondary>UNIX</secondary></indexterm>
<indexterm><primary>File System</primary><secondary>Windows</secondary></indexterm>

	Samba benutzt das UNIX Dateisystem, d.h. Samba verhält sich innerhalb der Möglichkeiten des UNIX-Dateisystems.
	Aber Samba ist auch dafür verantwortlich, das Verhalten des Windows Dateisystems nachzustellen.
	</para>

	<para>
	Glücklicherweise bietet Samba eine Reihe von Konfigurationsmöglichkeiten, um die Unterschiede zu
	überbrücken. Wir werden einige dieser Einstellungsmöglichkeiten betrachten, jedoch nicht alle. Wer mehr wissen möchte, sollte die
	Beschreibung ( man = manual Datei ) der smb.conf lesen.
	</para>

	<para>Im folgenden ein Vergleich von UNIX- und Windows-Dateisystem NT/200x:
	<indexterm><primary>Dateisystem</primary><secondary>Eigenschaftsvergleich</secondary></indexterm>

	</para>

	<variablelist>
		<varlistentry>
			<term>Namens-Raum</term>
			<listitem>
		<para>
		Windows Dateinamen können 254 Zeichen lang sein, UNIX beherrscht bis zu 1023 Zeichen. Die
		Dateierweiterung beschreibt in Windows einen bestimmten Dateityp, in UNIX-Systemen ist das nicht zwingend so.
		</para>
		<para>
		Was unter Windows ein Ordner ist, heißt in UNIX 'Verzeichnis'.
		</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>Groß-Kleinschreibung</term>
			<listitem>
		<para>
		<indexterm><primary>8.3 Dateinamen</primary></indexterm>
		<indexterm><primary>Dateisystem</primary><secondary>Schreibweise sensitiv</secondary></indexterm>
		Im Allgemeinen sind Dateinamen unter Windows 8+3 Zeichen lang und werden Groß erstellt. Dateinamen die
		länger sind, sind in ihrer Schreibweise insensitiv ( d. h. ob groß oder klein geschrieben spielt keine Rolle )
		</para>

		<para>
		Unter UNIX sind alle Dateien und Verzeichnisse Schreibweisen sensitiv ( es spielt sehr wohl eine Rolle,
		ob eine Datei groß oder klein geschrieben wird).
		</para>
		<para>
		Im unteren Beispiel würden die Dateinamen von Windows völlig gleich interpretiert werden , für UNIX wären es drei verschiedene Dateien.
		<screen>
				MYFILE.TXT
				MyFile.txt
				myfile.txt
		</screen></para>

		<para>
		Es wird ziemlich klar, dass diese Dateien in Windows nicht nebeneinander stehen könnten
		( im selben Ordner ) unter UNIX jedoch jederzeit.
		</para>
		<para>
		Was soll nun Samba tun, wenn es auf diese Dateien trifft? Die Lösung besteht darin, dass die erste
		Datei für Windowsbenutzer sichtbar ist, die anderen jedoch nicht verfügbar bzw. unsichtbar sind, eine
		andere Lösung ist nicht denkbar.
		</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>Verzeichnis Trennzeichen</term>
			<listitem>

		<para>
				<indexterm><primary>Verzeichnis Trennzeichen</primary></indexterm>
		MS Windows und DOS benutzen den \ ( Backslash) als Verzeichnis Trennzeichen <constant>\</constant>
		UNIX benutzt ( wie im Internet üblich ) den Slash / als Verzeichnis Trennzeichen.
		<constant>/</constant>Dies wird von Samba transparent (für den Windowsnutzer unbemerkt ) umgelegt.
		</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>Laufwerksbezeichnung</term>
			<listitem>
		<para>
			<indexterm><primary>Laufwerksbezeichnung</primary></indexterm>
		In MS Windows werden verschiedene Festplatten Partitionen mit Buchstaben belegt.<command>C:</command>
		Es gibt unter UNIX kein ähnliches Konzept, Festplatten Teile ( Partitionen ) werden eingebunden
		( gemounted ) als Teil des Dateisystems. Was unter DOS <constant>C:\</constant> ist, wäre unter UNIX einfach
		( root = Wurzel des Dateisystembaumes )<constant>/</constant>.
		</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>Dateinamenskonvention</term>
			<listitem>
		<para>
			<indexterm><primary>Dateinamenskonvention</primary></indexterm>
		MS Windows kennt keine Dateien, deren Namen mit einem Punkt beginnt(<constant>.</constant>).
		In UNIX werden solche Dateien häufig in den "Home" (Heimatverzeichnissen) von Benutzern gefunden.
		Punktdateien(<constant>.</constant>) sind typischerweise Start- oder Konfigurationsdateien für UNIX-Programme.
		</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>Verknüpfungen und Verkürzungen</term>
			<listitem>
		<para>
		<indexterm><primary>Links</primary><secondary>hard</secondary></indexterm>
		<indexterm><primary>Links</primary><secondary>soft</secondary></indexterm>
		<indexterm><primary>Short-Cuts</primary></indexterm>
		Unter Windows sind Verknüpfungen spezielle Dateitypen, die zum verkürzten Starten von Programmen in deren
		realen Ordner dienen. Auch unter UNIX gibt es Verknüpfungen und Verkürzungen,
		diese werden jedoch völlig unterschiedlich gehandhabt.
		</para>
		<para>
		Symbolische Verknüpfungen unter UNIX halten die aktuellen Informationen von Dateien oder Verzeichnissen.
		Schreib- und Lesezugriffe auf eine Verknüpfung verhalten sich genauso wie bei der originalen Datei.
		Symbolische Verknüpfungen nennt man auch weiche Verknüpfungen.
		Harte Verknüpfungen kennt MS Windows nicht,
		diese würden das Benutzen ein- und derselben Datei unter mehreren Namen gleichzeitig ermöglichen.
		</para>
			</listitem>
		</varlistentry>
	</variablelist>

	<para>
	Es gibt noch viele Unterschiede, die einem Windows Administrator unangenehm im Umgang mit UNIX sein könnten.
	</para>

	</sect2>Verwaltung von Verzeichnissen

	<sect2>
	<title>naging Directories</title>

	<para>
	Es gibt grunsätzlich 3 Möglichkeiten um Ordner (Verzeichnisse) zu verwalten: <command>create (erstellen), 
delete (löschen), rename (umbenennen )</command>.
	<table frame="all">
		<title>Verwaltung von Ordnern (Verzeichnisse) mit UNIX und Windows</title>
		<tgroup align="center" cols="3">
		<thead>
		<row><entry>Action</entry><entry>MS Windows Command (Windows Befehle) </entry><entry>UNIX Command (UNIX Befehle)</entry></row>
		</thead>
		<tbody>
			<row><entry>create</entry><entry>md folder</entry><entry>mkdir folder</entry></row>
			<row><entry>delete</entry><entry>rd folder</entry><entry>rmdir folder</entry></row>
			<row><entry>rename</entry><entry>rename oldname newname</entry><entry>mv oldname newname</entry></row>
		</tbody>
	</tgroup>
	</table>
	</para>

	</sect2>

	<sect2>
	<title>Datei- und Ordner- (Verzeichnis) Zugriffskontrolle (Verwaltung)</title>


	<para>
	<indexterm><primary>ACLs</primary><secondary>File System</secondary></indexterm>
	Jedem Administrator wird geraten zusätzliche Handbücher über dieses Thema zu studieren.
	Die meisten Fälle können mit den grundlegenden Zugriffsmöglichkeiten von UNIX gelöst werden
	ohne die Technoilogine der Zugriffskontrolllisten (ACLs) oder der Erweiterten Attribute (EAs) zu gebrauchen.
	</para>

	<para>
	Die Datei- und Verzeichnisverwaltung von UNIX basiert auf den folgenden Zugriffsmöglichkeiten:
	<screen>
&prompt;<userinput>ls -la</userinput>
total 632
drwxr-xr-x   13 maryo   gnomes      816 2003-05-12 22:56 .
drwxrwxr-x   37 maryo   gnomes     3800 2003-05-12 22:29 ..
dr-xr-xr-x    2 maryo   gnomes       48 2003-05-12 22:29 muchado02
drwxrwxrwx    2 maryo   gnomes       48 2003-05-12 22:29 muchado03
drw-rw-rw-    2 maryo   gnomes       48 2003-05-12 22:29 muchado04
d-w--w--w-    2 maryo   gnomes       48 2003-05-12 22:29 muchado05
dr--r--r--    2 maryo   gnomes       48 2003-05-12 22:29 muchado06
drwsrwsrwx    2 maryo   gnomes       48 2003-05-12 22:29 muchado08
----------    1 maryo   gnomes     1242 2003-05-12 22:31 mydata00.lst
--w--w--w-    1 maryo   gnomes     7754 2003-05-12 22:33 mydata02.lst
-r--r--r--    1 maryo   gnomes    21017 2003-05-12 22:32 mydata04.lst
-rw-rw-rw-    1 maryo   gnomes    41105 2003-05-12 22:32 mydata06.lst
&prompt;
</screen>
	</para>

	<para>
	Die Reihen oben repräsentieren (von rechts nach links): Berechtigung, Anzahl der "harten" Links einer Datei, 
	Besitzer (einer Datei), die Besitzergruppe und die Größe in Bytes.
	</para>

	<para>
	Hier finden Sie eine Übersicht<link linkend="access1"/>.
	</para>

	<image id="access1" 
scale="40"><imagedescription>Übersicht der UNIX Berechtigungen</imagedescription><imagefile>access1</imagefile></image>

	<para>
	Jedes Bit kann auch unbesetzt sein und wird durch ein Minus ( - )dargestellt.

	<example>
		<title>Beispieldatei</title>
		<programlisting>
		-rwxr-x---   Bedeutet: Der Besitzer kann lesen, schreiben und ausführen. 
		                       Die Gruppe kann lesen und ausführen.
		                       Andere haben keine Rechte.
		</programlisting>
	</example>

	</para>

	<para>
	Zusätzliche Möglichkeiten im Typen-Feld sind [type] : c = character device, b = block device, p = pipe device, s = UNIX Domain Socket.
	</para>

	<para>
	Die Zeichen <constant>rwxXst</constant> für die Berechtigungen für Nutzer, Gruppen und anderen sind: 
	lesen (r), schreiben (w), ausführen (oder Ordner Zugriff ) (x),
	exclusives ausführen, wenn der Nutzer berechtigt für die Datei oder den Ordner ist (X), Setzen der ID des 
	Nutzers bei Ausführung (s), sticky ( begleitendes Bit )(t).
	</para>

	<para>
	Wenn das sticky bit auf einem Verzeichnis gesetzt ist, können darin enthaltene Dateien nur von Nutzer root oder dem 
	Ersteller der Dateien gelöscht werden, in jedem anderem Fall sind alle anderen Dateivorgänge (löschen,lesen,umbenennen 
	erlaubt). Das sticky bit wird häufig für Verzeichnisse wie das /tmp Verzeichnis benutzt, welches gewöhnlich für jeden 
	beschreibbar ist.
	 </para>

	<para>
	Wenn auf einem Verzeichnis das Gruppen- oder Nutzer-Identitätsbit gesetzt ist, dann werden Nutzer und Gruppen auf dort 
	enthaltene Dateien berechtigt. Dies ermöglicht das Erstellen von Verzeichnissen, auf die alle Nutzer einer Gruppe 
	zugreifen sollen, auch wenn die primäre Gruppe der Nutzer nicht gleiche ist und es nicht gewünscht ist, dass nur ein Benutzer 
	exklusiv auf eine Datei berechtigt ist.
	</para>

	<para>
	Falls ein Verzeichnis auf <constant>drw-r-----</constant> gesetzt ist, heisst dies, dass der Eigner in ihm Dateien lesen 
	und schreiben kann, aber dadruch, dass das Ausführen-Flag (x) nicht gesetzt ist, Dateien in diesem Verzeichnis von niemand
	gesehen werden kann. Die Gruppe kann Dateien lesen aber keine neuen anlegen. Falls Dateien in dem Verzeichnis auf les- oder
	schreibbar für die Gruppe gesetzt sind, können die Gruppenmitglieder diese schreiben oder löschen.
	</para>

	</sect2>

</sect1>

<sect1>
<title>Freigabedefinition Zugriffskontrollen</title>


<para>
<indexterm><primary>Berechtigungen</primary><secondary>Freigabe</secondary></indexterm>
Die folgenden Parameter in den Dateisektionen von &smb.conf; definieren eine Freigabekontrolle oder betreffen
Zugriffskontrollen. Bevor Sie eine dieser folgenden Optionen benutzen sehen Sie bitte in den den manpages für &smb.conf; nach.
</para>

	<sect2>
	<title>Benutzer- und Gruppen-basierende Kontrollen</title>

	<para>
	Benutzer- und Gruppen-basierende Kontrollen können sehr hilfreich sein. In manchen Situationen ist es sogar gewünscht,
	dass alle Dateisystem-Operationen behandelt werden, als wären sie von einem einzelnen Benutzer gemacht worden.
	Die Benutzung von <smbconfoption><name>force user</name></smbconfoption> und <smbconfoption><name>force group</name></smbconfoption> 
	wird dies erreichen. In anderen Situationen ist es vielleicht notwendig, ein Paranoia-Level von Kontrollen einzusetzen,
	umm sicherzustellen, dass es nur bestimmten ausgewählten und authorisierten Personen möglich sein wird,
	auf eine Freigabe oder dessen Inhalt zuzugreifen. Hier kann die Benutzung von <smbconfoption><name>valid users</name></smbconfoption> oder 
	<smbconfoption><name>invalid users</name></smbconfoption> am hilfreichsten sein.
	</para>

	<para>
	Wie immer ist es höchst ratsam, die leichteste Methode für den Unterhalt und die unzweideutigste für die
	Zugriffskontrolle zu verwenden. Denken Sie daran, dass nach dem Verlassen Ihrer Arbeit jemand anderes Unterstützung
	geben können muss und er eine grosse Baustelle vorfindet oder Ihre Vorgehensweise nicht versteht, dass es durchaus
	möglich sein kann, dass Samba gelöscht wird oder eine alternative Lösung eingesetzt wird.
	</para>

	<para>
	<link linkend="ugbc"/> zählt diese Kontrollen auf.
	</para>

	<table frame='all' pgwide='0' id="ugbc"><title>Benutzer- und Gruppen-basierende Kontrollen</title>
	<tgroup cols='2'>
		<colspec align="left"/>
		<colspec align="justify" colwidth="1*"/>
		<thead>
		<row>
			<entry align="center">Kontrollparameter</entry>
			<entry align="center">Beschreibung - Ausführung - Hinweise</entry>
		</row>
		</thead>
		<tbody>
		<row>
			<entry><smbconfoption><name>admin users</name></smbconfoption></entry>
			<entry><para>
			Benutzerliste derer, denen Administrationsprivilegien auf die Freigabe erteilt wird.
			Sie werden alle Dateioperationen als Super-User (root) ausführen.
			Jeder Benutzer in dieser Liste wird in der Lage sein, alles auf der Freigabe zu machen,
			egal welche Dateiberechtigungen gesetzt wurden.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force group</name></smbconfoption></entry>
			<entry><para>
			Spezifiziert einen UNIX Gruppennamen welcher als primäre Standardgruppe allen Benutzern zugewiesen wird,
			die auf diesen Dienst verbinden.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force user</name></smbconfoption></entry>
			<entry><para>
			Spezifiziert einen UNIX Benutzernamen welcher als Standardbenutzer allen Benutzern zugewiesen wird,
			die auf diesen Dienst verbinden.
			Dies ist für das Teilen von Dateien hilfreich. Falsche benutzung kann Sicherheitsprobleme
			verursachen.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>guest ok</name></smbconfoption></entry>
			<entry><para>
			Falls dieser Parameter für einen Dienst gesetzt ist, wird kein Passwort verlangt, um mit diesem
			Dienst zu verbinden.
			Die Privilegien werden diejenigen des Gastzugangs sein.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>invalid users</name></smbconfoption></entry>
			<entry><para>
			Benutzerliste derer, denen ein Anmelden an diesem Dienst nicht erlaubt wird.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>only user</name></smbconfoption></entry>
			<entry><para>
			Kontrolliert, ob Verbindungen mit Benutzernamen, die nicht in der Liste sind, erlaubt wird.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>read list</name></smbconfoption></entry>
			<entry><para>
			Benutzerliste derer, die einen Nur-Lesezugriff auf diesen Dienst haben. Benutzer in dieser Liste
			bekommen keinen Schreibzugriff, egal wie die 'read only' Option gesetzt wurde.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>username</name></smbconfoption></entry>
			<entry><para>
			Sehen Sie in der &smb.conf; man page für mehr Informationen nach -- dies ist ein komplexer
			und potentiell falsch angewendeter Parameter.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>valid users</name></smbconfoption></entry>
			<entry><para>
			Benutzerliste derer, denen das Anmelden an diesem Dienst erlaubt wird.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>write list</name></smbconfoption></entry>
			<entry><para>
			Benutzerliste derer, denen Lese-Schreibzugriff an diesem Dienst erlaubt wird.
			</para></entry>
		</row>
		</tbody>
	</tgroup>
	</table>

	</sect2>

	<sect2>
	<title>Datei- und Verzeichnis-Berechtigungsbasierende Kontrollen</title>

	<para>
	Die folgenden Datei- und Verzeichnis-Berechtigungsbasierenden Kontrollen können, wenn falsch angewendet,
	in erheblichen Schwierigkeiten bei der Fehlersuche durch Fehlkonfigurationen enden.
	Benutzern Sie diese sparsam und sorgfältig. Durch schrittweise Einführung einer nach dem anderen können unerwünschte By gradually introducing each one by one,
	Seiteneffekte entdeckt werden. Im Fehlerfall kommentieren Sie alle aus und führen Sie diese dann schrittweise in 
	einer kontrollierten Art und Weise wieder ein.
	</para>

	<para>
	Sehen Sie unter <link linkend="fdpbc"/> für Informationen nach, die diese Parameter betreffen.
	</para>

	<table frame='all' id="fdpbc"><title>Datei- und Verzeichnis-Berechtigungsbasierende Kontrollen</title>
		<tgroup cols='2'>
			<colspec align="left"/>
			<colspec align="justify" colwidth="1*"/>
		<thead>
		<row>
			<entry align="center">Kontrollparameter</entry>
			<entry align="center">Beschreibung - Ausführung - Hinweise</entry>
		</row>
		</thead>
		<tbody>
		<row>
			<entry><smbconfoption><name>create mask</name></smbconfoption></entry>
			<entry><para>
			Sehen Sie in der &smb.conf; man page nach.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>directory mask</name></smbconfoption></entry>
			<entry><para>
			Die Oktal-Modi, die beim Konvertieren von DOS-Modi nach UNIX-Modi beim Erzeugen von 
			UNIX Verzeichnissen benutzt werden.
			Sehen Sie auch: directory security mask.
			</para></entry></row>
		<row>
			<entry><smbconfoption><name>dos filemode</name></smbconfoption></entry>
			<entry><para>
			Durch Einschalten dieses Parameters erlaubt man einem Benutzer der Schreibzugriff auf eine Datei hat,
			die Berechtigungen auf diese zu ändern.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force create mode</name></smbconfoption></entry>
			<entry><para>
			Dieser Parameter spezifiziert eine Anzahl von UNIX Mode Bit-Berechtigungen, welche immer auf eine Datei
			gesetzt werden, die durch Samba erzeugt wurde.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force directory mode</name></smbconfoption></entry>
			<entry><para>
			Dieser Parameter spezifiziert eine Anzahl von UNIX Mode Bit-Berechtigung, welche immer auf ein Verzeichnis
			gesetzt werden, das durch Samba erzeugt wurde.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force directory security mode</name></smbconfoption></entry>
			<entry><para>
			Kontrolliert Änderungen an UNIX Berechtigungsbits, wenn ein Windows NT Client an UNIX Berechtigungen auf ein Verzeichnis manipuliert.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force security mode</name></smbconfoption></entry>
			<entry><para>
			Kontrolliert Änderungen an UNIX Berechtigungsbits, wenn ein Windows NT Client an UNIX Berechtigungen manipuliert.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>hide unreadable</name></smbconfoption></entry>
			<entry><para>
			Verhindert, dass Clients die Existenz von Dateien sehen, die nicht lesbar sind.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>hide unwriteable files</name></smbconfoption></entry>
			<entry><para>
			Verhindert, dass Clients die Existenz von Dateien sehen, die nicht schreibbar sind. Nicht beschreibbare Verzeichnisse
			werden wie gewöhnlich angezeigt.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>nt acl support</name></smbconfoption></entry>
			<entry><para>
			Dieser Parameter kontrolliert, ob smbd versuchen wird, UNIX Berechtigungen in Windows NT Zugriffsberechtigungslisten zu mappen.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>security mask</name></smbconfoption></entry>
			<entry><para>
			Kontrolliert Änderungen an UNIX Berechtigungsbits, wenn ein Windows NT Client an UNIX Berechtigungen auf eine Datei manipuliert.
			</para></entry>
		</row>
		</tbody>
	</tgroup>
	</table>

	</sect2>

	<sect2>
	<title>Allgemeine Kontrollen</title>

	<para>
	The following are documented because of the prevalence of administrators creating inadvertent barriers to file
	access by not understanding the full implications of &smb.conf; file settings. See <link linkend="mcoc"/>.
	</para>

	<table frame='all' id="mcoc"><title>Other Controls</title>
	<tgroup cols='2'>
		<colspec align="justify" colwidth="1*"/>
		<colspec align="justify" colwidth="1*"/>
		<thead>
		<row>
			<entry align="center">Control Parameter</entry>
			<entry align="center">Description - Action - Notes</entry>
		</row>
		</thead>
		<tbody>
		<row>
			<entry><smbconfoption><name>case sensitive</name></smbconfoption>, <smbconfoption><name>default case</name></smbconfoption>, <smbconfoption><name>short preserve case</name></smbconfoption></entry>
			<entry><para>
			This means that all file name lookup will be done in a case sensitive manner.
			Files will be created with the precise file name Samba received from the MS Windows client.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>csc policy</name></smbconfoption></entry>
			<entry><para>
			Client Side Caching Policy - parallels MS Windows client side file caching capabilities.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>dont descend</name></smbconfoption></entry>
			<entry><para>
			Allows specifying a comma-delimited list of directories that the server should always show as empty.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>dos filetime resolution</name></smbconfoption></entry>
			<entry><para>
			This option is mainly used as a compatibility option for Visual C++ when used against Samba shares.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>dos filetimes</name></smbconfoption></entry>
			<entry><para>
			DOS and Windows allow users to change file time stamps if they can write to the file. POSIX semantics prevent this.
			This option allows DOS and Windows behavior.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>fake oplocks</name></smbconfoption></entry>
			<entry><para>
			Oplocks are the way that SMB clients get permission from a server to locally cache file operations. If a server grants an
			oplock, the client is free to assume that it is the only one accessing the file and it will aggressively cache file data.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>hide dot files</name></smbconfoption>, <smbconfoption><name>hide files</name></smbconfoption>, <smbconfoption><name>veto files</name></smbconfoption></entry>
			<entry><para>
			Note: MS Windows Explorer allows over-ride of files marked as hidden so they will still be visible.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>read only</name></smbconfoption></entry>
			<entry><para>
			If this parameter is yes, then users of a service may not create or modify files in the service's directory.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>veto files</name></smbconfoption></entry>
			<entry><para>
			List of files and directories that are neither visible nor accessible.
			</para></entry>
		</row>
		</tbody>
	</tgroup>
	</table>

	</sect2>

</sect1>

<sect1>
<title>Access Controls on Shares</title>


	<para>
<indexterm><primary>permissions</primary><secondary>share ACLs</secondary></indexterm>
	This section deals with how to configure Samba per share access control restrictions.
	By default, Samba sets no restrictions on the share itself. Restrictions on the share itself
	can be set on MS Windows NT4/200x/XP shares. This can be an effective way to limit who can
	connect to a share. In the absence of specific restrictions the default setting is to allow
	the global user <constant>Everyone - Full Control</constant> (full control, change and read).
	</para>

	<para>
	At this time Samba dös not provide a tool for configuring access control setting on the share
	itself. Samba dös have the capacity to store and act on access control settings, but  the only
	way to create those settings is to use either the NT4 Server Manager or the Windows 200x MMC for
	Computer Management.
	</para>

	<para>
	Samba stores the per share access control settings in a file called <filename>share_info.tdb</filename>.
	The location of this file on your system will depend on how Samba was compiled. The default location
	for Samba's tdb files is under <filename>/usr/local/samba/var</filename>. If the <filename>tdbdump</filename>
	utility has been compiled and installed on your system, then you can examine the contents of this file
	by executing: <command>tdbdump share_info.tdb</command> in the directory containing the tdb files.
	</para>

	<sect2>
	<title>Share Permissions Management</title>

		<para>
		The best tool for the task is platform dependant. Choose the best tool for your environment.
		</para>

			<sect3>
			<title>Windows NT4 Workstation/Server</title>
			<para>
			The tool you need to use to manage share permissions on a Samba server is the NT Server Manager.
			Server Manager is shipped with Windows NT4 Server products but not with Windows NT4 Workstation.
			You can obtain the NT Server Manager for MS Windows NT4 Workstation from Microsoft &smbmdash; see details below.
			</para>

			<?latex \newpage ?>

			<procedure>
			<title>Instructions</title>
			<step><para>
			Launch the <application>NT4 Server Manager</application>, click on the Samba server you want to administer. From the menu
			select <guimenu>Computer</guimenu>, then click on <guimenuitem>Shared Directories</guimenuitem>.
			</para></step>

			<step><para>
			Click on the share that you wish to manage, then click the <guilabel>Properties</guilabel> tab. then click
			the <guilabel>Permissions</guilabel> tab. Now you can add or change access control settings as you wish.
			</para></step>
			</procedure>

			</sect3>

			<sect3>
			<title>Windows 200x/XP</title>

			<para>
			On <application>MS Windows NT4/200x/XP</application> system access control lists on the share itself are set using native
			tools, usually from File Manager. For example, in Windows 200x, right click on the shared folder,
			then select <guimenuitem>Sharing</guimenuitem>, then click on <guilabel>Permissions</guilabel>. The default
			Windows NT4/200x permission allows <quote>Everyone</quote> full control on the share.
			</para>

			<para>
			MS Windows 200x and later versions come with a tool called the <application>Computer Management</application> snap-in for the
			Microsoft Management Console (MMC). This tool is located by clicking on <guimenu>Control Panel ->
			Administrative Tools -> Computer Management</guimenu>.
			</para>

			<procedure>
			<title>Instructions</title>
			<step><para>
			After launching the MMC with the Computer Management snap-in, click the menu item <guimenuitem>Action</guimenuitem>,
			and select <guilabel>Connect to another computer</guilabel>. If you are not logged onto a domain you will be prompted
			to enter a domain login user identifier and a password. This will authenticate you to the domain.
			If you are already logged in with administrative privilege, this step is not offered.
			</para></step>

			<step><para>
			If the Samba server is not shown in the <guilabel>Select Computer</guilabel> box, type in the name of the target
			Samba server in the field <guilabel>Name:</guilabel>. Now click the on <guibutton>[+]</guibutton> next to
			<guilabel>System Tools</guilabel>, then on the <guibutton>[+]</guibutton> next to <guilabel>Shared Folders</guilabel> in the
			left panel.
			</para></step>

			<step><para>
			In the right panel, double-click on the share on which you wish to set access control permissions.
			Then click the tab <guilabel>Share Permissions</guilabel>. It is now possible to add access control entities
			to the shared folder. Remember to set what type of access (full control, change, read) you
			wish to assign for each entry.
			</para></step>
			</procedure>

			<warning>
			<para>
			Be careful. If you take away all permissions from the <constant>Everyone</constant> user without removing this user,
			effectively no user will be able to access the share. This is a result of what is known as
			ACL precedence. Everyone with <emphasis>no access</emphasis> means that <constant>MaryK</constant> who is part of the group
			<constant>Everyone</constant> will have no access even if she is given explicit full control access.
			</para>
			</warning>

			</sect3>
		</sect2>

</sect1>

<sect1>
<title>MS Windows Access Control Lists and UNIX Interoperability</title>

	<sect2>
		<title>Managing UNIX Permissions Using NT Security Dialogs</title>


		<para>
<indexterm><primary>permissions</primary><secondary>file/directory ACLs</secondary></indexterm>
		Windows NT clients can use their native security settings dialog box to view and modify the
		underlying UNIX permissions.
		</para>

		<para>
		This ability is careful not to compromise the security of the UNIX host on which Samba is running, and
		still obeys all the file permission rules that a Samba administrator can set.
		</para>

		<para>
		Samba dös not attempt to go beyond POSIX ACLs, so the various finer-grained access control
		options provided in Windows are actually ignored.
		</para>

		<note>
		<para>
		All access to UNIX/Linux system files via Samba is controlled by the operating system file access controls.
		When trying to figure out file access problems, it is vitally important to find the identity of the Windows
		user as it is presented by Samba at the point of file access. This can best be determined from the
		Samba log files.
		</para>
		</note>
	</sect2>

	<sect2>
		<title>Viewing File Security on a Samba Share</title>

		<para>
		From an NT4/2000/XP client, right click on any file or directory in a Samba-mounted drive letter
		or UNC path. When the menu pops up, click on the <guilabel>Properties</guilabel> entry at the bottom
		of the menu. This brings up the file <constant>Properties</constant> dialog box. Click on the
		<guilabel>Security</guilabel> tab and you will see three buttons: <guibutton>Permissions</guibutton>,
		<guibutton>Auditing</guibutton>, and <guibutton>Ownership</guibutton>. The <guibutton>Auditing</guibutton>
		button will cause either an error message <errorname>`A requested privilege is not held by the client'</errorname>
		to appear if the user is not the NT Administrator, or a dialog which is intended to allow an Administrator
		to add auditing requirements to a file if the user is logged on as the NT Administrator. This dialog is
		non-functional with a Samba share at this time, as the only useful button, the <guibutton>Add</guibutton>
		button, will not currently allow a list of users to be seen.
		</para>

	</sect2>

	<sect2>
		<title>Viewing File Ownership</title>

		<para>
		Clicking on the <guibutton>Ownership</guibutton> button brings up a dialog box telling you who owns
		the given file. The owner name will be displayed like this:
		</para>

		<para>
		<command><quote>SERVER\user (Long name)</quote></command>
		</para>

		<para>
		<replaceable>SERVER</replaceable> is the NetBIOS name of the Samba server, <replaceable>user</replaceable>
		is the user name of the UNIX user who owns the file, and <replaceable>(Long name)</replaceable> is the
		descriptive string identifying the user (normally found in the GECOS field of the UNIX password database).
		Click on the <guibutton>Close </guibutton> button to remove this dialog.
		</para>

		<para>
		If the parameter <smbconfoption><name>nt acl support</name></smbconfoption> is set to <constant>false</constant>,
		the file owner will be shown as the NT user <emphasis>Everyone</emphasis>.
		</para>

		<para>
		The <guibutton>Take Ownership</guibutton> button will not allow you to change the ownership of this file to
		yourself (clicking it will display a dialog box complaining that the user you are currently logged onto
		the NT client cannot be found). The reason for this is that changing the ownership of a file is a privileged
		operation in UNIX, available only to the <emphasis>root</emphasis> user. As clicking on this button causes
		NT to attempt to change the ownership of a file to the current user logged into the NT clienti, this will
		not work with Samba at this time.</para>

		<para>
		There is an NT <command>chown</command> command that will work with Samba and allow a user with Administrator privilege connected
		to a Samba server as root to change the ownership of files on both a local NTFS filesystem or remote mounted NTFS
		or Samba drive. This is available as part of the <application>Seclib</application> NT security library written
		by Jeremy Allison of the Samba Team, and is available from the main Samba FTP site.</para>

	</sect2>

	<sect2>
		<title>Viewing File or Directory Permissions</title>

		<para>
		The third button is the <guibutton>Permissions</guibutton> button. Clicking on this brings up a dialog box
		that shows both the permissions and the UNIX owner of the file or directory. The owner is displayed like this:
		</para>

		<para><command><replaceable>SERVER</replaceable>\
				<replaceable>user</replaceable>
				<replaceable>(Long name)</replaceable></command></para>

		<para>Where <replaceable>SERVER</replaceable> is the NetBIOS name of the Samba server,
		<replaceable>user</replaceable> is the user name of the UNIX user who owns the file, and
		<replaceable>(Long name)</replaceable> is the descriptive string identifying the user (normally found in the
		GECOS field of the UNIX password database).</para>

		<para>
		If the parameter <smbconfoption><name>nt acl support</name></smbconfoption> is set to <constant>false</constant>,
		the file owner will be shown as the NT user <constant>Everyone</constant> and the permissions will be
		shown as NT <quote>Full Control</quote>.
		</para>


		<para>
		The permissions field is displayed differently for files and directories, so I'll describe the way file permissions
		are displayed first.
		</para>

		<sect3>
			<title>File Permissions</title>

			<para>The standard UNIX user/group/world triplet and the corresponding <constant>read, write, execute</constant> permissions
			triplets are mapped by Samba into a three element NT ACL with the <quote>r</quote>, <quote>w</quote> and <quote>x</quote> bits mapped into the corresponding
			NT permissions. The UNIX world permissions are mapped into the global NT group <constant>Everyone</constant>, followed
			by the list of permissions allowed for UNIX world. The UNIX owner and group permissions are displayed as an NT
			<guiicon>user</guiicon> icon and an NT <guiicon>local group</guiicon> icon, respectively, followed by the list
			of permissions allowed for the UNIX user and group.</para>

			<para>Because many UNIX permission sets do not map into common NT names such as <constant>read</constant>,
			<constant>change</constant> or <constant>full control</constant>, usually the permissions will be prefixed
			by the words <constant>Special Access</constant> in the NT display list.</para>

			<para>But what happens if the file has no permissions allowed for a particular UNIX user group or world component? In order
			to  allow <quote>no permissions</quote> to be seen and modified Samba then overloads the NT <constant>Take Ownership</constant> ACL attribute
			(which has no meaning in UNIX) and reports a component with no permissions as having the NT <command>O</command> bit set.
			This was chosen, of course, to make it look like a zero, meaning zero permissions. More details on the decision behind this is
			given below.</para>
		</sect3>

		<sect3>
			<title>Directory Permissions</title>

			<para>Directories on an NT NTFS file system have two different sets of permissions. The first set is the ACL set on the
			directory itself, which is usually displayed in the first set of parentheses in the normal <constant>RW</constant>
			NT style. This first set of permissions is created by Samba in exactly the same way as normal file permissions are, described
			above, and is displayed in the same way.</para>

			<para>The second set of directory permissions has no real meaning in the UNIX permissions world and represents the <constant>
			inherited</constant> permissions that any file created within this directory would inherit.</para>

			<para>Samba synthesises these inherited permissions for NT by returning as an NT ACL the UNIX permission mode that a new file
			created by Samba on this share would receive.</para>
		</sect3>
	</sect2>

	<sect2>
		<title>Modifying File or Directory Permissions</title>

		<para>Modifying file and directory permissions is as simple
		as changing the displayed permissions in the dialog box, and
		clicking on <guibutton>OK</guibutton>. However, there are
		limitations that a user needs to be aware of, and also interactions
		with the standard Samba permission masks and mapping of DOS
		attributes that need to also be taken into account.</para>

		<para>If the parameter <smbconfoption><name>nt acl support</name></smbconfoption>
		is set to <constant>false</constant>, any attempt to set
		security permissions will fail with an <errorname>`Access Denied'
		</errorname> message.</para>

		<para>The first thing to note is that the <guibutton>Add</guibutton>
		button will not return a list of users in Samba (it will give
		an error message saying <errorname>`The remote procedure call failed
		and did not execute'</errorname>). This means that you can only
		manipulate the current user/group/world permissions listed in
		the dialog box. This actually works quite well as these are the
		only permissions that UNIX actually has.</para>

		<para>If a permission triplet (either user, group, or world)
		is removed from the list of permissions in the NT dialog box,
		then when the <guibutton>OK</guibutton> button is pressed it will
		be applied as <quote>no permissions</quote> on the UNIX side. If you then
		view the permissions again, the <quote>no permissions</quote> entry will appear
		as the NT <command>O</command> flag, as described above. This
		allows you to add permissions back to a file or directory once
		you have removed them from a triplet component.</para>

		<para>As UNIX supports only the <quote>r</quote>, <quote>w</quote> and <quote>x</quote> bits of
		an NT ACL, if other NT security attributes such as <constant>Delete Access</constant> are
		selected they will be ignored when applied on the Samba server.</para>

		<para>When setting permissions on a directory, the second
		set of permissions (in the second set of parentheses) is
		by default applied to all files within that directory. If this
		is not what you want, you must uncheck the <guilabel>Replace
		permissions on existing files</guilabel> checkbox in the NT
		dialog before clicking on <guibutton>OK</guibutton>.</para>

		<para>If you wish to remove all permissions from a
		user/group/world  component, you may either highlight the
		component and click on the <guibutton>Remove</guibutton> button,
		or set the component to only have the special <constant>Take
		Ownership</constant> permission (displayed as <command>O
		</command>) highlighted.</para>
	</sect2>

	<sect2>
		<title>Interaction with the Standard Samba <quote>create mask</quote> Parameters</title>

		<para>There are four parameters that control interaction with the standard Samba <parameter>create mask</parameter> parameters.
		These are:

		<itemizedlist>
			<listitem><smbconfoption><name>security mask</name></smbconfoption></listitem>
			<listitem><smbconfoption><name>force security mode</name></smbconfoption></listitem>
			<listitem><smbconfoption><name>directory security mask</name></smbconfoption></listitem>
			<listitem><smbconfoption><name>force directory security mode</name></smbconfoption></listitem>
		</itemizedlist>

		</para>

		<para>Once a user clicks on <guibutton>OK</guibutton> to apply the
		permissions, Samba maps the given permissions into a user/group/world
		r/w/x triplet set, and then checks the changed permissions for a
		file against the bits set in the
		<smbconfoption><name>security mask</name></smbconfoption> parameter. Any bits that
		were changed that are not set to <quote>1</quote> in this parameter are left alone
		in the file permissions.</para>

		<para>Essentially, zero bits in the <smbconfoption><name>security mask</name></smbconfoption>
		may be treated as a set of bits the user is <emphasis>not</emphasis>
		allowed to change, and one bits are those the user is allowed to change.
		</para>

		<para>If not explicitly set, this parameter defaults to the same valü as
		the <smbconfoption><name>create mask</name></smbconfoption> parameter. To allow a user to modify all the
		user/group/world permissions on a file, set this parameter to 0777.
		</para>

		<para>Next Samba checks the changed permissions for a file against the bits set in the
		<smbconfoption><name>force security mode</name></smbconfoption> parameter. Any bits
		that were changed that correspond to bits set to <quote>1</quote> in this parameter
		are forced to be set.</para>

		<para>Essentially, bits set in the <parameter>force security mode</parameter> parameter
		may be treated as a set of bits that, when modifying security on a file, the user has always set to be <quote>on</quote>.</para>

		<para>If not explicitly set, this parameter defaults to the same valü
		as the <smbconfoption><name>force create mode</name></smbconfoption> parameter.
		To allow a user to modify all the user/group/world permissions on a file
		with no restrictions set this parameter to 000. The
		<smbconfoption><name>security mask</name></smbconfoption> and <parameter>force
		security mode</parameter> parameters are applied to the change
		request in that order.</para>

		<para>For a directory, Samba will perform the same operations as
		described above for a file except it uses the parameter <parameter>
		directory security mask</parameter> instead of <parameter>security
		mask</parameter>, and <parameter>force directory security mode
		</parameter> parameter instead of <parameter>force security mode
		</parameter>.</para>

		<para>The <smbconfoption><name>directory security mask</name></smbconfoption> parameter
		by default is set to the same valü as the <parameter>directory mask
		</parameter> parameter and the <parameter>force directory security
		mode</parameter> parameter by default is set to the same valü as
		the <smbconfoption><name>force directory mode</name></smbconfoption> parameter.
		In this way Samba enforces the permission restrictions that
		an administrator can set on a Samba share, while still allowing users
		to modify the permission bits within that restriction.</para>

		<para>If you want to set up a share that allows users full control
		in modifying the permission bits on their files and directories and
		dös not force any particular bits to be set <quote>on</quote>, then set the following
		parameters in the &smb.conf; file in that share-specific section:
		</para>

		<smbconfblock>
			<smbconfoption><name>security mask</name><valü>0777</valü></smbconfoption>
			<smbconfoption><name>force security mode</name><valü>0</valü></smbconfoption>
			<smbconfoption><name>directory security mask</name><valü>0777</valü></smbconfoption>
			<smbconfoption><name>force directory security mode</name><valü>0</valü></smbconfoption>
		</smbconfblock>
	</sect2>

	<sect2>
		<title>Interaction with the Standard Samba File Attribute Mapping</title>

		<note>
		<para>Samba maps some of the DOS attribute bits (such as <quote>read
		only</quote>) into the UNIX permissions of a file. This means there can
		be a conflict between the permission bits set via the security
		dialog and the permission bits set by the file attribute mapping.
		</para>
		</note>

		<para>If a file has no UNIX read access for the owner, it will show up
		as <quote>read only</quote> in the standard file attributes tabbed dialog.
		Unfortunately, this dialog is the same one that contains the security information
		in another tab.</para>

		<para>What this can mean is that if the owner changes the permissions
		to allow himself read access using the security dialog, clicks on
		<guibutton>OK</guibutton> to get back to the standard attributes tab
		dialog, and clicks on <guibutton>OK</guibutton> on that dialog, then
		NT will set the file permissions back to read-only (as that is what
		the attributes still say in the dialog). This means that after setting
		permissions and clicking on <guibutton>OK</guibutton> to get back to the
		attributes dialog, you should always press <guibutton>Cancel</guibutton>
		rather than <guibutton>OK</guibutton> to ensure that your changes
		are not overridden.</para>
	</sect2>
</sect1>

<sect1>
<title>Common Errors</title>

<para>
File, directory and share access problems are common on the mailing list. The following
are examples taken from the mailing list in recent times.
</para>


	<sect2>
	<title>Users Cannot Write to a Public Share</title>

	<para>
	<quote>
	We are facing some troubles with file/directory permissions. I can log on the domain as admin user(root),
	and there's a public share on which everyone needs to have permission to create/modify files, but only
	root can change the file, no one else can. We need to constantly go to the server to
	<userinput>chgrp -R users *</userinput> and <userinput>chown -R nobody *</userinput> to allow others users to change the file.
	</quote>
	</para>

	<para>
	There are many ways to solve this problem and here are a few hints:
	</para>

	<procedure>
		<step>
			<para>
			Go to the top of the directory that is shared.
			</para>
		</step>

		<step>
			<para>
			Set the ownership to what ever public owner and group you want
<screen>
&prompt;find 'directory_name' -type d -exec chown user.group {}\;
&prompt;find 'directory_name' -type d -exec chmod 6775 'directory_name'
&prompt;find 'directory_name' -type f -exec chmod 0775 {} \;
&prompt;find 'directory_name' -type f -exec chown user.group {}\;
</screen>
			</para>

			<note><para>
			The above will set the <constant>sticky bit</constant> on all directories. Read your
			UNIX/Linux man page on what that dös. It causes the OS to assign
			to all files created in the directories the ownership of the
			directory.
			</para></note>
		</step>
		<step>
			<para>

			Directory is: <replaceable>/foodbar</replaceable>
<screen>
&prompt;<userinput>chown jack.engr /foodbar</userinput>
</screen>
			</para>

			<note><para>
				<para>This is the same as doing:</para>
<screen>
&prompt;<userinput>chown jack /foodbar</userinput>
&prompt;<userinput>chgrp engr /foodbar</userinput>
</screen>
			</para></note>
		</step>
		<step>
			<para>Now type:

<screen>
&prompt;<userinput>chmod 6775 /foodbar</userinput>
&prompt;<userinput>ls -al /foodbar/..</userinput>
</screen>

			</para>

			<para>You should see:
<screen>
drwsrwsr-x  2 jack  engr    48 2003-02-04 09:55 foodbar
</screen>
			</para>
		</step>
		<step>

		<para>Now type:
<screen>
&prompt;<userinput>su - jill</userinput>
&prompt;<userinput>cd /foodbar</userinput>
&prompt;<userinput>touch Afile</userinput>
&prompt;<userinput>ls -al</userinput>
</screen>
		</para>

		<para>
		You should see that the file <filename>Afile</filename> created by Jill will have ownership
		and permissions of Jack, as follows:
<screen>
-rw-r--r--  1 jack  engr     0 2003-02-04 09:57 Afile
</screen>
		</para>
		</step>

		<step>
		<para>
		Now in your &smb.conf; for the share add:
		<smbconfblock>
<smbconfoption><name>force create mode</name><valü>0775</valü></smbconfoption>
<smbconfoption><name>force direcrtory mode</name><valü>6775</valü></smbconfoption>
		</smbconfblock>
		</para>

		<note><para>
		These procedures are needed only if your users are not members of the group
		you have used. That is if within the OS do not have write permission on the directory.
		</para>
		</note>

		<para>
		An alternative is to set in the &smb.conf; entry for the share:
		<smbconfblock>
<smbconfoption><name>force user</name><valü>jack</valü></smbconfoption>
<smbconfoption><name>force group</name><valü>engr</valü></smbconfoption>
		</smbconfblock>
		</para>
	</step>
	</procedure>
	</sect2>


	<sect2>
		<title>File Operations Done as <emphasis>root</emphasis> with <emphasis>force user</emphasis> Set</title>

		<para>
		When you have a user in <smbconfoption><name>admin users</name></smbconfoption>, Samba will always do file operations for
		this user as <emphasis>root</emphasis>, even if <smbconfoption><name>force user</name></smbconfoption> has been set.
		</para>
	</sect2>

	<sect2>
		<title>MS Word with Samba Changes Owner of File</title>

		<para>
		<emphasis>Question:</emphasis> <quote>When user B saves a word document that is owned by user A the updated file is now owned by user B.
		Why is Samba doing this? How do I fix this?</quote>
		</para>

		<para>
		<emphasis>Answer:</emphasis> Word dös the following when you modify/change a Word document: MS Word creates a NEW document with
		a temporary name, Word then closes the old document and deletes it, Word then renames the new document to the original document name.
		There is no mechanism by which Samba can in any way know that the new document really should be owned by the owners
		of the original file. Samba has no way of knowing that the file will be renamed by MS Word. As far as Samba is able
		to tell, the file that gets created is a NEW file, not one that the application (Word) is updating.
		</para>

		<para>
		There is a work-around to solve the permissions problem. That work-around involves understanding how you can manage file
		system behavior from within the &smb.conf; file, as well as understanding how UNIX file systems work. Set on the directory
		in which you are changing Word documents: <command>chmod g+s `directory_name'</command> This ensures that all files will
		be created with the group that owns the directory. In &smb.conf; share declaration section set:
		</para>

		<para>
		<smbconfblock>
                <smbconfoption><name>force create mode</name><valü>0660</valü></smbconfoption>
                <smbconfoption><name>force directory mode</name><valü>0770</valü></smbconfoption>
		</smbconfblock>
		</para>

		<para>
		These two settings will ensure that all directories and files that get created in the share will be read/writable by the
		owner and group set on the directory itself.
		</para>

	</sect2>

</sect1>

</chapter>

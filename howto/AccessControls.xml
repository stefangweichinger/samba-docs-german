<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="AccessControls">
<chapterinfo>
	&author.jht;
	&author.jeremy;
	<author>&person.jelmer;<contrib>drawing</contrib></author>
		&author.jht;
    <pubdate>April 3 2003</pubdate>
	<author>&author.luft;<contrib>Deutsche Übersetzung</contrib></author>
</chapterinfo>
<title>Dateien, Verzeichnisse und Netzlaufwerkszugriffskontolle</title>

<para>
<indexterm><primary>ACLs</primary></indexterm>
Fortgeschrittene Windows Benutzer sind häufig verwirrt, wenn eine Änderung des Besitzes von Dateien oder Verzeichnissen
auf dem Samba Server sich nicht so auswirken, wie sie es erwarten. MS Administratoren verwirrt es oft, wenn sie versuchen
Ihre Daten mit Zugriffskontrolllisten vor unerlaubten  Zugriffen zu schützen.
</para>

<para>
Viele UNIX Administratoren sind nicht mit der MS Windows Umgebung vertraut, besondere Probleme ergeben sich aus den
Benutzerwünschen über die Kontrolle von Dateien und Verzeichnisse und deren Einrichtung.
</para>

<para>
Das Problem begründet sich in den Unterschieden bei Datei- und Verzeichnis-Benutzerrechten der beiden Systeme. Diesen
Unterschied kann auch Samba nicht wirklich aus der Welt schaffen, aber er schafft eine Brücke zwischen den Umgebungen.
</para>

<para>
<indexterm><primary>Erweiterte Attribute</primary></indexterm>
<indexterm><primary>ACLs</primary><secondary>POSIX</secondary></indexterm>

POSIX ( UNIX, LINUX ) Zugriffskontrolltechnologie gibt es schon seit Jahren, aber sie wurden nie sehr intensiv genutzt.
Dies erklärt vielleicht auch, warum es länger dauert ehe diese in kommerzielle Linux Produkte eingebunden wurden. MS
Administratoren wird dies erstaunen, da dies seit Jahren elementarer Bestandteil von Windows Produkten ist.
</para>

<para>
Dieses Kapitel soll die Punkte im Einzelnen klären, die mit Samba-3 nötig und möglich sind um Administratoren die best-
erreichbare Zugriffsverwaltung zu ermöglichen, welche die Windows Benutzer benötigen.
</para>

<para>
Samba ist nicht primär dafür gedacht, eine Unix Plattform in eine Windows Plattform zu verwandeln, sondern soll höchst-
mögliche Kompatibilität zwischen den beiden Systemen schaffen.
</para>

<sect1>
<title>Möglichkeiten und Vorteile</title>

	<para>
	Samba ermöglicht eine hohe Flexibilität beim Systemzugriff. Hier sind die Zugriffskontrollmöglichkeiten der
	jetzigen Version (3) von Samba.
	</para>

	<itemizedlist>
	<title>Samba Zugriffskontrollmöglichkeiten</title>
		<listitem><para>
				<indexterm><primary>Berechtigungen</primary><secondary>UNIX Datei und Verzeichnis</secondary></indexterm>
		<emphasis>Unix Datei und Verzeichnis Berechtigungen</emphasis>
		</para>

			<para>
			Samba arbeitet mit den UNIX Dateizugriffskontrollen zusammen. Benutzer greifen dabei als Windowsbenutzer
			auf Samba zu. Informationen über den Benutzer werden beim Einloggen übergeben. Samba benutzt
			diese Login Informationen, um zu entscheiden, ob einem Benutzer Zugriff auf Systemdaten gewährt werden soll oder nicht. Dieses
			Kapitel enthält eine Übersicht von UNIX Berechtigungen für Nutzer, die diese nicht kennen oder etwas verwirrt über
			diese sind.
			</para>
		</listitem>

		<listitem><para>
		<emphasis>Samba Netzlaufwerk Definitionen</emphasis>
		</para>

			<para>
			Beim Konfigurieren von Netzlaufwerken mit Samba in der Datei smb.conf kann der Administrator
			Berechtigungen des darunter liegenden Dateisystems verändern und beeinflussen. Dies ermöglicht teilweise eine Annäherung
			an das Verhalten, dass Windowsbenutzer erwarten. Dieser Weg ist aber nur selten die beste Lösung.
			Die grundlegenden Möglichkeiten werden hier beschrieben.
			</para>
		</listitem>

		<listitem><para>
		<emphasis>Samba Netzlaufwerkskontrolllisten</emphasis>
		<indexterm><primary>ACLs</primary><secondary>share</secondary></indexterm>
		</para>

			<para>
			Wie in Windows NT ist es auch in Samba möglich, Netzlaufwerkskontrolllisten zu erstellen. Einige
			Benutzer machen Gebrauch davon, es ist zur Zeit eine der leichtesten Möglichkeiten Zugriffskontrolle zu erreichen im
			Gegensatz zu komplexeren anderen Methoden.
			</para>
		</listitem>

		<listitem><para>
				<indexterm><primary>ACLs</primary><secondary>POSIX</secondary></indexterm>
				<indexterm><primary>ACLs</primary><secondary>Windows</secondary></indexterm>
		<emphasis>MS Windows Zugriffskontrolllisten und UNIX Zugriffskontrolllisten</emphasis>
		</para>

			<para>
			Der Gebrauch von UNIXkontrolllisten ist nur möglich, wenn diese Funktionen in dem darunter liegenden
			Dateisystem implemtiert sind. In jedem anderem Fall ist deren Nutzung nicht möglich. Aktuelle Unix-Systeme sollten diese
			Unterstützung haben. Es gibt Patches für die Linux Kernel, die diese Möglichkeit implementieren, falls nicht vorhanden.
			Viele Unix-Systeme werden mit der Unterstützung ausgeliefert, in diesem Kapitel werden wir versuchen den Benutzern
			deren Gebrauch zu erklären.
			</para>
		</listitem>
	</itemizedlist>

</sect1>

<sect1>
<title>Dateisystem Zugriffskontrollen</title>

<para>
Es ist wichtig festzustellen, dass MS Windows ein völlig anderes Dateizugriffssystem benutzt als UNIX-Systeme. Wir werden
erst die Unterschiede erklären und dann, wie Samba hilft, dies zu überbrücken.
</para>

	<sect2>
	<title>Vergleich zwischen NTFS und dem UNIX-Dateisystem</title>

	<para>
<indexterm><primary>NTFS</primary></indexterm>
<indexterm><primary>File System</primary></indexterm>
<indexterm><primary>File System</primary><secondary>UNIX</secondary></indexterm>
<indexterm><primary>File System</primary><secondary>Windows</secondary></indexterm>

	Samba benutzt das UNIX Dateisystem, d.h. Samba verhält sich innerhalb der Möglichkeiten des UNIX-Dateisystems.
	Aber Samba ist auch dafür verantwortlich, das Verhalten des Windows Dateisystems nachzustellen.
	</para>

	<para>
	Glücklicherweise bietet Samba eine Reihe von Konfigurationsmöglichkeiten, um die Unterschiede zu
	überbrücken. Wir werden einige dieser Einstellungsmöglichkeiten betrachten, jedoch nicht alle. Wer mehr wissen möchte, sollte die
	Beschreibung (man = manual Datei) der smb.conf lesen.
	</para>

	<para>Im folgenden ein Vergleich von UNIX- und Windows-Dateisystem NT/200x:
	<indexterm><primary>Dateisystem</primary><secondary>Eigenschaftsvergleich</secondary></indexterm>

	</para>

	<variablelist>
		<varlistentry>
			<term>Namens-Raum</term>
			<listitem>
		<para>
		Windows Dateinamen können 254 Zeichen lang sein, UNIX beherrscht bis zu 1023 Zeichen. Die
		Dateierweiterung beschreibt in Windows einen bestimmten Dateityp, in UNIX-Systemen ist das nicht zwingend so.
		</para>
		<para>
		Was unter Windows ein Ordner ist, heißt in UNIX 'Verzeichnis'.
		</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>Groß-Kleinschreibung</term>
			<listitem>
		<para>
		<indexterm><primary>8.3 Dateinamen</primary></indexterm>
		<indexterm><primary>Dateisystem</primary><secondary>Schreibweise sensitiv</secondary></indexterm>
		Im Allgemeinen sind Dateinamen unter Windows 8+3 Zeichen lang und werden Groß erstellt. Dateinamen die
		länger sind, sind in ihrer Schreibweise insensitiv (d. h. ob groß oder klein geschrieben spielt keine Rolle )
		</para>

		<para>
		Unter UNIX sind alle Dateien und Verzeichnisse Schreibweisen sensitiv (es spielt sehr wohl eine Rolle,
		ob eine Datei groß oder klein geschrieben wird).
		</para>
		<para>
		Im unteren Beispiel würden die Dateinamen von Windows völlig gleich interpretiert werden , für UNIX wären es drei verschiedene Dateien.
		<screen>
				MYFILE.TXT
				MyFile.txt
				myfile.txt
		</screen></para>

		<para>
		Es wird ziemlich klar, dass diese Dateien in Windows nicht nebeneinander stehen könnten
		(im selben Ordner) unter UNIX jedoch jederzeit.
		</para>
		<para>
		Was soll nun Samba tun, wenn es auf diese Dateien trifft? Die Lösung besteht darin, dass die erste
		Datei für Windowsbenutzer sichtbar ist, die anderen jedoch nicht verfügbar bzw. unsichtbar sind, eine
		andere Lösung ist nicht denkbar.
		</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>Verzeichnis-Trennzeichen</term>
			<listitem>

		<para>
				<indexterm><primary>Verzeichnis-Trennzeichen</primary></indexterm>
		MS Windows und DOS benutzen den \ (Backslash) als Verzeichnis-Trennzeichen <constant>\</constant>
		UNIX benutzt (wie im Internet üblich) den Slash / als Verzeichnis Trennzeichen.
		<constant>/</constant>Dies wird von Samba transparent (für den Windowsbenutzer unbemerkt) umgelegt.
		</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>Laufwerksbezeichnung</term>
			<listitem>
		<para>
			<indexterm><primary>Laufwerksbezeichnung</primary></indexterm>
		In MS Windows werden verschiedene Festplatten Partitionen mit Buchstaben belegt.<command>C:</command>
		Es gibt unter UNIX kein ähnliches Konzept, Festplatten Teile (Partitionen) werden eingebunden
		(gemounted) als Teil des Dateisystems. Was unter DOS <constant>C:\</constant> ist, wäre unter UNIX einfach
		(root = Wurzel des Dateisystembaumes)<constant>/</constant>.
		</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>Dateinamenskonvention</term>
			<listitem>
		<para>
			<indexterm><primary>Dateinamenskonvention</primary></indexterm>
		MS Windows kennt keine Dateien, deren Namen mit einem Punkt beginnt(<constant>.</constant>).
		In UNIX werden solche Dateien häufig in den "Home" (Heimatverzeichnissen) von Benutzern gefunden.
		Punktdateien(<constant>.</constant>) sind typischerweise Start- oder Konfigurationsdateien für UNIX-Programme.
		</para>
			</listitem>
		</varlistentry>

		<varlistentry>
			<term>Verknüpfungen und Verkürzungen</term>
			<listitem>
		<para>
		<indexterm><primary>Links</primary><secondary>hard</secondary></indexterm>
		<indexterm><primary>Links</primary><secondary>soft</secondary></indexterm>
		<indexterm><primary>Short-Cuts</primary></indexterm>
		Unter Windows sind Verknüpfungen spezielle Dateitypen, die zum verkürzten Starten von Programmen in deren
		realen Ordner dienen. Auch unter UNIX gibt es Verknüpfungen und Verkürzungen,
		diese werden jedoch völlig unterschiedlich gehandhabt.
		</para>
		<para>
		Symbolische Verknüpfungen unter UNIX halten die aktuellen Informationen von Dateien oder Verzeichnissen.
		Schreib- und Lesezugriffe auf eine Verknüpfung verhalten sich genauso wie bei der originalen Datei.
		Symbolische Verknüpfungen nennt man auch weiche Verknüpfungen.
		Harte Verknüpfungen kennt MS Windows nicht,
		diese würden das Benutzen ein- und derselben Datei unter mehreren Namen gleichzeitig ermöglichen.
		</para>
			</listitem>
		</varlistentry>
	</variablelist>

	<para>
	Es gibt noch viele Unterschiede, die einem Windows Administrator unangenehm im Umgang mit UNIX sein könnten.
	</para>

	</sect2>Verwaltung von Verzeichnissen

	<sect2>
	<title>naging Directories</title>

	<para>
	Es gibt grunsätzlich 3 Möglichkeiten um Ordner (Verzeichnisse) zu verwalten: <command>create (erstellen), 
delete (löschen), rename (umbenennen )</command>.
	<table frame="all">
		<title>Verwaltung von Ordnern (Verzeichnissen) mit UNIX und Windows</title>
		<tgroup align="center" cols="3">
		<thead>
		<row><entry>Action</entry><entry>Windows Befehle</entry><entry>UNIX Befehle</entry></row>
		</thead>
		<tbody>
			<row><entry>create</entry><entry>md folder</entry><entry>mkdir folder</entry></row>
			<row><entry>delete</entry><entry>rd folder</entry><entry>rmdir folder</entry></row>
			<row><entry>rename</entry><entry>rename oldname newname</entry><entry>mv oldname newname</entry></row>
		</tbody>
	</tgroup>
	</table>
	</para>

	</sect2>

	<sect2>
	<title>Verwaltung von Datei- und Ordner- (Verzeichnis) Zugriffskontrollen</title>


	<para>
	<indexterm><primary>ACLs</primary><secondary>Dateisystem</secondary></indexterm>
	Jedem Administrator wird geraten zusätzliche Handbücher über dieses Thema zu studieren.
	Die meisten Fälle können mit den grundlegenden Zugriffsmöglichkeiten von UNIX gelöst werden
	ohne die Technologien der Zugriffskontrolllisten (ACLs) oder der Erweiterten Attribute (EAs) zu gebrauchen.
	</para>

	<para>
	Die Datei- und Verzeichnisverwaltung von UNIX basiert auf den folgenden Zugriffsmöglichkeiten:
	<screen>
&prompt;<userinput>ls -la</userinput>
total 632
drwxr-xr-x   13 maryo   gnomes      816 2003-05-12 22:56 .
drwxrwxr-x   37 maryo   gnomes     3800 2003-05-12 22:29 ..
dr-xr-xr-x    2 maryo   gnomes       48 2003-05-12 22:29 muchado02
drwxrwxrwx    2 maryo   gnomes       48 2003-05-12 22:29 muchado03
drw-rw-rw-    2 maryo   gnomes       48 2003-05-12 22:29 muchado04
d-w--w--w-    2 maryo   gnomes       48 2003-05-12 22:29 muchado05
dr--r--r--    2 maryo   gnomes       48 2003-05-12 22:29 muchado06
drwsrwsrwx    2 maryo   gnomes       48 2003-05-12 22:29 muchado08
----------    1 maryo   gnomes     1242 2003-05-12 22:31 mydata00.lst
--w--w--w-    1 maryo   gnomes     7754 2003-05-12 22:33 mydata02.lst
-r--r--r--    1 maryo   gnomes    21017 2003-05-12 22:32 mydata04.lst
-rw-rw-rw-    1 maryo   gnomes    41105 2003-05-12 22:32 mydata06.lst
&prompt;
</screen>
	</para>

	<para>
	Die Reihen oben repräsentieren (von rechts nach links): Berechtigung, Anzahl der "harten" Links einer Datei, 
	Besitzer (einer Datei), die Besitzergruppe und die Größe in Bytes.
	</para>

	<para>
	Hier finden Sie eine Übersicht<link linkend="access1"/>.
	</para>

	<image id="access1" 
scale="40"><imagedescription>Übersicht der UNIX Berechtigungen</imagedescription><imagefile>access1</imagefile></image>

	<para>
	Jedes Bit kann auch unbesetzt sein und wird durch ein Minus ( - )dargestellt.

	<example>
		<title>Beispieldatei</title>
		<programlisting>
		-rwxr-x---   Bedeutet: Der Besitzer kann lesen, schreiben und ausführen. 
		                       Die Gruppe kann lesen und ausführen.
		                       Andere haben keine Rechte.
		</programlisting>
	</example>

	</para>

	<para>
	Zusätzliche Möglichkeiten im Typen-Feld sind [type] : c = character device, b = block device, p = pipe device, s = UNIX Domain Socket.
	</para>

	<para>
	Die Zeichen <constant>rwxXst</constant> für die Berechtigungen für Nutzer, Gruppen und anderen sind: 
	lesen (r), schreiben (w), ausführen (oder Ordner Zugriff) (x),
	exclusives ausführen, wenn der Nutzer berechtigt für die Datei oder den Ordner ist (X), Setzen der ID des 
	Nutzers bei Ausführung (s), sticky (begleitendes Bit)(t).
	</para>

	<para>
	Wenn das sticky bit auf einem Verzeichnis gesetzt ist, können darin enthaltene Dateien nur von Nutzer root oder dem 
	Ersteller der Dateien gelöscht werden, in jedem anderem Fall sind alle anderen Dateivorgänge (löschen,lesen,umbenennen 
	erlaubt). Das sticky bit wird häufig für Verzeichnisse wie das /tmp Verzeichnis benutzt, welches gewöhnlich für jeden 
	beschreibbar ist.
	 </para>

	<para>
	Wenn auf einem Verzeichnis das Gruppen- oder Nutzer-Identitätsbit gesetzt ist, dann werden Nutzer und Gruppen auf dort 
	enthaltene Dateien berechtigt. Dies ermöglicht das Erstellen von Verzeichnissen, auf die alle Nutzer einer Gruppe 
	zugreifen sollen, auch wenn die primäre Gruppe der Nutzer nicht gleiche ist und es nicht gewünscht ist, dass nur ein Benutzer 
	exklusiv auf eine Datei berechtigt ist.
	</para>

	<para>
	Falls ein Verzeichnis auf <constant>drw-r-----</constant> gesetzt ist, heisst dies, dass der Eigner in ihm Dateien lesen 
	und schreiben kann, aber dadruch, dass das Ausführen-Flag (x) nicht gesetzt ist, Dateien in diesem Verzeichnis von niemand
	gesehen werden kann. Die Gruppe kann Dateien lesen aber keine neuen anlegen. Falls Dateien in dem Verzeichnis auf les- oder
	schreibbar für die Gruppe gesetzt sind, können die Gruppenmitglieder diese schreiben oder löschen.
	</para>

	</sect2>

</sect1>

<sect1>
<title>Freigabedefinition Zugriffskontrollen</title>


<para>
<indexterm><primary>Berechtigungen</primary><secondary>Freigabe</secondary></indexterm>
Die folgenden Parameter in den Dateisektionen von &smb.conf; definieren eine Freigabekontrolle oder betreffen
Zugriffskontrollen. Bevor Sie eine dieser folgenden Optionen benutzen sehen Sie bitte in den den manpages für &smb.conf; nach.
</para>

	<sect2>
	<title>Benutzer- und Gruppen-basierende Kontrollen</title>

	<para>
	Benutzer- und Gruppen-basierende Kontrollen können sehr hilfreich sein. In manchen Situationen ist es sogar gewünscht,
	dass alle Dateisystem-Operationen behandelt werden, als wären sie von einem einzelnen Benutzer gemacht worden.
	Die Benutzung von <smbconfoption><name>force user</name></smbconfoption> und <smbconfoption><name>force group</name></smbconfoption> 
	wird dies erreichen. In anderen Situationen ist es vielleicht notwendig, ein Paranoia-Level von Kontrollen einzusetzen,
	umm sicherzustellen, dass es nur bestimmten ausgewählten und authorisierten Personen möglich sein wird,
	auf eine Freigabe oder dessen Inhalt zuzugreifen. Hier kann die Benutzung von <smbconfoption><name>valid users</name></smbconfoption> oder 
	<smbconfoption><name>invalid users</name></smbconfoption> am hilfreichsten sein.
	</para>

	<para>
	Wie immer ist es höchst ratsam, die leichteste Methode für den Unterhalt und die unzweideutigste für die
	Zugriffskontrolle zu verwenden. Denken Sie daran, dass nach dem Verlassen Ihrer Arbeit jemand anderes Unterstützung
	geben können muss und er eine grosse Baustelle vorfindet oder Ihre Vorgehensweise nicht versteht, dass es durchaus
	möglich sein kann, dass Samba gelöscht wird oder eine alternative Lösung eingesetzt wird.
	</para>

	<para>
	<link linkend="ugbc"/> zählt diese Kontrollen auf.
	</para>

	<table frame='all' pgwide='0' id="ugbc"><title>Benutzer- und Gruppen-basierende Kontrollen</title>
	<tgroup cols='2'>
		<colspec align="left"/>
		<colspec align="justify" colwidth="1*"/>
		<thead>
		<row>
			<entry align="center">Kontrollparameter</entry>
			<entry align="center">Beschreibung - Ausführung - Hinweise</entry>
		</row>
		</thead>
		<tbody>
		<row>
			<entry><smbconfoption><name>admin users</name></smbconfoption></entry>
			<entry><para>
			Benutzerliste derer, denen Administrationsprivilegien auf die Freigabe erteilt wird.
			Sie werden alle Dateioperationen als Super-User (root) ausführen.
			Jeder Benutzer in dieser Liste wird in der Lage sein, alles auf der Freigabe zu machen,
			egal welche Dateiberechtigungen gesetzt wurden.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force group</name></smbconfoption></entry>
			<entry><para>
			Spezifiziert einen UNIX Gruppennamen welcher als primäre Standardgruppe allen Benutzern zugewiesen wird,
			die auf diesen Dienst verbinden.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force user</name></smbconfoption></entry>
			<entry><para>
			Spezifiziert einen UNIX Benutzernamen welcher als Standardbenutzer allen Benutzern zugewiesen wird,
			die auf diesen Dienst verbinden.
			Dies ist für das Teilen von Dateien hilfreich. Falsche benutzung kann Sicherheitsprobleme
			verursachen.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>guest ok</name></smbconfoption></entry>
			<entry><para>
			Falls dieser Parameter für einen Dienst gesetzt ist, wird kein Passwort verlangt, um mit diesem
			Dienst zu verbinden.
			Die Privilegien werden diejenigen des Gastzugangs sein.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>invalid users</name></smbconfoption></entry>
			<entry><para>
			Benutzerliste derer, denen ein Anmelden an diesem Dienst nicht erlaubt wird.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>only user</name></smbconfoption></entry>
			<entry><para>
			Kontrolliert, ob Verbindungen mit Benutzernamen, die nicht in der Liste sind, erlaubt wird.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>read list</name></smbconfoption></entry>
			<entry><para>
			Benutzerliste derer, die einen Nur-Lesezugriff auf diesen Dienst haben. Benutzer in dieser Liste
			bekommen keinen Schreibzugriff, egal wie die 'read only' Option gesetzt wurde.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>username</name></smbconfoption></entry>
			<entry><para>
			Sehen Sie in der &smb.conf; man page für mehr Informationen nach -- dies ist ein komplexer
			und potentiell falsch angewendeter Parameter.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>valid users</name></smbconfoption></entry>
			<entry><para>
			Benutzerliste derer, denen das Anmelden an diesem Dienst erlaubt wird.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>write list</name></smbconfoption></entry>
			<entry><para>
			Benutzerliste derer, denen Lese-Schreibzugriff an diesem Dienst erlaubt wird.
			</para></entry>
		</row>
		</tbody>
	</tgroup>
	</table>

	</sect2>

	<sect2>
	<title>Datei- und Verzeichnis-Berechtigungsbasierende Kontrollen</title>

	<para>
	Die folgenden Datei- und Verzeichnis-Berechtigungsbasierenden Kontrollen können, wenn falsch angewendet,
	in erheblichen Schwierigkeiten bei der Fehlersuche durch Fehlkonfigurationen enden.
	Benutzen Sie diese sparsam und sorgfältig. Durch schrittweise Einführung einer nach dem anderen können unerwünschte
	Nebeneffekte entdeckt werden. Im Fehlerfall kommentieren Sie alle aus und führen Sie diese dann schrittweise in 
	einer kontrollierten Art und Weise wieder ein.
	</para>

	<para>
	Sehen Sie unter <link linkend="fdpbc"/> für Informationen nach, die diese Parameter betreffen.
	</para>

	<table frame='all' id="fdpbc"><title>Datei- und Verzeichnis-Berechtigungsbasierende Kontrollen</title>
		<tgroup cols='2'>
			<colspec align="left"/>
			<colspec align="justify" colwidth="1*"/>
		<thead>
		<row>
			<entry align="center">Kontrollparameter</entry>
			<entry align="center">Beschreibung - Ausführung - Hinweise</entry>
		</row>
		</thead>
		<tbody>
		<row>
			<entry><smbconfoption><name>create mask</name></smbconfoption></entry>
			<entry><para>
			Sehen Sie in der &smb.conf; man page nach.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>directory mask</name></smbconfoption></entry>
			<entry><para>
			Die Oktal-Modi, die beim Konvertieren von DOS-Modi nach UNIX-Modi beim Erzeugen von 
			UNIX Verzeichnissen benutzt werden.
			Sehen Sie auch: directory security mask.
			</para></entry></row>
		<row>
			<entry><smbconfoption><name>dos filemode</name></smbconfoption></entry>
			<entry><para>
			Durch Einschalten dieses Parameters erlaubt man einem Benutzer der Schreibzugriff auf eine Datei hat,
			die Berechtigungen auf diese zu ändern.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force create mode</name></smbconfoption></entry>
			<entry><para>
			Dieser Parameter spezifiziert eine Anzahl von UNIX Mode Bit-Berechtigungen, welche immer auf eine Datei
			gesetzt werden, die durch Samba erzeugt wurde.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force directory mode</name></smbconfoption></entry>
			<entry><para>
			Dieser Parameter spezifiziert eine Anzahl von UNIX Mode Bit-Berechtigung, welche immer auf ein Verzeichnis
			gesetzt werden, das durch Samba erzeugt wurde.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force directory security mode</name></smbconfoption></entry>
			<entry><para>
			Kontrolliert Änderungen an UNIX Berechtigungsbits, wenn ein Windows NT Client an UNIX Berechtigungen auf ein Verzeichnis manipuliert.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>force security mode</name></smbconfoption></entry>
			<entry><para>
			Kontrolliert Änderungen an UNIX Berechtigungsbits, wenn ein Windows NT Client an UNIX Berechtigungen manipuliert.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>hide unreadable</name></smbconfoption></entry>
			<entry><para>
			Verhindert, dass Clients die Existenz von Dateien sehen, die nicht lesbar sind.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>hide unwriteable files</name></smbconfoption></entry>
			<entry><para>
			Verhindert, dass Clients die Existenz von Dateien sehen, die nicht schreibbar sind. Nicht beschreibbare Verzeichnisse
			werden wie gewöhnlich angezeigt.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>nt acl support</name></smbconfoption></entry>
			<entry><para>
			Dieser Parameter kontrolliert, ob smbd versuchen wird, UNIX Berechtigungen in Windows NT Zugriffsberechtigungslisten zu mappen.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>security mask</name></smbconfoption></entry>
			<entry><para>
			Kontrolliert Änderungen an UNIX Berechtigungsbits, wenn ein Windows NT Client an UNIX Berechtigungen auf eine Datei manipuliert.
			</para></entry>
		</row>
		</tbody>
	</tgroup>
	</table>

	</sect2>

	<sect2>
	<title>Allgemeine Kontrollen</title>

	<para>
	Das folgende ist dokumentiert, da es weit verbreitet ist, dass Administratoren unabsichtlich Barrieren beim
	Einrichten von Dateizugriffen dadurch aufbauen, dass sie die genauen Auswirkungen von Dateieinstellungen in 
	&smb.conf; nicht verstehen. Siehe <link linkend="mcoc"/>.
	</para>

	<table frame='all' id="mcoc"><title>Andere Kontrollen</title>
	<tgroup cols='2'>
		<colspec align="justify" colwidth="1*"/>
		<colspec align="justify" colwidth="1*"/>
		<thead>
		<row>
			<entry align="center">Kontrollparameter</entry>
			<entry align="center">Beschreibung - Ausführung - Hinweise</entry>
		</row>
		</thead>
		<tbody>
		<row>
			<entry><smbconfoption><name>case sensitive</name></smbconfoption>, <smbconfoption><name>default case</name></smbconfoption>, <smbconfoption><name>short preserve case</name></smbconfoption></entry>
			<entry><para>
			Dies bedeutet, dass alle Dateinamens-Anzeigen in schreibweise-sensitiver Art erfolgen.
			Die Dateien werden genau so mit dem exakten Namen angelegt, wie Samba den Dateinamen vom Windows Client erhält.t.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>csc policy</name></smbconfoption></entry>
			<entry><para>
			Client-seitige Caching Policy - ermöglicht parallele MS Windows Client-seitige Datei-Caching Möglichkeiten.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>dont descend</name></smbconfoption></entry>
			<entry><para>
			Erlaubt das Spezifizieren einer kommata-getrennten Verzeichnisliste, die der Server immer leer anzeigt.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>dos filetime resolution</name></smbconfoption></entry>
			<entry><para>
			Diese Option ist hauptsächlich als Kompatibilitätsoption für Visual C++ geacht, wenn diese gegen eine
			Samba-Freigabe genutzt wird.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>dos filetimes</name></smbconfoption></entry>
			<entry><para>
			DOS und Windows erlauben Benutzer, Zeitstempel auf Dateien zu ändern, wenn diese auf die Datei schreiben können.
			POSIX-Semantiken verhindern dies. Diese Option erlaubt DOS und Windows-Verhalten.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>fake oplocks</name></smbconfoption></entry>
			<entry><para>
			Oplocks sind die Art und Weise, wie SMB Clients die Erlaubnis eines Servers bekommen, Dateioperationen
			lokal zu cachen (zwischenzuspeichern). Falls ein Server Oplock erlaubt, ist es dem Client freigestellt anzunehmen,
			dass er der einzige ist der auf die Datei zugreift und er kann Dateicaching aggressiv nutzen.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>hide dot files</name></smbconfoption>, <smbconfoption><name>hide files</name></smbconfoption>, <smbconfoption><name>veto files</name></smbconfoption></entry>
			<entry><para>
			HInweis: MS Windows Explorer erlaubt das Überschreiben von Dateien, die als Versteckt markiert sind, sodass
			sie weiter sichtbar sind.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>read only</name></smbconfoption></entry>
			<entry><para>
			Falls dieser Parameter 'yes' ist, können Benutzer eines Dienstes weder Dateien im Diensteverzeichnis erzeugen noch ändern.
			</para></entry>
		</row>
		<row>
			<entry><smbconfoption><name>veto files</name></smbconfoption></entry>
			<entry><para>
			Liste von Dateien oder Verzeichnissen die weder sichtbar noch zugreifbar sind.
			</para></entry>
		</row>
		</tbody>
	</tgroup>
	</table>

	</sect2>

</sect1>

<sect1>
<title>Zugriffskontrollen auf Freigaben</title>


	<para>
<indexterm><primary>Berechtigungen</primary><secondary>Freigabe ACLs</secondary></indexterm>
	Dieses Kapitel handelt davon, wie Samba für Zugriffskontroll-Einschränkungen bei Freigaben konfiguriert werden kann.
	Standardmässig setzt Samba keine Einschränkungen auf die Freigabe selbst. Einschränkungen auf der Freigabe selbst
	können auf MS Windows NT4/200x/XP-Freigaben gesetzt werden. Dies kann ein effektiver Weg sein zu regeln, wer auf
	eine Freigabe verbinden darf. In Ermangelung spezifischer Einschränkungen ist die Standardeinstellung, dem
	globalen Benutzer <constant>Jeder - Volle Kontrolle</constant> (volle Kontrolle, ändern und lesen) zu erlauben.
	</para>

	<para>
	Zur Zeit stellt Samba kein Werkzeug zum Konfigurieren von Zugriffskontroll-Einstellung auf einer Freigabe selbst zur 
	Verfügung. Samba hat die Kapazität auf Zugriffskontroll-Einstellungen zu speichern und zu arbeiten, aber der einzige Weg,
	diese Einstellung zu erzeugen, ist der NT4 Server Manager oder die Windows 200x MMC für Computer-Verwaltung.
	</para>

	<para>
	Samba speichert die Zugriffskontroll-Einstellungen pro Freigabe in einer Datei namens <filename>share_info.tdb</filename>.
	Der Ablageort dieser Datei auf Ihrem System hängt davon ab, wie Sie Samba kompiliert haben.
	Der Standard-Ablageort für Samba's tdb Dateien ist unter <filename>/usr/local/samba/var</filename>. Falls das <filename>tdbdump</filename>
	Werkzeug auf Ihrem System kompiliert und installiert wurde können Sie den Inhalt dieser Datei dadurch ausführen:
	<command>tdbdump share_info.tdb</command> in dem Verzeichnis, welches die tdb Dateien enthält.
	</para>

	<sect2>
	<title>Verwaltung von Freigabeberechtigungen</title>

		<para>
		Das beste Werkzeug für eine Aufgabe ist plattformabhängig. Wählen Sie das beste Werkzeug für Ihre Umgebung.
		</para>

			<sect3>
			<title>Windows NT4 Workstation/Server</title>
			<para>
			Das Werkzeug, welches Sie zum Verwalten von Freigabeberechtigungen auf einem Samba-Server nutzen müssen 
			ist der NT Server Manager. Der Server Manager wird mit den Windows NT4 Serverprodukten, aber
			nicht mit Windows NT4 Workstation ausgeliefert.
			Sie können den NT Server Manager für MS Windows NT4 Workstation von Microsoft &smbmdash; erhalten, Details weiter unten.
			</para>

			<?latex \newpage ?>

			<procedure>
			<title>Anweisungen</title>
			<step><para>
			Starten Sie den <application>NT4 Server Manager</application>, klicken Sie auf den Sambaserver, den Sie administrieren möchten.
			In dem Menü wählen Sie <guimenu>Computer</guimenu>, dann klicken Sie auf <guimenuitem>Freigegebene Verzeichnisse</guimenuitem>.
			</para></step>

			<step><para>
			Klicken Sie auf die Freigabe, die Sie verwalten möchten, dann gehen Sie auf <guilabel>Eigenschaften</guilabel>
			und klicken auf die <guilabel>Berechtigungen</guilabel> Registerkarte. 
			Jetzt können Sie Zugriffskontroll-Einstellungen nach Belieben hinzufügen und ändern.
			</para></step>
			</procedure>

			</sect3>

			<sect3>
			<title>Windows 200x/XP</title>

			<para>
			Auf <application>MS Windows NT4/200x/XP</application> werden Systemzugriffskontrolllisten für Freigaben durch Nutzung
			von eigenen Werkzeugen gesetzt, meist durch den Dateimananger. Beispielsweise in Windows 200x, rechtsklicken Sie auf den Freigabeordner,
			dann wählen Sie <guimenuitem>Freigabe</guimenuitem>, dann klicken Sie auf <guilabel>Berechtigungen</guilabel>. Die Standardberechtigung
			unter Windows NT4/200x erlaubt <quote>Jedem</quote> volle Kontrolle auf die Freigabe.
			</para>

			<para>
			MS Windows 200x und spätere Versionen kommen mit einem Werkzeug namens <application>Computerverwaltung</application> Snap-In für die
			Microsoft Management Konsole (MMC). Dieses Werkzeug befindet sich in der <guimenu>Systemsteuerung ->
			Verwaltung -> Computerverwaltung</guimenu>.
			</para>

			<procedure>
			<title>Anweisungen</title>
			<step><para>
			Nachdem Sie die MMC über das Computerverwaltungs-Snap-In gestartet haben, klicken Sie auf den Menüeintrag <guimenuitem>Action</guimenuitem>,
			und wählen dann <guilabel>Mit einem anderen Computer verbinden</guilabel>. Falls Sie nicht an einer Domäne angemeldet sind,
			werden Sie aufgefordert, einen Domänenbenutzer und ein Passwort einzugeben. Dies wird Sie gegenüber der Domäne authentifizieren.
			Falls Sie bereits als ein Benutzer mit Administrationsrechten angemeldet sind wird dieser Schritt nicht angeboten.
			</para></step>

			<step><para>
			Falls der Sambaserver nicht in der Box <guilabel>Computer auswählen</guilabel> angezeigt wird, geben Sie den Namen des Samba-Zielservers
			im Feld <guilabel>Name:</guilabel> ein. Klicken Sie jetzt den <guibutton>[+]</guibutton> Knopf in der Nähe von
			<guilabel>Systemwerkzeuge</guilabel>, dann auf den <guibutton>[+]</guibutton> Knopf in der Nähe von <guilabel>Freigabeordner</guilabel>
			im linken Bereich.
			</para></step>

			<step><para>
			Im rechten Bereich doppelklicken Sie auf die Feigabe, auf die Sie Zugriffskontroll-Berechtigungen vergeben möchten.
			Dann klicken Sie auf die Registerkarte <guilabel>Freigabe-Berechtigungen</guilabel>. Jetzt ist es möglich, Zugriffskontrolleinheiten
			zu dem Freigabeordner hinzuzufügen. Merken Sie sich, welchen Zugriffstyp (volle Kontrolle, ändern, lesen) Sie für jeden
			Eintrag vergeben möchten.
			</para></step>
			</procedure>

			<warning>
			<para>
			Seien Sie vorsichtig. Falls Sie alle Berechtigungen von dem <constant>Jeder</constant> Benutzer ohne diesen Benutzer entfernt zu haben
			wegnehmen, wird anschliessend kein Benutzer mehr in der Lage sein, auf die Freigabe zuzugreifen. Dies ist ein Ergebnis davon,
			was als ACL-Präzedenz bekannt ist. Jeder mit <emphasis>kein Zugriff</emphasis> heisst, dass <constant>MaryK</constant>, welche Teil der Gruppe
			<constant>Jeder</constant> ist, keinen Zugriff hat, obwohl Ihr explizit volle Zugriffsrechte gegeben wurden.
			</para>
			</warning>

			</sect3>
		</sect2>

</sect1>

<sect1>
<title>MS Windows Zugriffskontrolllisten (ACLs) und UNIX-Wechselwirkungen</title>

	<sect2>
		<title>Verwalten von UNIX Berechtigungen durch NT Sicherheitsdialoge</title>


		<para>
<indexterm><primary>Berechtigungen</primary><secondary>Datei/Verzeichnis ACLs</secondary></indexterm>
		Windows NT Clients können Ihre eigene Dialogbox für Sicherheitseinstellungen verwenden, um UNIX
		Berechtigungen anzuzeigen und zu ändern.
		</para>

		<para>
		Diese Fähigkeit ist so umsichtig, dass die Sicherheit des UNIX Hosts, auf welchem Samba läuft, nicht 
		gefährdet wird und dennoch alle Dateiberechtigungs-Regeln, die ein Samba Administrator setzt, beachtet.
		</para>

		<para>
		Samba versucht nicht, jenseits der POSIX ACLs zu gehen, sodass die vielen feiner abgestimmten Zugriffskontrolloptionen, die
		Windows zur Verfügung stellt, einfach ignoriert werden.
		</para>

		<note>
		<para>
		Alle Zugriffe auf UNIX/Linux Systemdateien durch Samba wird durch die Betriebssystem-Dateizugrifsskontrollen kontrolliert.
		Bei der Fehlersuche nach Dateizugriffsproblemen ist es enorm wichtig, die Identität des Windowsbenutzers heraus zu finden,
		wie er von Samba an dieser Stelle des Dateizugriffs gezeigt wird. Dies kann am besten durch die Samba Protokolldateien
		ermittelt werden.
		</para>
		</note>
	</sect2>

	<sect2>
		<title>Anzeigen von Dateisicherheit auf einer Samba Freigabe</title>

		<para>
		Von einem NT4/2000/XP Client aus rechtsklicken Sie auf jede Datei oder Verzeichnis in einem Samba-
		gemounteten Laufwerksbuchstaben oder UNC-Pfad. Wenn das Menü aufgeht klicken Sie auf den <guilabel>Eigenschaften</guilabel> Eintrag 
		am Fuss des Menüs. Dies startet die Datei <constant>Eigenschaften</constant> Dialogbox. Klicken Sie auf die
		<guilabel>Sicherheit</guilabel> Registerkarte und Sie werden drei Knöpfe sehen: <guibutton>Berechtigungen</guibutton>,
		<guibutton>Überwachung</guibutton> und <guibutton>Besitzer</guibutton>. Der <guibutton>Überwachung</guibutton>
		Knopf wird entweder eine Fehlermeldung <errorname>`A requested privilege is not held by the client'</errorname>
		verursachen falls der Benutzer kein NT Administrator ist oder ein Dialog, der dafür gedacht ist, einem Administrator
		Überwachungsgrundlagen einer Datei zuzufügen, wenn der Benutzer als NT Administrator angemeldet ist. Dieser Dialog
		ist mit einer Samba-Freigabe zu diesem Zeitpunkt nicht funktionierend, da der einzige Knopf, der <guibutton>Hinzufügen</guibutton>
		Knopf es derzeit nicht zulässt, eine Benutzerliste anzuzeigen.
		</para>

	</sect2>

	<sect2>
		<title>Anzeigen von Dateieigentümern</title>

		<para>
		Durch Klicken auf den <guibutton>Eigentümer</guibutton> Knopf erscheint eine Dialogbox, welche Ihnen
		anzeigt, wem die betreffende Datei gehört. Der Name des Eigentümers wird dergestalt angezeigt:
		</para>

		<para>
		<command><quote>SERVER\Benutzer (Langer Name)</quote></command>
		</para>

		<para>
		<replaceable>SERVER</replaceable> ist der NetBIOS Name des Samba Servers, <replaceable>Benutzer</replaceable>
		ist der Name des UNIX-Benutzers, dem die Datei gehört und <replaceable>(Langer Name)</replaceable> ist
		die Beschreibung, die den Benutzer ausweist (normalerweise wird dies im GECOS Feld der UNIX Passwortdatenbank gefunden).
		Klicken Sie auf den <guibutton>Schliessen</guibutton> Knopf um diesen Dialog zu entfernen.
		</para>

		<para>
		Falls der Parameter <smbconfoption><name>nt acl support</name></smbconfoption> auf <constant>false</constant> gesetzt ist,
		wird der Dateieigentümer als NT Benutzer <emphasis>Jeder</emphasis> angezeigt.
		</para>

		<para>
		Der <guibutton>Übernehmen</guibutton> Knopf erlaubt es Ihnen nicht, die Eigentumsrechte an dieser Datei auf Sie selbst zu setzen
		(ein Anklicken zeigt eine Dialogbox, die angibt, dass der Benutzer als der Sie gerade auf dem NT Client angemeldet sind, nicht
		gefunden werden kann). Der Grund hierfür ist, dass das Ändern der Eigentumsrechte auf eine Datei eine privilegierte Operation 
		in UNIX ist, die ausschliesslich dem <emphasis>root</emphasis> Benutzer obliegt. Indem Sie auf diesen Knopf drücken 
		wird NT dazu veranlasst, die Eigentumsrechte einer Datei auf den am NT Client gegenwärtig angemeldeten Benutzer zu ändern, dies 
		jedoch funktioniert zu diesem Zeitpunkt mit Samba nicht.
		</para>

		<para>
		Es gibt ein NT <command>chown</command> Kommando, welches mit Samba funktioniert und es einem Benutzer, der mit Administratorprivilegien an
		einen Sambaserver als root angeschlossen ist erlaubt, die Eigentumsrechte von Dateien sowohl auf lokaler NTFS Dateisystemebene oder entfernt gemountete
		NTFS oder Samba-Laufwerke zu setzen. Dies ist verfügbar als Teil der von Jeremy Allison vom Samba Team geschriebenen <application>Seclib</application> 
		NT Sicherheitsbibliothek und ist von der FTP-Hauptseite von Samba abrufbar.
		</para>

	</sect2>

	<sect2>
		<title>Anzeigen von Datei- oder Verzeichnisberechtigungen</title>

		<para>
		Der dritte Knopf ist der <guibutton>Berechtigungen</guibutton> Knopf. Indem Sie diesen Anklicken öffnet sich eine Dialogbox,
		welche sowohl die Berechtigungen und den UNIX-Besitzer für die Datei als auch für das Verzeichnis anzeigen.
		Der Eigentümer wird dergestalt angezeigt:
		</para>

		<para><command><replaceable>SERVER</replaceable>\
				<replaceable>Benutzer</replaceable>
				<replaceable>(Langer Name)</replaceable></command></para>

		<para><replaceable>SERVER</replaceable> ist der NetBIOS Name des Samba Servers, <replaceable>Benutzer</replaceable>
		ist der Name des UNIX-Benutzers, dem die Datei gehört und <replaceable>(Langer Name)</replaceable> ist
		die Beschreibung, die den Benutzer ausweist (normalerweise wird dies im GECOS Feld der UNIX Passwortdatenbank gefunden).
		Klicken Sie auf den <guibutton>Schliessen</guibutton> Knopf um diesen Dialog zu entfernen.</para>

		<para>
		Falls der Parameter <smbconfoption><name>nt acl support</name></smbconfoption> auf <constant>false</constant> gesetzt ist,
		wird der Dateieigentümer als NT Benutzer <emphasis>Jeder</emphasis> angezeigt.
		</para>
		
		<para>
		Das Berechtigungsfeld wird bei Dateien und Verzeichnissen anders dargestellt, also werde ich die Art, wie
		Dateiberechtigungen angezeigt werden als erstes beschreiben.
		</para>

		<sect3>
			<title>Dateiberechtigungen</title>

			<para>Die Standard UNIX Drillinge Benutzer/Gruppe/Welt und die korrespondierenden <constant>lesen, schreiben, ausführen</constant> Berechtigungen
			werden von Samba in ein aus drei Elementen bestehendes NT ACL mit <quote>r</quote>, <quote>w</quote> und <quote>x</quote> Bits 
			zu NT Berechtigungen passenden gemappt. Die UNIX Welt-Berechtigungen werden in die globale NT Gruppe <constant>Jeder</constant> gemappt,
			gefolgt von der Berechtigungsliste, die für UNIX-Welt gilt. Die UNIX Eigentümer- und Gruppenberechtigungen werden als ein NT
			<guiicon>Benutzer</guiicon> Symbol und ein NT <guiicon>lokale Gruppe</guiicon> Symbol angezeigt
			beziehungsweise durch die nachfolgende Berechtigungsliste für die UNIX Benutzer und Gruppe.</para>

			<para>Dadurch, dass viele UNIX Berechtigungssätze nicht in allgemeine NT Namen wie <constant>lesen</constant>,
			<constant>ändern</constant> oder <constant>volle Kontrolle</constant> passen, werden gemeinhin die Berechtigungen
			durch Wörter wie <constant>Spezieller Zugriff</constant> in der NT Anzeigeliste angeführt.</para>

			<para>Doch was passiert, wenn die Datei keine Berechtigungen für eine bestimmte UNIX Benutzergruppe oder Welt-Komponente erlaubt ?
			Um es zu ermöglichen, <quote>keine Berechtigungen</quote> zu sehen und zu ändern übergibt Samba das NT <constant>Besitztum übernehmen</constant> ACL Attribut
			(welches keine Bedeutung für UNIX hat) und meldet eine Komponente ohne Berechtigung, wie wenn das NT <command>O</command> Bit gesetzt ist.
			Dies wurde natürlich deshalb gewählt, um es wie eine Null aussehen zu lassen, was bedeutet: Null Berechtigungen. Weitere Details zu dieser
			Entscheidung werden weiter unten gegeben.</para>
		</sect3>

		<sect3>
			<title>Verzeichnis-Berechtigungen</title>

			<para>Verzeichnisse auf einem NT NTFS Dateisystem haben zwei verschiedene Berechtigungssätze. Der erste Satz ist die ACL, welche
			auf das Verzeichnis selbst gesetzt ist, welche normalerweise im ersten Satz der Parentheses im normalen NT-Stil <constant>RW</constant>
			angezeigt wird. Dieser erste Satz an Berechtigungen wird durch Samba in exakt derselben Art und Weise erzeugt, wie es normale Dateiberechtigungen
			werden, und wird auch auf diesselbe Art und Weise angezeigt.</para>

			<para>Der zweite Satz von Verzeichnis-Berechtigungen hat keine echte Bedeutung in der UNIX-Berechtigungs-Welt und repräsentiert
			die <constant>vererbten</constant> Berechtigungen die jede Datei, die in diesem Verzeichnis erzeugt wird, vererben wird.</para>

			<para>Samba vereinigt diese vererbten Berechtigungen für NT, indem es die UNIX Berechtigungsmodi als ein NT ACL zurückgibt, so
			wie es eine Datei erhalten würde, die Samba für diese Freigabe erzeugt hatte.</para>
		</sect3>
	</sect2>

	<sect2>
		<title>Ändern von Datei- oder Verzeichnis-Berechtigungen</title>

		<para>Das Ändern von Datei- und Verzeichnis-Berechtigungen ist genauso einfach, wie das Ändern
		der Anzeige der Berechtigungen in der Dialogbox und das Klicken auf <guibutton>OK</guibutton>. 
		Jedoch gibt es Einschränkungen, die ein Benutzer wissen sollte und die mit den Standard 
		Samba-Berechtigungsmasken und dem Vergeben von DOS-Attributen, die ebenfalls in diesem Zusammenhang 
		gemacht werden, zusammenhängen.</para>

		<para>Falls der Parameter <smbconfoption><name>nt acl support</name></smbconfoption>
		auf <constant>false</constant> gesetzt ist schlägt jeder Versuch, Sicherheitsberechtigungen zu setzen
		mit einer Meldung <errorname>'Zugriff verweigert'</errorname> fehl.</para>

		<para>Das erste, was anzumerken ist, dass der <guibutton>Hinzufügen</guibutton> Knopf
		keine Samba-Benutzerliste zurückgeben wird (es wird eine Fehlermeldung ausgeben, die besagt
		<errorname>`Der Remoteprozedur-Aufruf schlug fehl und konnte nicht ausgeführt werden'</errorname>). 
		Das bedeutet, dass Sie nur die gegenwärtigen Benutzer/Gruppen/Welt-Berechtigungen, die in der Dialogbox
		angezeigt werden, ändern können. Dies funktioniert deshalb so gut, weil es die einzigen Berechtigungen sind, 
		die UNIX augenblicklich hat.</para>

		<para>Falls ein Berechtigungsdrilling (entweder Benutzer, Gruppe oder Welt)
		von der Liste der Berechtigungen in der NT Dialogbox entfernt wird, dann der 
		<guibutton>OK</guibutton> Knopf gedrückt wird, wird dies auf UNIX-Seite
		mit <quote>keine Berechtigungen</quote> angewendet. Wenn Sie sich dann die Berechtigungen
		nochmals ansehen wird der <quote>keine Berechtigungen</quote> Eintrag als das NT <command>O</command> Flag
		wie oben beschrieben angezeigt. Dies erlaubt es Ihnen, Berechtigungen wieder auf eine Datei oder Verzeichnis
		zu setzen, nachdem Sie diese von einem der Drillingskomponenten entfernt hatten.</para>

		<para>Weil UNIX nur die <quote>r</quote>, <quote>w</quote> und <quote>x</quote> Bits eines
		NT ACL unterstützt werden diese ignoriert, falls andere NT Sicherheitsattribute wie <constant>Löschzugriff</constant> 
		ausgewählt wurden, falls diese auf einem Samba Server angewandt werden.</para>

		<para>Wenn Berechtigungen auf ein Verzeichnis gesetzt werden, wird der zweite Satz an Berechtigungen
		(im zweiten Satz der Parenthesen) standardmässig auf alle Dateien in diesem Verzeichnis angewandt.
		Falls Sie dies nicht wünschen müssen Sie die Auswahlbox <guilabel>Berechtigungen auf existierende Dateien zurücksetzen</guilabel> 
		in dem NT Dialog vor einem Klicken auf <guibutton>OK</guibutton> abwählen.</para>

		<para>Falls Sie es wünschen, alle Berechtigungen von einer Benutzer/Gruppe/Welt Komponente zu entfernen
		können Sie entweder eine Komponente auswählen und auf den <guibutton>Entfernen</guibutton> Knopf klicken oder
		setzen Sie die Komponente darauf, nur die spezielle <constant>Berechtigung übernehmen</constant> Berechtigung
		(angezeigt als <command>O</command>) zu setzen.</para>
	</sect2>

	<sect2>
		<title>Wechselwirkung mit den Standard Samba <quote>create mask</quote> Parametern</title>

		<para>Es gibt vier Parameter, die das Wechselspiel mit den Standard Samba <parameter>create mask</parameter> Parametern kontrollieren.
		Diese sind:

		<itemizedlist>
			<listitem><smbconfoption><name>security mask</name></smbconfoption></listitem>
			<listitem><smbconfoption><name>force security mode</name></smbconfoption></listitem>
			<listitem><smbconfoption><name>directory security mask</name></smbconfoption></listitem>
			<listitem><smbconfoption><name>force directory security mode</name></smbconfoption></listitem>
		</itemizedlist>

		</para>

		<para>Sobald ein Benutzer auf <guibutton>OK</guibutton> klickt um Berechtigungen zu setzen mappt Samba
		die angegebenen Berechtigungen in einen Benutzer/Gruppe/Welt-Drillingssatz und prüft dann die geänderten
		Berechtigungen für diese Datei gegen die in <smbconfoption><name>security mask</name></smbconfoption> gesetzten Bits.
		Jedes geänderte Bit welches nicht mit <quote>1</quote> in diesem Parameter gesetzt wurde bleibt in den Dateiberechtigungen
		unberücksichtigt.</para>

		<para>Grundsätzlich werden Null-Bits in der <smbconfoption><name>security mask</name></smbconfoption>
		als ein Satz von Bits behandelt, die der Benutzer <emphasis>nicht</emphasis> ändern darf, Einer-Bits darf der Benutzer
		ändern.
		</para>

		<para>Falls nicht ausdrücklich gesetzt, zeigt dieser Parameter standardmässig auf denselben Wert wie
		der <smbconfoption><name>create mask</name></smbconfoption> Parameter. Um es einem Benutzer zu erlauben,
		alle Berechtigungen von Benutzer/Gruppe/Welt an einer Datei zu ändern, setzen Sie diesen Parameter auf 0777.
		</para>

		<para>Als nächstes prüft Samba die geänderten Berechtigung einer Datei gegen die Bits, die im
		<smbconfoption><name>force security mode</name></smbconfoption> Parameter gesetzt sind. Jedes geänderte Bit
		wird passend zu den auf <quote>1</quote> gesetzten Bits in diesem Parameter zwangsläufig gesetzt.</para>

		<para>Grundsätzlich werden Bits aus dem <parameter>force security mode</parameter> Parameter als ein Satz von Bits
		behandelt die der Benutzer immer auf <quote>an</quote> gesetzt hat, wenn die Sicherheit einer Datei geändert wird.
		</para>

		<para>Falls nicht ausdrücklich gesetzt, zeigt dieser Parameter standardmässig auf denselben Wert wie
		der <smbconfoption><name>force create mode</name></smbconfoption> Parameter. Um es einem Benutzer zu erlauben,
		alle Berechtigungen von Benutzer/Gruppe/Welt an einer Datei ohne Berechtigungen zu ändern, setzen Sie diesen Parameter auf 000.
		Die <smbconfoption><name>security mask</name></smbconfoption> und <parameter>force security mode</parameter> 
		Parameter werden angewendet, um die Anfragen in dieser Reihenfolge zu ändern.</para>
		
		<para>Für ein Verzeichnis wird Samba diesselben Operationen wie zuvor für eine Datei beschrieben
		durchführen, ausser es wird der Parameter <parameter>directory security mask</parameter> anstatt des
		Parameters <parameter>security mask</parameter> und <parameter>force directory security mode</parameter> 
		anstatt des <parameter>force security mode</parameter> Parameters angewandt.</para>

		<para>Der <smbconfoption><name>directory security mask</name></smbconfoption> Parameter
		ist standardmässig auf denselben Wert wie der <parameter>directory mask</parameter> Parameter
		gesetzt und der <parameter>force directory security mode</parameter> Parameter ist standardmässig
		auf denselben Wert wie der <smbconfoption><name>force directory mode</name></smbconfoption> Parameter
		gesetzt.
		Auf diese Weise erzwingt Samba die Berechtigungs-Einschränkungen, die ein Administrator auf einer
		Samba-Freigabe gesetzt hat, während den Benutzern weiterhin erlaubt wird, innerhalb dieser Einschränkung
		die Berechtigungsbits zu ändern.</para>

		<para>Falls Sie eine Freigabe aufsetzen möchten, die es Benutzern erlaubt, volle Kontrolle bei der
		Änderung von Berechtigungsbits auf Ihren eigenen Dateien und Verzeichnissen zu geben und nicht irgendwelche
		Bits auf <quote>an</quote> zu verstellen, dann setzen Sie die folgenden Parameter in der &smb.conf; Datei
		innerhalb des Freigabe-spezifischen Abschnitts:
		</para>

		<smbconfblock>
			<smbconfoption><name>security mask</name><value>0777</value></smbconfoption>
			<smbconfoption><name>force security mode</name><value>0</value></smbconfoption>
			<smbconfoption><name>directory security mask</name><value>0777</value></smbconfoption>
			<smbconfoption><name>force directory security mode</name><value>0</value></smbconfoption>
		</smbconfblock>
	</sect2>

	<sect2>
		<title>Wechselwirkung mit den Standard Samba Dateiattribut-Vergaben</title>

		<note>
		<para>Samba vergibt einige der DOS Attributebits (wie z.B. <quote>Nur lesen</quote>) 
		in den UNIX Berechtigungen einer Datei. Dies bedeutet, dass es einen
		Konflikt zwischen den Berechtigungsbits, die durch den Sicherheitsdialog gesetzt wurden
		geben kann und den Berechtigungen, die durch die Vergabe von Dateiattributen gesetzt wurden.
		</para>
		</note>

		<para>Falls eine Datei für den Eigentümer keinen UNIX Lesezugriff hat wird diese
		als <quote>Nur lesen</quote> in dem Standarddialog der Registerkarte Dateiattribute angezeigt.
		Leider ist dieser Dialog derselbe, der die Sicherheitsinformationen in einer anderen Registerkarte
		enthält.
		</para>

		<para>Was dies heissen kann ist, dass der Eigentümer glaubt die Berechtigungen so ändern zu können, 
		dadurch dass es ihm erlaubt wird Lesezugriff durch Nutzung des Sicherheitsdialoges zu bekommen; er klickt
		auf <guibutton>OK</guibutton> um zurück zu der Registerkarte mit den Standardattributen zu gelangen,
		klickt auf <guibutton>OK</guibutton> in diesem Dialog und NT setzt die Dateiberechtigungen zurück
		auf Nur-lesen (weil dies die Attribute in diesem Dialog ihm sagen). Dies bedeutet, dass nach Setzen
		der Berechtigungen und Klicken auf <guibutton>OK</guibutton> zum Zurückgehen auf den Attributedialog
		Sie immer <guibutton>Abbrechen</guibutton> statt <guibutton>OK</guibutton> drücken sollten, um sicherzustellen,
		dass Ihre Änderungen nicht überschrieben werden.</para>
	</sect2>
</sect1>

<sect1>
<title>Allgemeine Fehler</title>

<para>
Datei-, Verzeichnis- und Freigabezugriffsprobleme sind häufig auf der Mailingliste. Die folgenden Beispiele wurden
in letzter Zeit von der Maillingliste genommen.
</para>


	<sect2>
	<title>Benutzer können nicht auf eine öffentliche Freigabe schreiben</title>

	<para>
	<quote>
	Wir haben einige Schwierigkeiten mit Datei/Verzeichnis-Berechtigungen. Ich kann mich als Admin-User (root) an
	einer Domäne anmelden und es gibt eine öffentliche Freigabe auf welcher jeder die Berechtigung zum Erzeugen und 
	Ändern von Dateien haben sollte, aber nur root kann Dateien ändern, sonst niemand. Wir müssen dauernd auf dem
	Server <userinput>chgrp -R users *</userinput> und <userinput>chown -R nobody *</userinput> eingeben um den
	anderen Benutzern das Ändern von Dateien zu erlauben.
	</quote>
	</para>

	<para>
	Es gibt viele Wege dieses Problem zu lösen und hier sind ein paar Hinweise:
	</para>

	<procedure>
		<step>
			<para>
			Gehen Sie auf die oberste Ebene des Verzeichnisses, welches freigegeben ist.
			</para>
		</step>

		<step>
			<para>
			Setzen Sie die Benutzer und Gruppe als Eigentümer auf was immer auch öffentlich sein soll 
			<screen>
&prompt;find 'directory_name' -type d -exec chown user.group {}\;
&prompt;find 'directory_name' -type d -exec chmod 6775 'directory_name'
&prompt;find 'directory_name' -type f -exec chmod 0775 {} \;
&prompt;find 'directory_name' -type f -exec chown user.group {}\;
</screen>
			</para>

			<note><para>
			Das oben aufgeführte setzt das <constant>sticky bit</constant> auf alle Verzeichnisse.
			Lesen Sie in Ihren UNIX/Linux manpages nach, was dies bewirkt. Es veranlasst das Betriebssystem
			auf alle Dateien in Ihren Verzeichnissen den Eigentümer des Verzeichnisses zu setzen.
			</para></note>
		</step>
		<step>
			<para>

			Verzeichnis heisst: <replaceable>/foodbar</replaceable>
<screen>
&prompt;<userinput>chown jack.engr /foodbar</userinput>
</screen>
			</para>

			<note><para>
				<para>Dies ist genauso wie:</para>
<screen>
&prompt;<userinput>chown jack /foodbar</userinput>
&prompt;<userinput>chgrp engr /foodbar</userinput>
</screen>
			</para></note>
		</step>
		<step>
			<para>Geben Sie jetzt ein:

<screen>
&prompt;<userinput>chmod 6775 /foodbar</userinput>
&prompt;<userinput>ls -al /foodbar/..</userinput>
</screen>

			</para>

			<para>Dann sollten Sie dies sehen:
<screen>
drwsrwsr-x  2 jack  engr    48 2003-02-04 09:55 foodbar
</screen>
			</para>
		</step>
		<step>

		<para>Geben Sie jetzt dies ein:
<screen>
&prompt;<userinput>su - jill</userinput>
&prompt;<userinput>cd /foodbar</userinput>
&prompt;<userinput>touch Afile</userinput>
&prompt;<userinput>ls -al</userinput>
</screen>
		</para>

		<para>
		Sie sollten nun sehen, dass die Datei <filename>Afile</filename> erzeugt durch Jill die Eigentumsrechte
		und Berechtigungen von Jack hat, so wie hier:
<screen>
-rw-r--r--  1 jack  engr     0 2003-02-04 09:57 Afile
</screen>
		</para>
		</step>

		<step>
		<para>
		Fügen Sie jetzt in Ihrer &smb.conf; für die Freigabe dies ein:
		<smbconfblock>
<smbconfoption><name>force create mode</name><value>0775</value></smbconfoption>
<smbconfoption><name>force directory mode</name><value>6775</value></smbconfoption>
		</smbconfblock>
		</para>

		<note><para>
		Diese Massnahmen werden nur dann gebraucht, wenn Ihre Benutzer nicht Mitglied der Gruppe sind, die
		Sie benutzt haben. Das ist dann der Fall, wenn Sie innerhalb des Betriebssystems keine Schreibberechtigung
		auf das Verzeichnis haben.
		</para>
		</note>

		<para>
		Eine Alternative ist es, in der &smb.conf; diesen Eintrag für die Freigabe zu setzen:
		<smbconfblock>
<smbconfoption><name>force user</name><value>jack</value></smbconfoption>
<smbconfoption><name>force group</name><value>engr</value></smbconfoption>
		</smbconfblock>
		</para>
	</step>
	</procedure>
	</sect2>


	<sect2>
		<title>Dateioperationen, die als <emphasis>root</emphasis> mit <emphasis>force user</emphasis> gemacht wurden</title>

		<para>
		Wenn Sie einen Benutzer in <smbconfoption><name>admin users</name></smbconfoption> haben wird Samba für 
		diesen Benutzer Dateioperationen immer als <emphasis>root</emphasis> ausführen, sogar wenn 
		<smbconfoption><name>force user</name></smbconfoption> gesetzt wurde.
		</para>
	</sect2>

	<sect2>
		<title>MS Word mit Samba ändert den Eigentümer einer Datei</title>

		<para>
		<emphasis>Frage:</emphasis> <quote>Wenn Benutzer B ein Worddokument abspeichert welches Benutzer A
		gehört, ist anschliessend der Eigentümer der aktualisierten Datei Benutzer B.
		Warum macht Samba dies ? Wie kann ich das beheben ?</quote>
		</para>

		<para>
		<emphasis>Antwort:</emphasis>Word macht das folgende, wenn Sie ein Worddokument ändern: MS Word erzeugt
		ein NEUES Dokument mit einem temporären Namen, Word schliesst dann das alte Dokument und löscht es, dann
		benennt Word das neue Dokument mit dem Original-Dateinamen um.
		Es gibt keinen Mechanismus von dem Samba in irgendeiner Weise wissen kann, dass das neue Dokument wirklich
		vom Eigentümer der Originaldatei stammen kann. Samba hat keine Möglichkeit zu erfahren, dass MS Word die
		Datei umbenannt hat. Samba ist nur soweit in der Lage zu sagen, dass die Datei, die erzeugt wurde eine NEUE
		Datei ist, aber nicht, dass die Applikation (Word) dies aktualisiert hat.
		</para>

		<para>
		Es gibt einen Workaround um diese Berechtigungsprobleme zu lösen. Dieser Workaround setzt voraus, dass Sie
		verstehen, wie Sie das Verhalten des Dateisystems innerhalb der &smb.conf; Datei steuern können, sowie
		das Verständnis wie ein UNIX Dateisystem funktioniert. Setzen Sie auf das Verzeichnis in welchem Sie
		Word Dokumente ändern möchten: <command>chmod g+s `directory_name'</command> 
		Dies stellt sicher, dass alle Dateien mit der Gruppe erzeugt werden, der das Verzeichnis gehört.
		In dem Abschnitt in der &smb.conf;, der die Freigabe deklariert setzen Sie:
		</para>

		<para>
		<smbconfblock>
                <smbconfoption><name>force create mode</name><value>0660</value></smbconfoption>
                <smbconfoption><name>force directory mode</name><value>0770</value></smbconfoption>
		</smbconfblock>
		</para>

		<para>
		Diese beiden Einstellungen stellen sicher, dass alle Verzeichnisse und Dateien die in der Freigabe
		erzeugt werden, les- und schreibbar durch den Eigentümer und die Gruppe sind, die auf das Verzeichnis 
		selbst gesetzt sind.
		</para>

	</sect2>

</sect1>

</chapter>

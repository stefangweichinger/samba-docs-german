<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="locking">
<chapterinfo>
	&author.jeremy;
	&author.jelmer;
	&author.jht;
	&author.eroseme;
	<author>&person.luft;<contrib>Deutsche Übersetzung</contrib></author>
	<author>&person.sgw;<contrib>Deutsche Übersetzung</contrib></author>
</chapterinfo>
<title>Datei- und Satzsperren</title>

<para>
Ein Bereich, der vielen Netzwerkadministratoren Probleme verursacht, sind Sperren.
Das Ausmaß des Problems ist bereits durch Recherchen über das Internet bewiesen.
</para>

<sect1>
<title>Eigenschaften und Vorzüge</title>

<para>
Samba bietet alle Sperrsemantiken, die MS Windows-Clients erwarten und
die MS Windows NT/200x-Server auch zur Verfügung stellen.
</para>

<para>
Der Ausdruck <emphasis>Sperren</emphasis>
(entsprechend dem etwas treffenderen englischen Begriff <emphasis>Locking</emphasis>, Anm. d. Übers.)
hat grundsätzlich eine weite Bedeutung und
deckt eine Vielzahl von Funktionen ab, die alle unter diesem einen Begriff zusammengefasst sind.
</para>

<para>
Opportunistisches Sperren ist ein wünschenswertes Feature, wenn es die wahrnehmbare Geschwindigkeit von
Anwendungen auf einem Netzwerkclient beschleunigen kann. Jedoch ist das opportunistische Sperrprotokoll
nicht robust, und deshalb können Probleme entstehen, wenn es von einer einfachen Konfiguration
oder in einem sehr langsamen oder fehlerhaften Netzwerk aufgerufen wird.
In diesen Fällen können der Aufwand für die Verwaltung der opportunistischen Sperren, die vom
Betriebssystem durchgeführt wird, und der Aufwand für das Wiederherstellen nach Fehlern den erzielten Performance-Zuwachs
wieder zunichte machen.
</para>

<para>
Der MS Windows-Netzwerkadministrator muss sich darüber im Klaren sein, dass Datei- und Satzsperren-Semantiken (Verhalten) entweder in Samba kontrolliert werden können oder durch Registry-Einstellungen
auf einem MS Windows-Client.
</para>

<note>
<para>
Manchmal ist es sogar notwendig, Einstellungen zu Sperrkontrollen sowohl auf dem Samba-Server
als auch auf dem MS Windows-Client abzuschalten!
</para>
</note>

</sect1>

<sect1>
<title>Erörterung</title>

<para>
Es gibt zwei Arten von Sperren, die durch einen SMB-Server durchgeführt werden müssen.
Die erste ist die <emphasis>Satzsperre</emphasis>, die einem Client das Sperren eines
Bereichs von Bytes innerhalb einer geöffneten Datei erlaubt. Die zweite sind die
<emphasis>Verbotszustände (deny modes)</emphasis>, die spezifiziert werden, wenn eine Datei
geöffnet ist.
</para>

<para>
Satzsperren-Semantiken unter UNIX sind etwas vollkommen anderes als Satzsperren unter
Windows. Samba-Versionen vor 2.2 hatten versucht, den nativen UNIX-Systemaufruf fcntl()
zu nutzen, um saubere Satzsperren zwischen den verschiedenen Samba-Clients zu implementieren.
Dies kann allerdings aus mehreren Gründen nicht vollständig richtig sein. Der einfachste Grund ist die
Tatsache, dass ein Windows-Client einen Byte-Bereich von bis zu 2^32 oder 2^64 (je nach Client-Betriebssystem) sperren darf. Die UNIX-Sperren unterstützen nur einen
Byte-Bereich bis zu 2^31.
So ist es nicht möglich, eine Sperranfrage oberhalb von 2^31 sauber zu ermöglichen. Es gibt noch
wesentlich mehr Unterschiede, zu viele, um hier alle aufzuführen.
</para>

<para>
Samba 2.2 und jüngere Versionen implementieren Satzsperren völlig unabhängig vom darunterliegenden
UNIX-System. Wenn eine Byte-Bereichssperre, die ein Client anfordert, in den Bereich von 0-2^31
fällt, gibt Samba diese Anfrage an das UNIX-System weiter. Alle anderen Sperren können von UNIX
jedoch nicht gesehen werden.
</para>

<para>
Vereinfacht ausgedrückt, sollte ein SMB-Server vor jedem Lese- und Schreibzugriff auf eine Datei
nach Sperren suchen. Leider kann dies durch die Art und Weise, wie fcntl() arbeitet, langsam sein
und den <command>rpc.lockd</command> überbeanspruchen. Dies ist fast immer unnötig, da von den Clients erwartet
wird, dass sie unabhängig Sperr-Aufrufe vor Lese- und Schreibzugriffen absetzen, wenn das Sperren für sie
wichtig ist. In der Voreinstellung setzt Samba nur dann Sperr-Aufrufe, wenn es explizit von einem Client
danach gefragt wird; aber wenn Sie die Option
<smbconfoption><name>strict locking</name><value>yes</value></smbconfoption> setzen, wird es diese Aufrufe
bei <emphasis>jedem</emphasis> Lese- und Schreibzugriff ausführen.
</para>

<para>
Sie können das Sperren von Byte-Bereichen auch komplett abschalten, indem Sie
<smbconfoption><name>locking</name><value>no</value></smbconfoption> setzen.
Das ist hilfreich für jene Freigaben, die die Sperren nicht unterstützen oder sie nicht brauchen (wie CD-ROMs).
In diesem Fall bildet Samba die Antwort-Codes von Sperr-Aufrufen nach, um den Clients mitzuteilen, dass alles
in Ordnung ist.
</para>

<para>
Die zweite Klasse der Sperren sind die so genannten <emphasis>deny modes</emphasis>. Diese werden von einer
Applikation gesetzt, wenn diese eine Datei öffnet, um zu bestimmen, welche Zugriffsarten gleichzeitig mit
dieser Öffnung zu erlauben sind. Ein Client könnte nach
<constant>DENY_NONE</constant>, <constant>DENY_READ</constant>,
<constant>DENY_WRITE</constant> oder <constant>DENY_ALL</constant> fragen.
Es gibt auch spezielle Kompatibilitätsmodi namens <constant>DENY_FCB</constant>
und <constant>DENY_DOS</constant>.
</para>

<sect2>
<title>Überblick über opportunistische Sperren</title>

<para>
Das opportunistische Sperren, auch bezeichnet als <quote>Oplocks</quote>
(entspricht <quote>Opportunistic locking</quote>) wird vom Windows-Dateisystem über Registrierungseinträge
aufgerufen (im Gegensatz zu einer API), um die Netzwerk-Performance zu erhöhen, wenn auf eine Datei auf einem
Server zugegriffen wird. Die Performance wird durch lokales Puffern der Datei auf dem Client erhöht, was
Folgendes erlaubt:
</para>

<variablelist>
	<varlistentry><term>Read-ahead:</term>
		<listitem><para>
		Der Client liest die lokale Kopie der Datei, dadurch wird die Netzwerk-Latenz eliminiert.
		</para></listitem>
	</varlistentry>

	<varlistentry><term>Write caching:</term>
		<listitem><para>
		Der Client schreibt in die lokale Kopie der Datei, dadurch wird die Netzwerk-Latenz eliminiert.	
		</para></listitem>
	</varlistentry>

        <varlistentry><term>Lock caching:</term>
        <listitem><para>
		Der Client puffert die Sperren der Anwendung lokal, und wieder wird die Netzwerk-Latenz eliminiert.
		</para></listitem>
        </varlistentry>
</variablelist>

<para>
Die Performance-Steigerung von Oplocks kommt von der Möglichkeit des exklusiven Zugriffs auf die Datei &smbmdash;
sogar wenn sie über <constant>DENY_NONE</constant> geöffnet ist &smbmdash;, da Windows den Status der Datei
auf konkurrierende Zugriffe von anderen Prozessen überwacht.
</para>

<variablelist>
<title>Windows definiert vier Arten von Oplocks:</title>

	<varlistentry><term>Level1 Oplock</term>
                <listitem><para>
		Der Redirektor sieht, dass die Datei mit DENY_NONE geöffnet wurde (was konkurrierende
		Zugriffe erlaubt), prüft, ob auch kein anderer Prozess auf die Datei zugreift, und prüft, dass
		Oplocks aktiviert sind. Dann gewährt er DENY_ALL/R+W/Exklusiv-Zugriff auf die Datei. Der
		Client führt seine Operationen nun auf die gepufferte Datei durch.
		</para>

		<para>
		Wenn ein zweiter Prozess nun versucht, die Datei zu öffnen, wird das Öffnen verzögert, während
		der Redirektor den originalen Oplock <quote>aufbricht</quote>. Dieser Bruch des Oplocks
		signalisiert dem puffernden Client, die gepufferte Datei zurück auf den Server zu schreiben,
		die lokalen Sperren zu löschen und die Read-ahead-Daten zu verwerfen. Der Bruch ist dann
		komplett, die verzögerte Öffnung wird gewährt, und mehrere Prozesse können konkurrierenden
		Dateizugriff genießen, wie er von den Byte-Bereichs- oder den zwingenden Sperren diktiert wird.
		Wenn jedoch der originale öffnende Prozess die Datei in einem anderen Modus als DENY_NONE
		geöffnet hat, wird dem zweiten Prozess nur eingeschränkter oder gar kein Zugriff gewährt,
		trotz des Bruchs des Oplocks.
                </para></listitem>
        </varlistentry>

        <varlistentry><term>Level2 Oplock</term>
                <listitem><para>
		Arbeitet wie ein Level1 Oplock, außer dass nur Lesezugriffe gepuffert werden. Alle anderen
		Operationen werden auf der Server-Kopie der Datei durchgeführt.		
                </para></listitem>
        </varlistentry>

        <varlistentry><term>Filter Oplock</term>
                <listitem><para>
		Erlaubt keinen Schreib- oder Löschzugriff auf Dateien.		
                </para></listitem>
        </varlistentry>

        <varlistentry><term>Batch Oplock</term>
                <listitem><para>
		Manipuliert das Öffnen und Schließen von Dateien und erlaubt das Puffern von Dateiattributen.
                </para></listitem>
        </varlistentry>
</variablelist>

<para>
Ein wichtiges Detail ist, dass Oplocks vom Dateisystem aufgerufen werden, nicht von einer Anwendungs-API. Daher
kann eine Applikation eine opportunistisch gesperrte Datei schließen, aber das Dateisystem gibt den Oplock
nicht auf. Wenn der Bruch des Oplocks durchgeführt wird, schließt das Dateisystem einfach die Datei in
Vorbereitung auf das folgende Öffnen der Datei durch den zweiten Prozess.
</para>

<para>
<emphasis>Opportunistisches Sperren</emphasis> ist eigentlich ein unpassender Name für dieses Feature.
Der wirkliche Nutzen dieses Features ist das Puffern von Daten (<quote>Cachen</quote>) auf Client-Seite,
und die Oplocks sind nur
ein Mitteilungsmechanismus für das Zurückschreiben von Daten auf die Platte des Netzwerk-Servers. Die
Einschränkung der Oplocks ist die Zuverlässigkeit des Mechanismus, einen Oplock-Bruch (Mitteilung) zwischen
dem Server und dem puffernden Client auszuführen. Wenn dieser Austausch fehlerhaft abläuft (üblicherweise
wegen eines Timeouts aus irgendwelchen Gründen), dann geht der Nutzen des client-seitigen Pufferns verloren.
</para>

<para>
Die tatsächliche Entscheidung, die ein Anwender oder Administrator erwägen sollte, ist, ob es vernünftig ist,
 unter mehreren Anwendern Daten zu teilen, die lokal auf den Clients gepuffert werden. In vielen Fällen ist
die Antwort <quote>Nein</quote>. Zu entscheiden, wann Daten gepuffert werden und wann nicht, das ist hier
die Frage, und daher sollte <quote>opportunistisches Sperren</quote> als Schalter für client-seitiges Puffern
behandelt werden. Schalten Sie es <quote>on</quote>, wenn client-seitiges Puffern erwünscht und zuverlässig ist.
Schalten Sie es <quote>off</quote>, wenn client-seitiges Puffern redundant, unzuverlässig oder kontraproduktiv
ist.
</para>

<para>
Opportunistisches Sperren wird von Samba standardmäßig für alle Freigaben auf <quote>on</quote> gesetzt,
also sollten Sie in jedem Fall vorsichtig vorgehen, um zu bestimmen, ob der potenzielle Nutzen die
potenziellen Verzögerungen wert ist. Die folgenden Empfehlungen sollen Ihnen dabei helfen, eine Umgebung zu
charakterisieren, in der opportunistische Sperren effektiv eingerichtet werden können.
</para>

<para>
Die Windows-Oplocks sind ein leichtgewichtiges performance-steigerndes Feature. Sie sind kein robustes
und zuverlässiges Protokoll. Jede Implementierung von Oplocks sollte als Kompromiss zwischen Performance und
Zuverlässigkeit geprüft werden. Die Zuverlässigkeit sinkt mit jeder oben genannten Regel, die nicht erzwungen
wird. Stellen Sie sich einen Hochverfügbarkeits-Server auf einem Atoll im Südpazifik vor, der über ein WAN
eine <quote>mission-critical</quote> Multi-User-Firmen-Datenbank bereitstellt, und das auf einer
Freigabe mit aktivierten Oplocks, während eines tropischen Sturms.
Diese Konfiguration wird sehr wahrscheinlich Probleme mit Oplocks erfahren.
</para>

<para>
Oplocks können sehr wirksam die Client-Performance steigern, wenn sie als Konfigurationsschalter
für client-seitiges Daten-Puffern behandelt werden. Wenn das Puffern der Daten wahrscheinlich unterbrochen
werden könnte, sollte der Einsatz von Oplocks nochmals überdacht werden. Samba aktiviert standardmäßig die
Verwendung von Oplocks auf allen Freigaben. Die client-seitige Verwendung von Daten auf dem Server,
die Zuverlässigkeit des Servers im Netzwerk und die Oplock-Konfiguration jeder Freigabe sollten
mit besonderer Aufmerksamkeit bedacht und konfiguriert werden. In Hochverfügbarkeitsumgebungen hat die
Integrität der Daten oft hohe Priorität. Komplexe und teure Konfigurationen werden implementiert, um zu
gewährleisten, dass sofort ein Ersatz verfügbar ist, wenn ein Client die Verbindung zum Dateiserver verliert, damit die durchgehende Verfügbarkeit der Daten gewährleistet ist.
</para>

<para>
Das Verhalten von Windows-Clients bei Ausfällen birgt ein höheres Risiko von Anwendungsunterbrechungen als
das Verhalten anderer Plattformen, da es von einer aufgebauten TCP-Transport-Verbindung abhängt. Wenn die Verbindung
unterbrochen wird
&smbmdash; wie bei einem Datei-Server-Ausfall und dessen Ersatz durch einen Failover-Server &smbmdash;,
muss eine neue Verbindung aufgebaut werden. Es ist selten, dass eine Windows-Client-Applikation so programmiert
ist, dass sie sich korrekt von einer unterbrochenen Transport-Verbindung erholt. Daher werden die meisten
Applikationen in irgendeiner Art unterbrochen &smbmdash; im schlimmsten Fall abgebrochen, und erfordern
einen Neustart.
</para>

<para>
Wenn eine Client-Session Schreib- und Lese-Vorgänge mit Oplocks lokal gepuffert hat, ist es wahrscheinlich,
dass die Daten verloren gehen, wenn die Applikation neu startet oder sich nach der TCP-Unterbrechung wieder
verbindet. Wenn die TCP-Verbindung ausfällt, ist der Status des Clients verloren. Wenn der Server die
Verbindung wiederherstellt, wird keine Aufforderung zum Brechen des Oplocks an den Client gesandt. In diesem
Fall ist die Arbeit aus der vorangegangenen Session verloren. Durch Echtzeit-Überwachung dieses Szenarios mit
deaktivierten Oplocks und des Clients, der Daten auf den Datei-Server schreibt, wird die
Ausfallsicherung die Daten auf der Platte so bewahren, wie sie zum Zeitpunkt des Verbindungsabbruchs existiert
haben.
</para>

<para>
In <quote>mission-critical</quote> Hochverfügbarkeitsumgebungen sollte große Vorsicht im Umgang mit
Oplocks geübt werden. Idealerweise sollten umfassende Tests mit allen betroffenen Applikationen erfolgen, sowohl
mit als auch ohne aktivierte Oplocks.
</para>

<sect3>
<title>Exklusive Freigaben</title>

<para>
Opportunistische Sperren sind am effektivsten, wenn sie auf Freigaben beschränkt sind, auf die ausschließlich
ein einzelner Anwender zugreift oder nur ein Anwender gleichzeitig. Da der eigentliche
Wert der Oplocks das client-seitige Puffern von Daten ist, verursacht jede Operation, die den Puffer-Mechanismus
unterbricht, eine Verzögerung.
</para>

<para>
Home-Verzeichnisse sind die offensichtlichsten Beispiele für das sichere Realisieren von Performanc-Steigerungen
mit Oplocks.
</para>

</sect3>

<sect3>
<title>Freigaben oder Dateien, auf die von mehreren Usern zugegriffen wird</title>

<para>
Mit jedem weiteren Anwender, der auf eine Datei auf einer Freigabe mit aktiven Oplocks zugreift, erhöht sich
das Potenzial für Verzögerungen und eine daraus resultierende Performance-Verschlechterung. Wenn mehrere Anwender
auf eine Datei auf einer Freigabe mit aktiven Oplocks zugreifen, übersteigt der Verwaltungsaufwand für das
Senden und Empfangen der Oplock-Breaks und die resultierende Latenz, während die anderen Clients auf den
momentan puffernden Client warten (bis er seine Puffer geleert hat), den Performance-Gewinn des
puffernden Clients.
</para>

<para>
Mit jedem weiteren Client, der auf eine Datei mit gesetzten Oplocks zugreift, wird der potenzielle
Performance-Zuwachs negiert, und es ergibt sich eventuell sogar ein Flaschenhals.
</para>

</sect3>

<sect3>
<title>Dateien, auf die von UNIX- oder NFS-Clients aus zugegriffen wird</title>

<para>
Lokale UNIX- oder NFS-Clients greifen ohne einen zwingenden Datei-Sperren-Mechanismus auf Dateien zu.
Daher sind diese Client-Plattformen nicht imstande, vom Server aus einen Oplock-Bruch am Client zu erfragen, der
gerade eine Datei puffert. Ein lokaler UNIX- oder NFS-Dateizugriff kann daher in eine Datei schreiben, die von einem
Windows-Client gepuffert wurde, was diese Datei sehr wahrscheinlich unbrauchbar macht.
</para>

<para>
Wenn Dateien sowohl an Windows-Clients als auch an lokale UNIX- oder NFS-Benutzer freigegeben werden, sollten
Sie das opportunistische Sperren abschalten.
</para>

</sect3>

<sect3>
<title>Langsame und/oder unzuverlässige Netzwerke</title>

<para>
Der größtmögliche Performance-Gewinn für Oplocks wird dann erzielt, wenn das client-seitige Puffern der
Lese- und Schreib-Vorgänge den größten Unterschied zum Senden dieser Vorgänge über das Netzwerk liefert.
Dies passiert am wahrscheinlichsten dann, wenn das Netzwerk extrem langsam, verstopft oder weit
verteilt (wie in einem WAN) ist. Die Netzwerk-Latenz hat jedoch auch einen großen Einfluss auf die Zuverlässigkeit
des Oplock-Bruch-Mechanismus und erhöht daher die Wahrscheinlichkeit, Oplock-Probleme zu bekommen, die die
potenziellen Performance-Gewinne mehr als zunichte machen. Wenn natürlich niemals ein Oplock-Bruch gesendet
werden müsste, wäre dies das vorteilhafteste Szenario, um Oplocks einzusetzen.
</para>

<para>
Wenn das Netzwerk langsam, unzuverlässig oder ein WAN ist, sollten Sie keine Oplocks konfigurieren, falls irgendeine
Möglichkeit besteht, dass mehrere Benutzer regelmäßig dieselbe Datei öffnen.
</para>

</sect3>

<sect3>
<title>Mehrbenutzer-Datenbanken</title>

<para>
Mehrbenutzer-Datenbanken stellen klarerweise durch ihre grundlegende Natur ein Risiko dar &smbmdash;
auf sie wird üblicherweise massiv von vielen Anwendern in zufälligen Intervallen zugegriffen. Das Platzieren
einer Mehrbenutzer-Datenbank auf einer Freigabe mit aktivierten Oplocks wird wahrscheinlich zu einem Flaschenhals
auf dem Samba-Server führen, weil die Sperren verwaltet werden müssen. Egal, ob eine Datenbank eine
Eigenentwicklung ist oder ein kommerzielles Produkt, stellen Sie sicher, dass die entsprechende Freigabe
deaktivierte Oplocks hat.
</para>

</sect3>

<sect3>
<title>PDM-Daten-Freigaben</title>

<para>
Process Data Management-(PDM-)Applikationen wie IMAN, Enovia und Clearcase finden immer mehr Verwendung mit
Windows-Client-Plattformen und daher auch mit SMB-Daten-Servern. PDM-Applikationen verwalten
Mehrbenutzer-Umgebungen für die Sicherheit von und den Zugriff auf kritische Daten. Die typische PDM-Umgebung ist
üblicherweise mit ausgeklügelt entworfenen Client-Anwendungen verbunden, die Daten bei Bedarf lokal laden. Zusätzlich überwacht die PDM-Applikation üblicherweise den Daten-Status jeden Clients. In diesem
Fall wird das client-seitige Puffern am besten der lokalen Applikation und dem PDM-Server überlassen. Es ist
angemessen, das Client-OS von jeglichen Puffer-Aufgaben zu befreien, und auch den Server von der Verwaltung
der Oplocks, indem man Oplocks auf der Freigabe deaktiviert.
</para>

</sect3>

<sect3>
<title>Vorsicht vor Force User</title>

<para>
Samba enthält einen Parameter in &smb.conf; namens
<smbconfoption><name>force user</name></smbconfoption>, der den Benutzer, der auf eine Freigabe zugreift, vom
tatsächlich zugreifenden Benutzer auf den in diesem Parameter angegebenen ändert. Wenn Oplocks auf einer
Freigabe aktiviert sind, verursacht die Änderung des Benutzers, dass ein Bruch des Oplocks an den Client
gesendet wird, sogar wenn der Benutzer gar nicht explizit eine Datei geladen hat. In den Fällen, wo das Netzwerk
langsam oder unzuverlässig ist, kann ein Oplock-Bruch verloren gehen, ohne dass der Benutzer auch nur auf eine
Datei zugreift. Das kann sichtbare Performance-Einbrüche verursachen, wenn der Client wiederholt neu verbindet,
um den verlorenen Oplock-Bruch <quote>zu überwinden</quote>.
</para>

<para>
Vermeiden Sie die folgende Kombination:
</para>

<itemizedlist>
	<listitem><para>
	<smbconfoption><name>force user</name></smbconfoption> in der &smb.conf;-Freigaben-Konfiguration
	</para></listitem>

	<listitem><para>
	Langsames oder unzuverlässiges Netzwerk
	</para></listitem>

	<listitem><para>
	Opportunistisches Sperren aktiviert
	</para></listitem>
</itemizedlist>

</sect3>

<sect3>
<title>Erweiterte Samba-Oplock-Parameter</title>

<para>
Samba bietet Oplock-Parameter, die es dem Administrator erlauben, verschiedene Eigenschaften des
Oplock-Mechanismus an Timing- und Benutzungs-Level anzupassen. Diese Parameter bieten hohe Flexibilität, um
Oplocks in Umgebungen zu implementieren, wo sie sehr wahrscheinlich Probleme verursachen würden.
Die Parameter sind:
<smbconfoption><name>oplock break wait time</name></smbconfoption> und
<smbconfoption><name>oplock contention limit</name></smbconfoption>.
</para>

<para>
Falls diese Parameter benötigt werden, ist es für die meisten Anwender, Administratoren und Umgebungen die
bessere Wahl, die Oplocks einfach abzuschalten. Der Samba-SWAT-Hilfetext für diese beiden Parameter sagt:
<quote>Do not change
this parameter unless you have read and understood the Samba oplock code.</quote>
Dies ist ein guter Rat.
</para>

</sect3>

<sect3>
<title>Missionskritische Hochverfügbarkeit</title>

<para>
In Hochverfügbarkeitsumgebungen ist die
Integrität der Daten oft von hoher Priorität. Komplexe und teure Konfigurationen werden implementiert, um zu
gewährleisten, dass sofort ein Ersatz verfügbar ist, wenn ein Client die Verbindung zum Dateiserver verliert,
damit eine durchgehende Verfügbarkeit der Daten gewährleistet ist.
</para>

<para>
Das Verhalten von Windows-Clients bei Ausfällen birgt ein höheres Risiko von Anwendungsunterbrechungen als
andere Plattformen, da es von einer aufgebauten TCP-Transport-Verbindung abhängt. Wenn die Verbindung
unterbrochen wird
&smbmdash; wie bei einem Datei-Server-Ausfall und dessen Ersatz durch einen Failover-Server &smbmdash;
muss eine neue Verbindung aufgebaut werden. Es ist selten, dass eine Windows-Client-Applikation so programmiert
ist, dass sie sich korrekt von einer unterbrochenen Transport-Verbindung erholt. Daher werden die meisten
Applikationen in irgendeiner Art unterbrochen &smbmdash; im schlimmsten Fall abgebrochen &smbmdash; und erfordern
einen Neustart.
</para>

<para>
Wenn eine Client-Session Schreib- und Lese-Vorgänge mit Oplocks lokal gepuffert hat, ist es wahrscheinlich,
dass die Daten verloren gehen, wenn die Applikation neu startet oder sich nach der TCP-Unterbrechung wieder
verbindet. Wenn die TCP-Verbindung ausfällt, ist der Status des Clients verloren. Wenn der Server die
Verbindung wiederherstellt, wird keine Aufforderung zum Brechen des Oplocks an den Client gesandt. In diesem
Fall ist die Arbeit aus der vorangegangenen Session verloren. Durch die Echtzeit-Überwachung dieses Szenarios mit
deaktivierten Oplocks und des Clients, der Daten auf den Datei-Server schreibt, wird die
Ausfallsicherung die Daten auf der Platte so bewahren, wie sie zum Zeitpunkt des Verbindungsabbruchs existiert
haben.
</para>

<para>
In <quote>mission-critical</quote> Hochverfügbarkeitsumgebungen sollte große Vorsicht im Umgang mit
Oplocks geübt werden. Idealerweise sollten umfassende Tests mit allen betroffenen Applikationen erfolgen, sowohl
mit als auch ohne aktivierte Oplocks.
</para>

</sect3>
</sect2>
</sect1>

<sect1>
<title>Samba-Oplock-Kontrolle</title>

<para>
Oplocks sind ein einzigartiges Datei-Sperr-Feature von Windows. Sie sind keine richtigen Dateisperren, werden
aber in die meisten Diskussionen über Windows-Dateisperren miteinbezogen, also de facto als Sperr-Feature
betrachtet. Oplocks sind tatsächlich ein Teil des Windows-Client-Datei-Caching-Mechanismus. Sie sind kein speziell
robustes oder zuverlässiges Feature, wenn sie in der Vielzahl von angepassten Netzwerken implementiert werden,
die es in Unternehmensumgebungen gibt.
</para>

<para>
Wie Windows implementiert Samba Oplocks als eine server-seitige Komponente des client-seitigen Cache-Mechanismus.
Wegen des leichtgewichtigen Entwurfs des Windows-Features muss man für die effektive Konfiguration von Oplocks
 ihre Einschränkungen genau kennen und dieses Wissen beim Konfigurieren
des Datenzugriffs für jeden einzelnen Zustand von Netzwerk- und Client-Verwendung auch anwenden.
</para>

<para>
Opportunistisches Sperren bedeutet grundsätzlich, dass es dem Client erlaubt wird, eine Datei herunterzuladen und
sie lokal auf seiner Platte zu puffern, während er Veränderungen daran vornimmt; wenn ein zweiter Client auf
die Datei zugreifen will, erhält der erste Client ein Signal zum Bruch des Oplocks und muss die Datei wieder
zurück auf den Server synchronisieren. Dies kann in einigen Fällen deutliche Performance-Steigerungen
verursachen; manche Programme bestehen nur für
eine einzelne Veränderung auf der Synchronisation der gesamten Datei mit dem Server.
</para>

<para>
Level1 Oplocks (auch bekannt als einfache <quote>Oplocks</quote>) sind ein anderer Begriff für
das opportunistische Sperren.
</para>

<para>
Level2 Oplocks bieten opportunistisches Sperren für eine Datei, die als <emphasis>read only</emphasis>
behandelt wird. Dies wird typischerweise für Dateien verwendet, die read-only sind, oder für Dateien, bei denen 
beim Öffnen keine Absicht besteht, darauf zu schreiben.
</para>

<para>
Kernel-Oplocks sind grundsätzlich eine Methode, die es dem Linux-Kernel erlaubt, mit Sambas opportunistisch
gesperrten Dateien zu koexistieren, obwohl dies eine bessere Integration von MS-Windows-Netzwerk-Dateisperren
mit dem darunterliegenden Betriebssystem gebracht hat; SGI IRIX und Linux sind derzeit die einzigen
oplock-fähigen Betriebssysteme.
</para>

<para>
Sie sollten Oplocks deaktivieren, wenn Sie auf dieselben
Dateien sowohl von UNIX/Linux- als auch von SMB-Clients aus zugreifen, außer wenn Ihr System Kernel-Oplocks unterstützt.
Unabhängig davon sollten Oplocks immer deaktiviert sein, wenn Sie eine Datenbank-Datei (z.B.
Microsoft Access) für mehrere Clients freigeben, da jeder Oplock-Bruch, den der erste Client empfängt, die
Synchronisation der gesamten Datei bewirkt (nicht nur des einzelnen Eintrags), was in einer merklichen
Beeinträchtigung der Performance resultiert, und, noch wahrscheinlicher, in Problemen mit dem Zugriff auf
die Datenbank. Bemerkenswerterweise reagieren Microsoft Outlooks persönliche Ordner (*.pst) ziemlich
schlimm auf Oplocks. Im Zweifelsfall sollten Sie Oplocks deaktivieren und Ihr System von diesem
Ausgangspunkt aus einstellen.
</para>

<para>
Wenn client-seitiges Cachen in Ihrem Netzwerk erwünscht und zuverlässig ist, werden Sie vom Aktivieren der
Oplocks profitieren. Wenn Ihr Netzwerk langsam und/oder unzuverlässig ist oder Sie Ihre Dateien über mehr
als einen Freigabe-Mechanismus (z.B. NFS) oder ein WAN bereitstellen oder viele Anwender regelmäßig auf
dieselben Dateien zugreifen, werden Sie voraussichtlich wegen des entstehenden Overheads
durch das Management der Oplocks nicht von einer Aktivierung profitieren. In diesem Fall werden Sie die Oplocks stattdessen lieber deaktivieren.
</para>

<para>
Ein weiterer zu bedenkender Faktor ist die resultierende Performance des Dateizugriffs. Wenn Oplocks keinen
messbaren Geschwindigkeitszuwachs in Ihrem Netzwerk bringen, macht es wahrscheinlich keinen Sinn, sich mit ihnen
herumzuschlagen.
</para>

<sect2>
<title>Beispielkonfiguration</title>

<para>
Im folgenden Abschnitt untersuchen wir zwei verschiedene Aspekte der Samba-Sperren.
</para>

<sect3>
<title>Oplocks deaktivieren</title>

<para>
Sie können Oplocks wie folgt auf einer Pro-Freigabe-Basis deaktivieren:
</para>

<para>
<smbconfblock>
<smbconfsection>[acctdata]</smbconfsection>
<smbconfoption><name>oplocks</name><value>False</value></smbconfoption>
<smbconfoption><name>level2 oplocks</name><value>False</value></smbconfoption>
</smbconfblock>
</para>

<para>
Der Standard-Oplock-Typ ist Level1. Level2-Oplocks werden auf einer Pro-Freigabe-Basis in der Datei
&smb.conf; aktiviert.
</para>

<para>
Andererseits können Sie Oplocks auf einer Pro-Datei-Basis innerhalb der Freigabe deaktivieren:
</para>

<para>
<smbconfblock>
<smbconfoption><name>veto oplock files</name><value>/*.mdb/*.MDB/*.dbf/*.DBF/</value></smbconfoption>
</smbconfblock>
</para>

<para>
Wenn Sie Probleme mit Oplocks haben, die in Sambas Protokoll-Einträgen ersichtlich sind, möchten Sie
vielleicht lieber auf der sicheren Seite bleiben und Oplocks und Level2-Oplocks deaktivieren.
</para>

</sect3>

<sect3>
<title>Kernel-Oplocks deaktivieren</title>

<para>
<smbconfoption><name>kernel oplocks</name></smbconfoption> ist ein Parameter in &smb.conf;, der Samba informiert (wenn der UNIX-Kernel die Fähigkeit hat,
einem Windows-Client einen Oplock-Bruch zu senden), wenn ein UNIX-Prozess versucht, eine Datei zu öffnen, die
gepuffert wird. Dieser Parameter zielt auf die gemeinsame Nutzung von Dateien zwischen UNIX und Windows mit aktivierten
Oplocks auf dem Samba-Server; der UNIX-Server kann die Datei öffnen, die durch Oplocks vom Windows-Client
gesperrt (= gepuffert) ist, und der smbd-Prozess sendet keinen Oplock-Bruch, der die Datei sehr wahrscheinlich
zerstören würde. Wenn der UNIX-Kernel die Fähigkeit hat, einen Oplock-Bruch zu senden, dann befähigt der
Parameter <smbconfoption><name>kernel oplocks</name></smbconfoption> Samba dazu, den Oplock-Bruch zu senden.
Kernel-Oplocks werden auf einer Per-Server-Basis in der Datei &smb.conf; aktiviert.
</para>

<para>
<smbconfblock>
<smbconfoption><name>kernel oplocks</name><value>yes</value></smbconfoption>
</smbconfblock>
Die Voreinstellung ist no.
</para>

<para>
<smbconfoption><name>veto oplocks</name></smbconfoption> ist ein Parameter in &smb.conf;, der
spezifische Dateien angibt, für die Oplocks deaktiviert werden.
Wenn ein Windows-Client eine Datei öffnet, die mit veto oplocks konfiguriert worden ist, wird dem Client der Oplock
nicht erlaubt, und alle Operationen werden auf der originalen Datei auf der Platte durchgeführt, anstatt auf der
vom Client gepufferten Kopie der Datei. Durch explizites Angeben der Dateien, die mit UNIX-Prozessen geteilt
werden, und durch das Deaktivieren der Oplocks für diese Dateien kann die server-weite Oplock-Konfiguration
aktiviert werden, um es Windows-Clients zu erlauben, den Performance-Gewinn aus dem Datei-Caching zu nutzen, ohne
das Risiko zerstörter Dateien einzugehen. Veto-Oplocks können auf einer Per-Freigabe-Basis aktiviert werden oder
global für den gesamten Server. Dies erfolgt in der Datei &smb.conf; wie in <link linkend="far1"/>.
</para>

<para>
<smbconfexample id="far1">
<title>Freigabe mit einigen Dateien mit Oplocks</title>
<smbconfsection>[global]</smbconfsection>
<smbconfoption><name>veto oplock files</name><value>/dateiname.htm/*.txt/</value></smbconfoption>

<smbconfsection>[share_name]</smbconfsection>
<smbconfoption><name>veto oplock files</name><value>/*.exe/dateiname.ext/</value></smbconfoption>
</smbconfexample>
</para>

<para>
<smbconfoption><name>oplock break wait time</name></smbconfoption> ist ein Parameter in &smb.conf;,
der das Zeit-Intervall justiert, in dem Samba auf eine Anfrage zum Bruch eines Oplocks reagiert.
Samba empfiehlt:
<quote>Do not change this parameter unless you have read and understood the Samba oplock code.</quote>
<smbconfoption><name>oplock break wait time</name></smbconfoption> kann nur global in der Datei &smb.conf;
konfiguriert werden, wie nachfolgend gezeigt wird:
</para>

<para>
<smbconfblock>
<smbconfoption><name>oplock break wait time</name><value> 0 (default)</value></smbconfoption>
</smbconfblock>
</para>

<para>
<emphasis>oplock break contention limit</emphasis> ist ein Parameter in &smb.conf;,
der die Antwort des Samba-Servers auf die Anfrage nach einem Oplock einschränkt, wenn die Anzahl der
sich darum <quote>bewerbenden</quote> Clients das in diesem Parameter angegebene Limit erreicht.
Samba empfiehlt:
<quote>Do not change this parameter unless you have read and understood the Samba oplock code.</quote>
<emphasis>oplock break contention limit</emphasis> kann auf einer Per-Freigabe-Basis aktiviert werden oder
global für den gesamten Server. Dies erfolgt in der Datei &smb.conf; wie in <link linkend="far3"/>.
</para>

<para>
<smbconfexample id="far3">
<title>Konfiguration mit oplock break contention limit</title>
<smbconfsection>[global]</smbconfsection>
<smbconfoption><name>oplock break contention limit</name><value> 2 (default)</value></smbconfoption>

<smbconfsection>[share_name]</smbconfsection>
<smbconfoption><name>oplock break contention limit</name><value> 2 (default)</value></smbconfoption>
</smbconfexample>
</para>

</sect3>
</sect2>

</sect1>

<sect1>
<title>Oplock- und Cache-Kontrollen mit MS Windows</title>

<para>
Es gibt einen bekannten Umstand beim Ausführen von Applikationen (wie Norton Anti-Virus) auf einer
Windows 2000/XP-Workstation, der jede Anwendung beeinflussen kann, die versucht, über ein Netzwerk auf
freigegebene Datenbank-Dateien zuzugreifen. Dies ist eine Folge einer Voreinstellung im Windows 2000/XP-Betriebssystem, dies <emphasis>opportunistic locking</emphasis> heißt. Wenn eine Workstation versucht, auf
freigegebene Dateien auf einem anderen Windows 2000/XP-Rechner zuzugreifen, versucht das Windows 2000/XP-Betriebssystem, die Performance zu erhöhen, indem es die Dateien sperrt und lokal puffert. Wenn das
passiert, kann die Anwendung nicht mehr korrekt arbeiten, und das hat zur Folge, dass die Meldung
<quote>Access Denied</quote> während der Netzwerk-Operation angezeigt wird.
</para>

<para>
Alle Windows-Betriebssysteme in der NT-Familie, die als Datenbank-Server für Dateien arbeiten können
(das soll heißen, dass dort Dateien abgelegt werden, auf die von anderen Windows-PCs aus zugegriffen wird),
müssen wahrscheinlich deaktivierte Oplocks haben, um das Risiko der Beschädigung von Dateien zu
minimieren. Das gilt für Windows 9x/Me, Windows NT, Windows 200x und Windows XP.
<footnote><para>Microsoft hat dies im Knowledge-Base-Artikel 300216 dokumentiert.</para></footnote>
</para>

<para>
Wenn Sie eine Workstation der Windows NT-Familie anstatt eines Servers verwenden, müssen Sie auch darauf die
Oplocks deaktivieren. Wenn Sie zum Beispiel einen PC mit dem Betriebssystem Windows NT Workstation anstatt
Windows NT Server verwenden und Sie darauf Daten abgelegt haben, auf die von anderen Windows-PCs zugegriffen
wird, werden Sie die Oplocks auf diesem System deaktivieren müssen.
</para>

<para>
Der hauptsächliche Unterschied ist der Ort in der Windows-Registrierung, an dem die Werte zum Deaktivieren der
Oplocks eingegeben werden. Anstatt des Eintrags LanManServer muss eventuell der Eintrag LanManWorkstation
verwendet werden.
</para>

<para>
Sie können diesen Wert mit dem Windows-Registrierungseditor überprüfen 
(auch hinzufügen oder ändern, falls nötig). Wenn Sie diesen Registrierungswert ändern, müssen Sie den PC neu 
starten, um sicherzustellen, dass die neue Einstellung wirksam wird.
</para>

<para>
Der Ort des Registrierungseintrags für Oplocks hat sich mit Windows 2000 geändert (gegenüber dem früheren
Ort in Microsoft Windows NT).
</para>

<note><para>
Windows 2000 akzeptiert nach wie vor den Registrierungseintrag <constant>EnableOplocks</constant>, der in früheren Windows-Versionen
zum Deaktivieren von Oplocks verwendet wurde.
</para></note>

<para>
Sie können die Oplocks auch deaktivieren, indem Sie die folgenden Registrierungseinträge ändern:
</para>

<para>
<programlisting>
	HKEY_LOCAL_MACHINE\System\
		CurrentControlSet\Services\MRXSmb\Parameters\

		OplocksDisabled REG_DWORD 0 oder 1
		Voreinstellung: 0 (nicht deaktiviert)
</programlisting>
</para>

<note><para>
Der Registrierungseintrag <constant>OplocksDisabled</constant> konfiguriert Windows-Clients in Hinblick darauf, ob sie Oplocks für
enfernte (= nicht-lokale) Dateien anfordern
oder nicht. Um die Oplocks zu deaktivieren, muss der Wert von <constant>OplocksDisabled</constant> auf 1 gesetzt sein.
</para></note>

<para>
<programlisting>
	HKEY_LOCAL_MACHINE\System\
		CurrentControlSet\Services\LanmanServer\Parameters

		EnableOplocks REG_DWORD 0 oder 1
		Voreinstellung: 1 (Aktiviert)

		EnableOpLockForceClose REG_DWORD 0 oder 1
		Voreinstellung: 0 (Deaktiviert)
</programlisting>
</para>

<note><para>
Der Registrierungseintrag <constant>EnableOplocks</constant> konfiguriert Windows-basierende Server (einschließlich Workstations, 
die Dateien freigeben) so, dass sie Oplocks für lokale Dateien erlauben oder nicht.
</para></note>

<para>
Um das Schließen von offenen Oplocks beim Schließen oder Verlassen eines Programms zu erzwingen, muss
<constant>EnableOpLockForceClose</constant> auf 1 gesetzt sein.
</para>

<para>
Die folgende Liste illustriert die Arbeitsweise von Level2-Oplocks:
</para>

<itemizedlist>
	<listitem><para>
	Station 1 öffnet die Datei und fordert einen Oplock an.
	</para></listitem>
	<listitem><para>
	Da keine andere Station die Datei geöffnet hat, gewährt der Server der Station 1 einen exklusiven Oplock.
	</para></listitem>
	<listitem><para>
	Station 2 öffnet die Datei und fordert einen Oplock an.
	</para></listitem>
	<listitem><para>
	Da die Station 1 noch nicht auf die Datei geschrieben hat, fordert der Server die Station 1 dazu auf, den
	Oplock auf einen Level2-Oplock zu brechen.	
	</para></listitem>
	<listitem><para>
	Station 1 leistet dem Folge und gibt ihre gepufferten Sperr-Informationen zurück an den Server.
	</para></listitem>
	<listitem><para>
	Station 1 informiert den Server, dass sie den Oplock auf einen Level2-Oplock geändert hat (alternativ
	dazu hätte die Station 1 auch die Datei schließen können).
	</para></listitem>
	<listitem><para>
	Der Server antwortet auf die offene Anfrage von Station 2 und gewährt dieser einen Level2-Oplock.
	Andere Stationen können ebenso die Datei öffnen und einen Level2-Oplock erhalten.	
	</para></listitem>
	<listitem><para>
	Die Station 2 (oder irgendeine Station, die die Datei geöffnet hat) sendet eine Schreib-Anfrage per SMB.
	Der Server antwortet mit seiner entsprechenden <quote>write response</quote>.
	</para></listitem>
	<listitem><para>
	Der Server fordert alle Stationen, die die Datei geöffnet haben, dazu auf, ihre Oplocks aufzubrechen, was
	bedeutet, dass keine Station mehr irgendwelche Oplocks auf dieser Datei gesetzt hat. Da die
	Workstations an diesem Punkt keinerlei gepufferte Schreibvorgänge oder Sperren haben können, brauchen
	sie auch nicht auf diese <quote>break-to-none</quote>-Aufforderung zu antworten; sie
	müssen lediglich, alle lokal gepufferten read-ahead-Daten verwerfen.
	</para></listitem>
</itemizedlist>

<sect2>
<title>Workstation-Dienst-Einträge</title>

<para><programlisting>
	\HKEY_LOCAL_MACHINE\System\
		CurrentControlSet\Services\LanmanWorkstation\Parameters

	UseOpportunisticLocking   REG_DWORD   0 oder 1
	Voreinstellung: 1 (Aktiviert)
</programlisting></para>

<para>
Dies gibt an, ob der Redirektor Oplocks verwenden soll. Dieser Parameter sollte nur deaktiviert werden, um
Probleme einzugrenzen.
</para>

</sect2>
<sect2>
<title>Server-Dienst-Einträge</title>

<para><programlisting>
	\HKEY_LOCAL_MACHINE\System\
		CurrentControlSet\Services\LanmanServer\Parameters

	EnableOplocks   REG_DWORD   0 oder 1
	Voreinstellung: 1 (Aktiviert)
</programlisting></para>

<para>
Dies gibt an, ob der Server den Clients erlaubt, Oplocks für Dateien zu verwenden.
</para>

<para><programlisting>
	MinLinkThroughput   REG_DWORD   0 bis zu unendlich vielen Bytes/Sekunde
	Voreinstellung: 0
</programlisting></para>

<para>
Dies gibt den minimalen Durchsatz an, der vom Server erlaubt wird, bevor er raw-locks und Oplocks für diese
Verbindung deaktiviert.
</para>

<para><programlisting>
	MaxLinkDelay   REG_DWORD   0 bis 100,000 Sekunden
	Voreinstellung: 60
</programlisting></para>

<para>
Dies gibt das zeitliche Limit für die Verzögerungen in einer Verbindung an. 
Wenn die Verzögerungen diesen Wert übersteigen,
deaktiviert der Server raw-locks und Oplocks für diese Verbindung.
</para>

<para><programlisting>
	OplockBreakWait   REG_DWORD   10 bis 180 Sekunden
	Voreinstellung: 35
</programlisting></para>

<para>
Dies gibt die Zeit an, die der Server einem Client gibt, um auf eine Anfrage bezüglich eines Oplock-Breaks zu
antworten. Kleinere Werte können helfen, abgestürzte Clients schneller zu finden, verursachen aber auch
leichter den Verlust gepufferter Daten.
</para>

</sect2>
</sect1>

<sect1>
<title>Andauernder Datenverlust</title>

<para>
Wenn Sie alle in diesem Kapitel erwähnten Einstellungen gesetzt haben, aber nach wie vor Datenverluste
erleiden, gibt es hier noch ein paar weitere Dinge, die Sie sich ansehen sollten.
</para>

<para>
Wir haben zuverlässige Berichte von Entwicklern, dass fehlerhafte Netzwerk-Hardware, wie eine einzelne fehlerhafte
Netzwerkkarte, Symptome wie Caching-Probleme und Datenverlust verursachen kann. Wenn Sie auch nach wiederholtem
Neu-Indizieren immer noch Datenverluste erleiden, müssen Sie wahrscheinlich die betreffenden Dateien neu
aufbauen. Das bedeutet das Anlegen einer neuen Datei mit derselben Definition wie die neu zu bildende Datei und
das Transferieren der Daten aus der alten in die neue Datei. Es gibt einige bekannte Methoden, dies zu tun, die
Sie in unserer Knowledge Base finden können.
</para>

</sect1>

<sect1>
<title>Häufige Fehler</title>

<para>
In manchen Installationen zeigen sich Probleme mit dem Sperren, sobald ein Server installiert wird; in anderen
bleiben diese Probleme für eine lange Zeit verborgen. Fast ohne Ausnahme verursachen diese Probleme
Ärger und potenzielle Datenverluste.
</para>

<para>
Über die letzten paar Jahre gab es eine Anzahl von Beschwerden in der Samba-Mailing-Liste, in denen behauptet wurde,
dass Samba Datenverluste verursacht habe. Drei Ursachen wurden bislang festgestellt:
</para>

<itemizedlist>
	<listitem><para>
	Fehlerhafte Konfiguration der Oplocks (inkompatibel mit der verwendeten Applikation). Dies ist ein
	gängiges Problem, sogar dort, wo MS Windows NT4- oder MS Windows 200x-basierende Server im Einsatz
	sind. Es ist zwingend erforderlich, dass die Anweisungen des Software-Herstellers in Bezug auf die
	Konfiguration der Dateisperren befolgt werden. Falls Sie im Zweifel sind, deaktivieren Sie die Oplocks
	sowohl auf dem Server als auch auf dem Client. Das Deaktivieren jeglicher Form der Datei-Pufferung auf den
	MS Windows-Clients kann ebenso erforderlich sein.
	</para></listitem>

	<listitem><para>
	Defekte Netzwerk-Karten, -Kabel oder -HUBs/Switches. Dies ist im Allgemeinen eher beim Einsatz billiger
	Netzwerk-Hardware verbreitet, obwohl es manchmal auch Probleme mit Inkompatibilitäten bei
	eher teurer Hardware gibt.
	</para></listitem>

	<listitem><para>
	Es hat auch einzelne Meldungen gegeben, in denen berichtet wurde, dass Sambas Protokoll-Dateien
	über Daten-Dateien geschrieben wurden. Dies wurde nur von sehr wenigen Installationen berichtet
	(ungefähr fünf in den letzten drei Jahren), und alle Versuche, dieses Problem zu reproduzieren, schlugen
	fehl. Das Samba-Team war bislang nicht imstande, dieses Ereignis zu beobachten, und konnte daher auch
	noch keine spezielle Ursache eingrenzen. Bedenkt man die Millionen von Systemen, die Samba einsetzen,
	ist es trotzdem für die paar Administratoren, die von diesem Problem betroffen wurden, genauso wie
	für das Samba-Team, eine frustrierende und ärgerliche Herausforderung. Wenn Sie so etwas beobachten,
	erstellen Sie bitte unverzüglich einen Bug-Report auf 
	Samba <ulink url="https://bugzilla.samba.org">Bugzilla</ulink>. Geben Sie bitte so viele Informationen
	wie möglich, da Sie vielleicht dazu beitragen, die Ursache dieses Problems zu isolieren und die
	Reproduktion des Problems zu ermöglichen (ein Schritt von grundlegender Bedeutung, um das Problem
	eingrenzen und beheben zu können).
	</para></listitem>
</itemizedlist>

	<sect2>
	<title>Fehlermeldungen bezüglich locking.tdb</title>

	<para>
	<quote>
	Wir haben viele Fehler in den Samba-Logs, wie:
<programlisting>
tdb(/usr/local/samba_2.2.7/var/locks/locking.tdb): rec_read bad magic
 0x4d6f4b61 at offset=36116
</programlisting>

	Was bedeuten diese Meldungen?
	</quote>
	</para>

	<para>
	Dieser Fehler deutet auf eine zerstörte tdb-Datei hin. Stoppen Sie alle Instanzen von smbd,
	löschen Sie die Datei locking.tdb, und starten Sie smbd neu.	
	</para>

	</sect2>

	<sect2>
		<title>Probleme beim Speichern von Dateien in MS Office auf Windows XP</title>

		<para>Dies ist ein Bug in Windows XP. Sie finden mehr Infos dazu im
		<ulink url="http://support.microsoft.com/?id=812937">Microsoft Knowledge-Base-Artikel 812937.</ulink></para>

	</sect2>

	<sect2>

		<title>Lange Verzögerungen beim Löschen von Dateien über das Netzwerk mit XP SP1</title>
		
		<para><quote>Manchmal dauert es ca. 35 Sekunden, um Dateien über das Netzwerk zu löschen, nachdem
		XP SP1 eingespielt wurde.</quote></para>

		<para>Dies ist ein Bug in Windows XP. Sie finden mehr Infos dazu im
		<ulink url="http://support.microsoft.com/?id=811492">
		Microsoft Knowledge-Base-Artikel 811492.</ulink></para>
	</sect2>

</sect1>

<sect1>
<title>Weiterer Lesestoff</title>

<para>
Sie möchten vielleicht auf unserer Website von Zeit zu Zeit nach einer aktualisierten Version dieser 
Informationen schauen. Viele der von uns zur Verfügung gestellten Hinweisen werden aktualisiert, sobald sich neue
Informationen ergeben. Auf diesen <quote>papers</quote> finden Sie das Datum der letzten Bearbeitung immer
am Beginn des jeweiligen Artikels.
</para>

<para>
Der Abschnitt der Microsoft MSDN Library zum opportunistischen Sperren:
</para>

<para>
Opportunistic Locks, Microsoft Developer Network (MSDN), Windows Development &gt;
Windows Base Services &gt; Files and I/O &gt; SDK Documentation &gt; File Storage &gt; File Systems
&gt; About File Systems &gt; Opportunistic Locks, Microsoft Corporation.
<ulink noescape="1" url="http://msdn.microsoft.com/library/en-us/fileio/storage_5yk3.asp">http://msdn.microsoft.com/library/en-us/fileio/storage_5yk3.asp</ulink>
</para>

<para>
Microsoft Knowledge-Base-Artikel Q224992 <?latex \linebreak ?><quote>Maintaining Transactional Integrity
with OPLOCKS</quote>,
Microsoft Corporation, April 1999, <ulink noescape="1" url="http://support.microsoft.com/default.aspx?scid=kb;en-us;Q224992">http://support.microsoft.com/default.aspx?scid=kb;en-us;Q224992</ulink>.
</para>

<para>
Microsoft Knowledge-Base-Artikel Q296264 <quote>Configuring Opportunistic Locking in Windows 2000</quote>,
Microsoft Corporation, April 2001, <ulink noescape="1" url="http://support.microsoft.com/default.aspx?scid=kb;en-us;Q296264">http://support.microsoft.com/default.aspx?scid=kb;en-us;Q296264</ulink>.
</para>

<para>
Microsoft Knowledge-Base-Artikel Q129202 <quote>PC Ext: Explanation of Opportunistic Locking on Windows NT</quote>,
Microsoft Corporation, April 1995, <ulink noescape="1" url="http://support.microsoft.com/default.aspx?scid=kb;en-us;Q129202">http://support.microsoft.com/default.aspx?scid=kb;en-us;Q129202</ulink>.
</para>

</sect1>
</chapter>

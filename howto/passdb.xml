<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="passdb">
<chapterinfo>
	&author.jelmer;
	&author.jht;
	&author.jerry;
	&author.jeremy;
	<author>&person.gd;<contrib>LDAP updates</contrib></author>
	<author>
		<firstname>Olivier (lem)</firstname><surname>Lemaire</surname>
		<affiliation>
			<orgname>IDEALX</orgname>
			<address><email>olem@IDEALX.org</email></address>
		</affiliation>
	</author>
	
	<pubdate>May 24, 2003</pubdate>
	<author>&author.rdoelker;<contrib>Deutsche Übersetzung</contrib></author>
	<author>&author.sgw;<contrib>Deutsche Übersetzung</contrib></author>
</chapterinfo>
<title>Die Account-Datenbank</title>

<para>
Samba-3 führt eine neue Fähigkeit ein, gleichzeitig mit mehreren Account-Backends zu arbeiten.
Die möglichen neuen Kombinationen von Passwort-Backends ermöglicht Samba-3
eine Flexibilität und Skalierbarkeit, wie sie zuvor nur mit MS Windows Active Directory
erreicht werden konnte.
Dieses Kapitel beschreibt die neue Funktionalitäten und wie man das Meiste herausholt.
</para>

<sect1>
<title>Eigenschaften und Vorzüge</title>

<para>
Samba-3 bietet folgende Funktionen an, um zu Samba-2.2.x abwärtskompatibel zu sein:
<indexterm><primary>SAM Backend</primary><secondary>smbpasswd</secondary></indexterm>
<indexterm><primary>SAM Backend</primary><secondary>ldapsam_compat</secondary></indexterm>
<indexterm><primary>encrypted passwords</primary></indexterm>
</para>

<?latex \newpage ?>

<sect2>
	<title>Abwärtskompatible Backends</title>

<variablelist>
	<varlistentry><term>Plain Text</term>
		<listitem>
			<para>
			Diese Option benutzt nichts weiter als das UNIX/Linux
			<filename>/etc/passwd</filename>
			Modell. Bei Betriebssystemen, die Pluggable Authentication Modules (PAM) bieten,
			werden alle PAM-Module unterstützt. Das Verhalten ist unverändert wie in
			Samba-2.2.x, und die Protokoll-Beschränkungen, die durch MS Windows Clients
		 	bestehen,	
			treffen gleichermassen zu. Für weitere Informationen zu den Beschränkungen bei Verwendung von
			Plain Text Passwörtern finden Sie in den <link linkend="passdbtech">Technischen Informationen</link>.
			</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>smbpasswd</term>
		<listitem>
			<para>
			Auch diese Option bedeutet weiterhin die Nutzung der Datei
			<filename>smbpasswd</filename>,
			die im simplen ASCII (Text) Stil gehalten ist und die verschlüsselten MS Windows
			LanMan und NT Passworte, sowie ein Feld für die Accountinformationen enthält.
			Diese Art der Passwort-Datenbank enthält keine
			MS Windows NT/200x SAM (Security Account Manager) Informationen.
			Diese wären notwendig,
			um die erweiterten Funktionen für eine umfassendere Zusammenarbeit mit
			MS Windows NT4/200x Servern zu bieten.
			</para>

			<para>
			Diese Datenbank sollte nur zur Abwärtskompatiblität zu älteren
			Samba-Versionen benutzt werden.
			Sie wird möglicherweise von zukünftigen Versionen abgelehnt.
			</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>ldapsam_compat (Samba-2.2 LDAP Kompatibilität)</term>
		<listitem>
			<para>
			Es gibt eine Passwortdatenbank-Option, die fortgeführte Zusammenarbeit mit
			einer existierenden OpenLDAP-Datenbank erlaubt, die noch Samba-2.2.x
			LDAP Schemata-Erweiterungen benutzt.
			Diese vorläufige Option ist als Migrations-Hilfe gedacht,
			auch wenn zum jetzigen Zeitpunkt kein zwingender Grund für eine
			Migration vorliegt.
			Diese Hilfe wird möglicherweise von zukünftigen Versionen abgelehnt.
			</para>
		</listitem>
	</varlistentry>
</variablelist>

</sect2>

<para>
Samba-3 führt einige neue Passwortdatenbankformen ein.
<indexterm><primary>SAM Backend</primary><secondary>tdbsam</secondary></indexterm>
<indexterm><primary>SAM Backend</primary><secondary>ldapsam</secondary></indexterm>
<indexterm><primary>SAM Backend</primary><secondary>mysqlsam</secondary></indexterm>
<indexterm><primary>SAM Backend</primary><secondary>xmlsam</secondary></indexterm>
</para>

<sect2>
<title>Neue Backends</title>

<variablelist>
	<varlistentry><term>tdbsam</term>
		<listitem>
			<para>
			Diese Datenbank ist eine umfangreiche Datenbank für lokale Server.
			Allerdings eignet sich diese Datenbankmethode nicht für das Aufsetzen
			von mehreren Domain-Controllern (z. B., ein PDC plus ein oder mehrere BDCs)
			</para>

			<para>
			Die <emphasis>tdbsam</emphasis> Passwort-Datenbank legt neben den alten
			<emphasis>smbpasswd</emphasis>-Informationen
			noch die erweiterten MS Windows NT / 200x
			SAM Informationen in binärer Form in der TDB (Trivial DataBase) Datei ab.
			Das Einbeziehen der erweiterten Informationen macht es Samba-3 möglich,
			die gleichen Account- und System-Zugriffsrechte zu implementieren wie
			MS Windows NT4/200x-basierende Systeme.
			</para>

			<para>
			Die Einbeziehung der Möglichkeiten von <emphasis>tdbsam</emphasis> ist
			eine direkte Antwort auf Benutzernachfragen, die nach einer einfachen
			Betriebsart ohne den
			Aufwand von OpenLDAP fragten. Es wird empfohlen dies nur bei Standorten bis 250
			Benutzern anzuwenden. Fuer grössere Umgebungen wird eine
			OpenLDAP-basierende Installation wärmstens empfohlen.
			</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>ldapsam</term>
		<listitem>
			<para>
			Diese Datenbank ist eine umfangreiche Directory-Datenbank für Installationen mit
			verteilten Accounts.
			</para>

			<para>
			Samba-3 hat eine neue, erweiterte Implementation von LDAP, die eine
			Konfiguration von OpenLDAP mit dem neuen Samba Format-Schema voraussetzt.
			Dieses neue Format-Schema
			ist im Verzeichnis <filename class="directory">examples/LDAP</filename>
			der Samba-Distribution abgelegt.
			</para>

			<para>
			Die neue LDAP-Implementation erweitert die Möglichkeiten zur Kontrolle
			signifikant,
			verglichen mit den Möglichkeiten vorheriger Samba-Versionen.
			Man kann nun unter anderem Profil-Einstellungen, home-Verzeichnisse,
			Access Controls <quote>per user</quote> vornehmen.
			Firmenkunden werden sehen, dass das Samba Team auf die Nachfragen nach besserer
			Ressourcennutzung und mehr Skalierbarkeit gehört hat.
			</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>mysqlsam (MySQL basierende Datenbank)</term>
		<listitem>
			<para>
			Es wird erwartet, dass eine MySQL-basierende SAM in einigen Bereichen sehr
			beliebt sein wird. Diese Datenbank wird sicherlich für Standorte,
			die ihre existierende MySQL-Technologie erweitern möchten, überlegenswert sein.
			</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>xmlsam (XML basierende Datendatei)</term>
		<listitem>
			<para>
<indexterm><primary>pdbedit</primary></indexterm>
			erlaubt die Account- und Passwort-Informationen in einer XML-Datei abzulegen.
			Diese Datenbank kann nicht für normalen Betrieb verwendet werden;
			sie kann lediglich
			in Verbindung mit der Funktion <command>pdbedit</command> pdb2pdb genutzt werden.
			Die DTD, die benutzt wird, könnte in Zukunft geändert werden.
			</para>

			<para>
			Die Option <parameter>xmlsam</parameter> kann für Account-Migration zwischen
			verschiedenen Datenbanken oder für Backups nützlich sein. Überdies könnten
			die Daten bearbeitet werden, bevor sie in eine andere Datenbank
			übernommen werden.
			</para>
		</listitem>
	</varlistentry>

</variablelist>

</sect2>

</sect1>

<sect1 id="passdbtech">
	<title>Technische Information</title>

	<para>
	Alte Windows-Clients senden Klartext-Passwörter über "den Draht". Samba kann diese
	Passwörter prüfen, indem es sie verschlüsselt und mit dem Hash-Wert, der in der
	UNIX-Benutzer-Datenbank gespeichert ist, vergleicht.
	</para>
	<para>
<indexterm><primary>encrypted passwords</primary></indexterm>	
	Neuere Windows-Clients senden verschlüsselte Passwörter (sogenannte LanMan und NT
	Hashes), anstatt von Klartext. Die neuesten Clients senden nur verschlüsselte
	Passwörter und verweigern, Klartext-Passwörter zu senden, außer ihre Registrierung
	wurde modifiziert.
	</para>

	<para>
	Diese Passwörter können nicht in UNIX-artige verschlüsselte Passwörter konvertiert werden.
	Deshalb können Sie nicht die Standard-UNIX-Benutzerdatenbank verwenden, und Sie müssen
	die LanMan und NT-Hashes anderswo speichern.	
	</para>
	
	<para>
	Zusätzlich zu verschieden verschlüsselten Passwörtern speichert Windows auch Daten für jeden
	Benutzer ab, die nicht in einer UNIX-Benutzerdatenbank abgespeichert werden. Zum Beispiel
	die Workstations, von denen aus sich der Benutzer anmelden darf, wo sein Profil abgelegt
	wird, und so weiter. Samba fragt diese Daten ab und speichert sie unter Verwendung eines
	<smbconfoption><name>passdb backend</name></smbconfoption>. Üblicherweise verfügbare Backends
	sind LDAP, Klartext-Dateien und MySQL. Für mehr Informationen dazu lesen Sie in der ManPage
	zu &smb.conf; den Abschnitt bezüglich des Parameters
	<smbconfoption><name>passdb backend</name></smbconfoption>.</para>

	<image scale="50" id="idmap-sid2uid"><imagedescription>IDMAP: Auflösung von SIDs auf UIDs.</imagedescription><imagefile>idmap-sid2uid</imagefile></image>

	<para>
<indexterm><primary>SID</primary></indexterm>
	Die Auflösung von SIDs auf UIDs ist fundamental für den korrekten Betrieb von Samba.
	In beiden gezeigten Fällen, wenn winbindd nicht läuft, oder nicht erreicht werden kann, ist
	nur lokale SID/UID-Auflösung möglich. Sehen Sie die Diagramme
	<link linkend="idmap-sid2uid">Auflösung von SIDs auf UIDs</link> und
	<link linkend="idmap-uid2sid">Auflösung von UIDs auf SIDs</link>.
	</para>

	<image scale="50" id="idmap-uid2sid"><imagedescription>IDMAP: Auflösung von UIDs auf SIDs.</imagedescription><imagefile>idmap-uid2sid</imagefile></image>

	<sect2>
	<title>Wichtige Bemerkungen zur Sicherheit</title>
		
		<para>
		Die UNIX und SMB Passwort-Verschlüsselungs-Techniken scheinen an der
		Oberfläche ähnlich. Diese Ähnlichkeit ist jedoch nur sehr oberflächlich.
		Das UNIX-Schema sendet beim Anmelden Klartext-Passwörter über das Netz.
		Das ist schlecht. Das SMB-Verschlüsselungs-Schema sendet niemals das
		Klartext-Passwort über das Netzwerk, sondern speichert die 16 Byte
		Hash-Werte auf der Platte. Das ist auch schlecht. Warum? Weil diese
		16 Byte Hash-Werte ein <quote>Passwort Äquivalent</quote> sind. Sie können
		das Passwort des Benutzers nicht daraus ableiten, aber diese Werte könnten
		möglicherweise in einem modifizierten Client dazu eingesetzt werden, Zugriff
		auf einen Server zu erlangen. Dies würde einiges technisches Wissen auf Seiten
		des Angreifers voraussetzen, ist jedoch definitiv möglich. Sie sollten daher
		die gespeicherten Daten, welche Datenbank auch immer Sie benutzen (smbpasswd,
		LDAP, MYSQL), so behandeln, als ob diese Daten die Klartext-Passwörter all
		Ihrer Benutzer enthielten. Diese Inhalte müssen geheim gehalten werden und
		die Datei sollte dementsprechend geschützt werden.
		</para>
		
		<para>
		Idealerweise würden wir ein Passwort-Schema bevorzugen, daß Klartext-Passwörter
		weder im Netz noch auf der Festplatte verwendet. Dies ist unglücklicherweise
		nicht verfügbar, da Samba darauf beschränkt ist, kompatibel mit anderen SMB-Systemen
		(Windows NT, Windows for Workgroups, Windows 9x/Me) sein zu müssen.
		</para>

		<para>
		Windows NT 4.0 Service Pack 3 hat die Standard-Einstellung geändert, so daß
		Klartext-Passwörter nicht mehr über das Netzwerk gesendet werden. Dies macht die
		Verwendung verschlüsselter Passwörter notwendig, bzw. das Editieren der Windows NT
		Registrierung, um Klartext-Passwörter wieder zu aktivieren.
		</para>
		
		<para>
		Die folgenden Versionen von MS Windows unterstützen NICHT die vollständigen
		Domänen-Sicherheits-Protokolle, obwohl sie sich an einer Domäne anmelden können:
		</para>

		<itemizedlist>
			<listitem>MS DOS Network Client 3.0 mit installiertem "basic network redirector".</listitem>
			<listitem>Windows 95 mit installiertem "network redirector update".</listitem>
			<listitem>Windows 98 [Second Edition].</listitem>
			<listitem>Windows Me.</listitem>
		</itemizedlist>

		<note>
		<para>
 		MS Windows XP Home hat keine Einrichtungen, um Domänen-Mitglied zu werden, und kann
		nicht an Domänen-Anmeldungen teilnehmen.
		</para>
		</note>

		<para>
		Die folgenden Versionen von MS Windows unterstützen die vollständigen
		Domänen-Sicherheits-Protokolle.
		</para>

		<itemizedlist>
			<listitem>Windows NT 3.5x.</listitem>
			<listitem>Windows NT 4.0.</listitem>
			<listitem>Windows 2000 Professional.</listitem>
			<listitem>Windows 200x Server/Advanced Server.</listitem>
			<listitem>Windows XP Professional.</listitem>
		</itemizedlist>
			
		<para>
		Alles aktuellen Microsoft SMB/CIFS Clients unterstützen die Authentifikation
		über den hier beschriebenen SMB Challenge/Response Mechanismus. Das Aktivieren
		von Klartext-Authentifikation deaktiviert die Fähigkeit des Clients nicht, an
		verschlüsselter Authentifikation teilzunehmen. Stattdessen erlaubt dies dem Client,
		entweder Klartext- oder verschlüsselte Passwörter zu verwenden.		
		</para>

		<para>
		MS Windows Clients puffern nur das verschlüsselte Passwort. Wo Klartext-Passwörter
		durch den entsprechenden Registrierungs-Eintrag aktiviert wurden, wird das
		Klartext-Passwort nie gepuffert. Das bedeutet, daß im Fall einer getrennten
		Netzwerk-Verbindung nur das gepufferter (verschlüsselte) Passwort an den Server
		gesendet wird, um einen automatischen Wiederaufbau der Verbindung zu erzielen.
		Wenn der Server keine verschlüsselten Passwörter unterstützt, wird dies scheitern.
		Die Verwendung verschlüsselter Passwörter wird nachhaltig empfohlen</para>

		<sect3>
		<title>Vorteile verschlüsselter Passwörter</title>

			<itemizedlist>
				<listitem><para>
				Es werden keine Klartext-Passwörter über das Netzwerk versandt.
				Jemand, der einen Netzwerk-Sniffer verwendet, kann keine an den
				SMB-Server gesandten Passwörter abhören und aufzeichnen.
				</para></listitem>

				<listitem><para>Es werden keine Klartext-Passwörter auf Festplatten
				oder im RAM abgelegt.</para></listitem>
			
				<listitem><para>Windows NT mag es nicht, mit einem Server zu
				kommunizieren, der keine verschlüsselten Passwörter unterstützt.
				Es wird verweigern, den Server zu durchsuchen (browsing), wenn der
				Server auch noch im User Level Sicherheits-Modus läuft. NT wird
				darauf bestehen, den Benutzer bei jeder Verbindung nach einem
				Passwort zu fragen, was sehr lästig ist. Das einzige, was man
				dagegegen tun kann, ist die Verwendung von SMB-Verschlüsselung.
				</para></listitem>

				<listitem><para>Die Unterstützung verschlüsselter Passwörter
				erlaubt automatisches Wiederverbinden von Freigaben (Ressourcen).
				</para></listitem>

				<listitem><para>Verschlüsselte Passwörter sind essentiell notwendig
				für den PDC/BDC-Betrieb.
				</para></listitem>
			</itemizedlist>
		</sect3>


		<sect3>
		<title>Vorteile nicht verschlüsselter Passwörter</title>

			<itemizedlist>
				<listitem><para>Es werden keine Klartext-Passwörter auf Festplatten
                                oder im RAM abgelegt.</para></listitem>
	
				<listitem><para>Verwendung derselben Passwort-Datei wie Login oder FTP.
				</para></listitem>
				
				<listitem><para>Verwendung anderer Dienste (wie Telnet und FTP),
				die Klartext-Passwörter über das Netz senden, daher ist deren Versand
				für SMB keine so wichtige Angelegenheit mehr.
				</para></listitem>
			</itemizedlist>
		</sect3>
	</sect2>

	<sect2>
	<title>Die Zuordnung von Benutzer-Identifiern (UIDs) zwischen MS Windows und UNIX</title>

	<para>
	Jede Operation in UNIX/Linux erfordert einen Benutzer-Identifier (UID), genauso wie sie
	in MS Windows NT4/200x einen Sicherheits-Identifier (SID) erfordert. Samba stellt zwei
	Wege zur Verfügung, um einen Windows-Benutzer einem UNIX/Linux-UID zuzuweisen.
	</para>

	<para>
	Als erstes brauchen alle Samba SAM (Security Account Manager Datenbank) Konten eine
	UNIX/Linux-UID, der das jeweilige Konto zugewiesen wird. Da Benutzer der Konten-Datenbank
	hinzugefügt werden, ruft Samba das <smbconfoption><name>add user script</name></smbconfoption>
	Interface auf, um das Konto dem Betriebssystem, unter dem Samba läuft, hinzuzufügen.
	Grundsätzlich brauchen alle Konten in der lokalen SAM ein lokales Benutzerkonto.
	</para>

	<para>
	Die zweite Möglichkeit, die Zuweisung von Windows SIDs auf UNIX UIDs zu erzielen, ist via
	der Parameter <emphasis>idmap uid</emphasis> und <emphasis>idmap gid</emphasis> in &smb.conf;. 	
	Bitte lesen Sie die manpage für Informationen zu diesen Parametern. Sie sind essentiell
	wichtig für das Mappen von Benutzern von einem enfernten SAM-Server.
	</para>

	</sect2>

	<sect2 id="idmapbackend">
	<title>Das Zuweisen gemeinsamer UIDs/GIDs auf verteilten Maschinen</title>

	<para>
	Samba-3 hat eine spezielle Einrichtung, die es ermöglicht, identische UIDs und GIDs auf
	allen Servern eines verteilten Netzwerks aufrecht zu erhalten. Ein verteiltes Netzwerk ist
	ein Netzwerk, in dem ein PDC, ein oder mehrere BDCs und/oder ein oder mehrere
	Domänen-Mitglieds-Server existieren. Warum ist dies wichtig? Es ist wichtig, wenn Dateien
	über mehr als nur ein Protokoll (z.B. NFS) im Netz bereitgestellt werden, und wenn
	Benutzer Dateien mittels Werkzeugen wie <command>rsync</command> zwischen UNIX/Linux-Systemen
	kopieren.
	</para>

        <para>
	Die spezielle Einrichtung wird mittels einem Parameter namens
	<parameter>idmap backend</parameter> aktiviert. Die Standard-Einstellung für diesen
	Parameter ist ein leerer String. Technisch ist es möglich, ein LDAP-Backend für UIDs und GIDs
	zu verwenden, dies macht dann am meisten Sinn, wenn es in Netzwerk-Konfigurationen
	verwendet wird, die auch LDAP für das SAM-Backend verwenden.
	Sehen Sie dazu dieses <link linkend="idmapbackendexample">Beispiel</link>.
	</para>

	<para>
<indexterm><primary>SAM backend</primary><secondary>ldapsam</secondary></indexterm>
<smbconfexample id="idmapbackendexample">
<title>Beispiel-Konfiguration mit dem LDAP idmap Backend</title>
<indexterm><primary>SAM Backend</primary><secondary>xmlsam</secondary></indexterm>
<smbconfsection>[global]</smbconfsection>
<smbconfoption><name>idmap backend</name><value>ldap:ldap://ldap-server.quenya.org:636</value></smbconfoption>
<smbcomment>Alternativ könnte dies so angegeben werden:</smbcomment>
<smbconfoption><name>idmap backend</name><value>ldap:ldaps://ldap-server.quenya.org</value></smbconfoption>
</smbconfexample>
	</para>

	<para>
	Ein Netzwerk-Administrator, der ernsthaft LDAP-Backends verwenden will, wird früher oder später
	auf die exzellente Arbeit von PADL Software stossen. PADL <ulink url="http://www.padl.com"/>
	haben eine Reihe von Werkzeugen produziert und als OpenSource veröffentlicht, die von
	Interesse sein könnten. Diese Werkzeuge enthalten:
	</para>
	
	<itemizedlist>
		<listitem>
		<para>
		<emphasis>nss_ldap:</emphasis>
		Ein LDAP Name Service Switch Modul, um native Namensdienst-Unterstützung für AIX,
		Linux, Solaris, und andere Betriebssysteme anzubieten. Dieses Werkzeug kann zum
		zentralen Speichern und Beziehen von UIDs/GIDs verwendet werden.
		</para>
		</listitem>

		<listitem>
		<para>
		<emphasis>pam_ldap:</emphasis>
		Ein PAM-Modul, das LDAP-Integration für UNIX/Linux-System-Authentifikation
		bietet.
		</para>
		</listitem>
		<listitem>
		<para>
		<emphasis>idmap_ad:</emphasis>
		Ein IDMAP-Backend, das das Schema "Microsoft Services for
		UNIX RFC 2307" unterstützt, das unter
		<ulink url="http://www.padl.com/download/xad_oss_plugins.tar.gz"></ulink>zu finden ist.
		</para>
		</listitem>
	</itemizedlist>


	</sect2>
</sect1>

<sect1 id="acctmgmttools">
<title>Werkzeuge zur Verwaltung von Konten</title>

<para>
<indexterm><primary>pdbedit</primary></indexterm>
Samba enthält zwei Werkzeuge zur Verwaltung von Benutzer- und Maschinen-Konten. Diese Werkzeuge
sind <command>smbpasswd</command> und <command>pdbedit</command>.

<!--

Nach Rückfrage bei Jelmer aus dem aktuellen Stand kommentiert: Projekt schläft. sgw

Ein drittes Werkzeug ist in
Entwicklung, aber wird nicht mit Samba-3.0.0 ausgeliefert. Das neue Werkzeug wird ein
TCL/TK-GUI-Werkzeug sein, das in vielerlei Hinsicht wie der MS Windows NT4 Domain User Manager
aussieht. Hoffentlich wird dieses Werkzeug rechtzeitig zur Release von Samba-3.0.1 fertig.

 -->

</para>
	<sect2>
	<title>Der Befehl <emphasis>smbpasswd</emphasis></title>
	
		<para>
		Das Hilfsprogramm smbpasswd ist den Programmen <command>passwd</command> oder
		<command>yppasswd</command> ähnlich. Es wartet die beiden 32 Byte grossen
		Passwort-Felder im passdb-Backend.
		</para>

		<para>
		<command>smbpasswd</command> arbeitet in einem Client-Server-Modus, wo es den lokalen
		smbd kontaktiert, um das Passwort des Benutzers selbst zu ändern. Dies hat enorme Vorteile.
		</para>

		<para>
		<command>smbpasswd</command> hat die Fähigkeit, Passwörter auf Windows NT Servern zu ändern
		(dies funktioniert nur, wenn die Anfrage an den NT PDC gesendet wird, wenn man das Passwort
		eines Domänen-Benutzers ändert).
		</para>

		<para>
		<command>smbpasswd</command> kann für Folgendes verwendet werden:
<indexterm><primary>Benutzerverwaltung</primary></indexterm>
<indexterm><primary>Benutzer-Konten</primary><secondary>Hinzufügen/Löschen</secondary></indexterm>
		
		</para>

		<itemizedlist>
			<listitem><emphasis>Hinzufügen</emphasis> von Benutzer- oder Maschinen-Konten.</listitem>
			<listitem><emphasis>Löschen</emphasis> von Benutzer- oder Maschinen-Konten.</listitem>
			<listitem><emphasis>Aktivieren</emphasis> von Benutzer- oder Maschinen-Konten.</listitem>
			<listitem><emphasis>Deaktivieren</emphasis> von Benutzer- oder Maschinen-Konten.</listitem>
			<listitem><emphasis>Auf-NULL-Setzen</emphasis> von Benutzer-Passwörtern.</listitem>
			<listitem><emphasis>Verwalten von Domänen-Vertrauens-Konten.</emphasis></listitem>
		</itemizedlist>
		
		<para>
		Um smbpasswd als normaler Benutzer auszuführen, tippen SIe einfach:
		</para>
		
		<para>
<screen>
&prompt;<userinput>smbpasswd</userinput>
<prompt>Old SMB password: </prompt><userinput><replaceable>secret</replaceable></userinput>
</screen>
		Anstatt <replaceable>secret</replaceable>, geben Sie hier den alten Wert an, oder drücken einfach
		Enter, falls es kein altes Passwort gibt.
<screen>
<prompt>New SMB Password: </prompt><userinput><replaceable>new secret</replaceable></userinput>
<prompt>Repeat New SMB Password: </prompt><userinput><replaceable>new secret</replaceable></userinput>
</screen>
		</para>
		
		<para>
		Wenn der alte Wert nicht mit dem aktuell für den Benutzer gespeicherten Wert übereinstimmt, oder
		die beiden neuen Werte nicht zusammenpassen, wird das Passwort nicht geändert.		
		</para>
		
		<para>
		Von einem normalen Benutzer aufgerufen, erlaubt der Befehl dem Benutzer nur, das eigene Passwort
		zu ändern.
		</para>
		
		<para>
		Wird der Befehl von root ausgeführt, akzeptiert <command>smbpasswd</command> ein optionales
		Argument, das den Benutzer angibt, dessen Passwort Sie verändern wollen. Mit root-Rechten
		ausgeführt, fragt <command>smbpasswd</command> nicht nach dem alten Passwort, bzw. prüft es auch
		nicht, und erlaubt daher dem Benutzer root, Passwörter für Benutzer zu setzen, die ihr
		Passwort vergessen haben.
		</para>
		
		<para>
		<command>smbpasswd</command> wurde so entworfen, daß seine Arbeitsweise der ähnelt,
		die Benutzern der Befehle <command>passwd</command> oder <command>yppasswd</command>
		vertraut ist. Während es für administrative Anwendung entworfen wurde, bietet dieses
		Werkzeug die wichtige Fähigkeit, auf Benutzer-Ebene Passwörter zu ändern.
		</para>

		<para>
		Sehen Sie die man page (die definitive Referenz) für mehr Details zur Verwendung von
		<command>smbpasswd</command>.
		</para>
	</sect2>

	<sect2 id="pdbeditthing">
	<title>Der Befehl <emphasis>pdbedit</emphasis>.</title>

		<para>
<indexterm><primary>pdbedit</primary></indexterm>
		<command>pdbedit</command> ist ein Werkzeug, das nur von root verwendet werden kann.
		Es wird zur Verwaltung des passdb-Backends verwendet. <command>pdbedit</command> kann
		für Folgendes verwendet werden:
		<indexterm><primary>Benutzerverwaltung</primary></indexterm>
		<indexterm><primary>Benutzer-Konten</primary><secondary>Hinzufügen/Löschen</secondary></indexterm>
		</para>

		<itemizedlist>
			<listitem>Hinzufügen, Löschen oder Ändern von Benutzerkonten.</listitem>
			<listitem>Auflisten von Benutzerkonten.</listitem>
			<listitem>Migrieren von Benutzerkonten.</listitem>
		</itemizedlist>

		<para>
<indexterm><primary>pdbedit</primary></indexterm>
		Das Werkzeug <command>pdbedit</command> ist das einzige Werkzeug, das die Sicherheits- und
		Richtlinien-Einstellungen der Konten verwalten kann. Es kann sowohl alle Operationen durchführen,
		die smbpasswd beherrscht, wie auch ein Super-Set davon.
		</para>

		<para>
<indexterm><primary>pdbedit</primary></indexterm>
		Ein besonders wichtiger Zweck von <command>pdbedit</command> ist es, die Migration von
		Konten-Information von einem passdb-Backend in ein anderes zu erlauben. Sehen Sie den Abschnitt
		zum <link linkend="XMLpassdb">XML</link>-Backend in diesem Kapitel.		
		</para>

		<para>
		Das Folgende ist ein Beispiel für die Benutzer-Konten-Information, die einem
		tdbsam-passdb-Backend gespeichert ist. Diese Liste wurde so erzeugt:
		</para>

<screen>
&prompt;<userinput>pdbedit -Lv met</userinput>
UNIX username:        met
NT username:
Account Flags:        [UX         ]
User SID:             S-1-5-21-1449123459-1407424037-3116680435-2004
Primary Group SID:    S-1-5-21-1449123459-1407424037-3116680435-1201
Full Name:            Melissa E Terpstra
Home Directory:       \\frodo\met\Win9Profile
HomeDir Drive:        H:
Logon Script:         scripts\logon.bat
Profile Path:         \\frodo\Profiles\met
Domain:               &example.workgroup;
Account desc:
Workstations:         melbelle
Munged dial:
Logon time:           0
Logoff time:          Mon, 18 Jan 2038 20:14:07 GMT
Kickoff time:         Mon, 18 Jan 2038 20:14:07 GMT
Password last set:    Sat, 14 Dec 2002 14:37:03 GMT
Password can change:  Sat, 14 Dec 2002 14:37:03 GMT
Password must change: Mon, 18 Jan 2038 20:14:07 GMT
</screen>

		<para>
<indexterm><primary>pdbedit</primary></indexterm>
		<command>pdbedit</command> erlaubt die Migration von Authentifikations-Datenbanken (entspricht
		Konten-Datenbanken) von einem Backend in ein anderes. Zum Beispiel: Um Konten von einem alten
		<filename>smbpasswd</filename>-Backend in ein <parameter>tdbsam</parameter>-Backend zu migrieren:
		</para>

		<procedure>
			<step><para>
			Setzen Sie den Parameter <smbconfoption><name>passdb backend</name><value>tdbsam, smbpasswd</value></smbconfoption>.
			</para></step>

			<step><para>
			Führen Sie dies aus:
<screen>
&rootprompt;<userinput>pdbedit -i smbpasswd -e tdbsam</userinput>
</screen>
			</para></step>

			<step><para>
			Jetzt entfernen Sie den Wert <parameter>smbpasswd</parameter> aus dem Parameter
			<smbconfoption><name>passdb backend</name></smbconfoption> in &smb.conf;.
			</para></step>
		</procedure>

	</sect2>
</sect1>

<sect1>
<title>Passwort-Backends</title>

<para>
Samba bietet die größte Flexibilität im Design der Konten-Datenbank-Backends unter allen heute verfügbaren
SMB/CIFS-Server-Technologien. Die Flexibilität wird unmittelbar sichtbar, sobald man beginnt, diese Fähigkeiten
zu erforschen.
</para>

<para>
Es ist nicht nur möglich, mehrere verschiedene Passwort-Backends zu spezifizieren, sondern auch mehrere Backends
desselben Typs. Zum Beispiel die Verwendung zwei verschiedener tdbsam-Datenbanken:
</para>

<para>
<smbconfblock>
	<smbconfoption><name>passdb backend</name><value>tdbsam:/etc/samba/passdb.tdb \</value></smbconfoption>
	<member><parameter>tdbsam:/etc/samba/old-passdb.tdb</parameter></member>
</smbconfblock>
</para>


	<sect2>
	<title>Klartext</title>

		<para>
		Ältere Samba-Versionen bezogen die Benutzer-Informationen aus der UNIX-Benutzer-Datenbank
		und eventuell ein paar weiteren Feldern aus der Datei <filename>/etc/samba/smbpasswd</filename>
		oder <filename>/etc/smbpasswd</filename>. Wenn Passwort-Verschlüsselung deaktiviert ist, werden
		überhaupt keine SMB-spezifischen Daten gespeichert. Stattdessen werden alle Operationen auf
		die Art durchgeführt, in der das Wirts-Betriebssystem auf seine Datenbank
		<filename>/etc/passwd</filename> zugreift. Auf Linux-System geschieht dies beispielsweise via
		PAM.
		</para>

	</sect2>

	<sect2>
	<title>smbpasswd &smbmdash;-Datenbank für verschlüsselte Passwörter</title>

		<para>
<indexterm><primary>SAM backend</primary><secondary>smbpasswd</secondary></indexterm>
		Traditionellerweise wurden Benutzer-Konten-Informationen wie Benutzername, LM/NT Passwort-Hashes,
		Passwort-Änderungszeiten, und Konten-Flags in der Datei <filename>smbpasswd(5)</filename>
		gespeichert. Es gibt einige Nachteile an diesem Ansatz, besonders für Installationen mit
		einer grossen Anzahl von Benutzern (wir sprechen hier von Tausenden ...).
		</para>

		<itemizedlist>
		<listitem><para>
		Das erste Problem ist, daß alle Suchen ("lookups") sequentiell ausgeführt werden müssen.
		Dadurch, daß durchschnittlich zwei lookups pro Domänen-Anmeldung ausgeführt werden
		(einer für die normale Verbindung wie beim Verbinden eines Netzwerk-Laufwerks oder -Drucker)
		ist dies performance-mässig ein Flaschenhals für grosse Installationen. Was hier gebraucht wird,
		ist ein Ansatz mit Indizes, wie er in Datenbanken verwendet wird.
		</para></listitem>

		<listitem><para>
		Das zweite Problem ist, daß Administratoren, die eine smbpasswd-Datei auf mehr als einen
		Samba-Server replizieren wollen, externe Werkzeuge wie <command>rsync(1)</command> und
		<command>ssh(1)</command> verwenden mußten, und eigene, haus-interne Skripts geschrieben haben.	
		</para></listitem>

		<listitem><para>
		Zuletzt läßt der Raum, den die Menge an Informationen, die in einem smbpasswd-Eintrag gespeichert
		wird, keinen Platz für weitere Attribute, wie z.B. ein home-Verzeichnis, Ablaufdatum des 
		Passworts oder auch nur für einen Relative Identifier (RID).
		</para></listitem>
		</itemizedlist>

		<para>
		Als Schlußfolgerung aus diesen Mängeln wurde ein robusteres Hilfsmittel entwickelt, mit dem
		smbd Benutzer-Attribute speichern kann. Die API, welche den Zugriff auf Benutzer-Konten
		definiert, wird üblicherweise als das samdb-Interface bezeichnet (davor wurde es als die
		passdb-API bezeichnet, und im Samba-CVS-Tree wird es das immer noch).
		</para>

		<para>
		Samba bietet eine erweiterte Auswahl an passdb-Backends, die die Mängel der 
		smbpasswd-Klartext-Datenbank beseitigen. Diese sind tdbsam, ldapsam und xmlsam.
		Aus diesen dreien wird ldapsam dasjenige sein, das für grosse Firmen- oder
		Unternehmens-Installationen von größtem Interesse ist.
		</para>

	</sect2>

	<sect2>
	<title>tdbsam</title>

	<para>
<indexterm><primary>SAM backend</primary><secondary>tdbsam</secondary></indexterm>
		Samba can store user and machine account data in a <quote>TDB</quote> (Trivial Database).
		Using this backend does not require any additional configuration. This backend is
		recommended for new installations that do not require LDAP.
		</para>

		<para>
		As a general guide, the Samba Team does not recommend using the tdbsam backend for sites
		that have 250 or more users. Additionally, tdbsam does not support a replication protocol
		necessary for Samba PDC and BDC installations.  In such cases, the use of ldapsam is
		be encouraged.
		</para>

		<para>
		The recommendation of a 250 user limit is purely based on the notion that this
		would generally involve a site that has routed networks, possibly spread across
		more than one physical location. The Samba Team has not at this time established
		the performance based scalability limits of the tdbsam architecture.
		</para>

	</sect2>

	<sect2>
	<title>ldapsam</title>

		<para>
<indexterm><primary>SAM backend</primary><secondary>ldapsam</secondary></indexterm>
		There are a few points to stress that the ldapsam does not provide. The LDAP
		support referred to in this documentation does not include:
		</para>

		<itemizedlist>
			<listitem><para>A means of retrieving user account information from
			an Windows 200x Active Directory server.</para></listitem>
			<listitem><para>A means of replacing /etc/passwd.</para></listitem>
		</itemizedlist>

		<para>
		The second item can be accomplished by using LDAP NSS and PAM modules. LGPL
		versions of these libraries can be obtained from
		<ulink url="http://www.padl.com/">PADL Software</ulink>.
		More information about the configuration of these packages may be found at
		<ulink url="http://safari.oreilly.com/?XmlId=1-56592-491-6">
		<emphasis>LDAP, System Administration</emphasis>; Gerald Carter by O'Reilly; Chapter 6: Replacing NIS."</ulink>
		</para>

		<para>
		This document describes how to use an LDAP directory for storing Samba user
		account information traditionally stored in the smbpasswd(5) file. It is
		assumed that the reader already has a basic understanding of LDAP concepts
		and has a working directory server already installed. For more information
		on LDAP architectures and directories, please refer to the following sites:
		</para>

		<itemizedlist>
			<listitem><para><ulink url="http://www.openldap.org/">OpenLDAP</ulink></para></listitem>
			<listitem><para><ulink url="http://iplanet.netscape.com/directory">Sun iPlanet Directory Server</ulink></para></listitem>
		</itemizedlist>

		<para>
		Two additional Samba resources which may prove to be helpful are:
		</para>

		<itemizedlist>
			<listitem><para>The <ulink url="http://www.unav.es/cti/ldap-smb/ldap-smb-3-howto.html">Samba-PDC-LDAP-HOWTO</ulink>
			maintained by Ignacio Coupeau.</para></listitem>

			<listitem><para>The NT migration scripts from <ulink url="http://samba.idealx.org/">IDEALX</ulink> that are
			geared to manage users and group in such a Samba-LDAP Domain Controller configuration.
			</para></listitem>
		</itemizedlist>

		<sect3>
		<title>Supported LDAP Servers</title>

			<para>
			The LDAP ldapsam code has been developed and tested using the OpenLDAP 2.0 and 2.1 server and
			client libraries. The same code should work with Netscape's Directory Server and client SDK.
			However, there are bound to be compile errors and bugs. These should not be hard to fix.
			Please submit fixes via the process outlined in <link linkend="bugreport">Reporting Bugs</link> chapter.
			</para>

		</sect3>

		<sect3>
		<title>Schema and Relationship to the RFC 2307 posixAccount</title>


			<para>
			Samba-3.0 includes the necessary schema file for OpenLDAP 2.0 in
			<filename>examples/LDAP/samba.schema</filename>. The sambaSamAccount objectclass is given here:
			</para>

<para>
<programlisting>
objectclass (1.3.6.1.4.1.7165.2.2.6 NAME 'sambaSamAccount' SUP top AUXILIARY
    DESC 'Samba-3.0 Auxiliary SAM Account'
    MUST ( uid $ sambaSID )
    MAY  ( cn $ sambaLMPassword $ sambaNTPassword $ sambaPwdLastSet $
          sambaLogonTime $ sambaLogoffTime $ sambaKickoffTime $
          sambaPwdCanChange $ sambaPwdMustChange $ sambaAcctFlags $
          displayName $ sambaHomePath $ sambaHomeDrive $ sambaLogonScript $
          sambaProfilePath $ description $ sambaUserWorkstations $
          sambaPrimaryGroupSID $ sambaDomainName ))
</programlisting>
</para>

			<para>
			The <filename>samba.schema</filename> file has been formatted for OpenLDAP 2.0/2.1.
			The Samba Team owns the OID space used by the above schema and recommends its use.
			If you translate the schema to be used with Netscape DS, please submit the modified
			schema file as a patch to <ulink url="mailto:jerry@samba.org">jerry@samba.org</ulink>.
			</para>

			<para>
			Just as the smbpasswd file is meant to store information that provides information additional to  a
			user's <filename>/etc/passwd</filename> entry, so is the sambaSamAccount object
			meant to supplement the UNIX user account information. A sambaSamAccount is a
			<constant>AUXILIARY</constant> objectclass so it can be used to augment existing
			user account information in the LDAP directory, thus providing information needed
			for Samba account handling. However, there are several fields (e.g., uid) that overlap
			with the posixAccount objectclass outlined in RFC2307. This is by design.
			</para>

			<!--olem: we should perhaps have a note about shadowAccounts too as many
			systems use them, isn'it ? -->

			<para>
			In order to store all user account information (UNIX and Samba) in the directory,
			it is necessary to use the sambaSamAccount and posixAccount objectclasses in
			combination. However, smbd will still obtain the user's UNIX account
			information via the standard C library calls (e.g., getpwnam(), et al).
			This means that the Samba server must also have the LDAP NSS library installed
			and functioning correctly. This division of information makes it possible to
			store all Samba account information in LDAP, but still maintain UNIX account
			information in NIS while the network is transitioning to a full LDAP infrastructure.
			</para>
		</sect3>

		<sect3>
		<title>OpenLDAP Configuration</title>

			<para>
			To include support for the sambaSamAccount object in an OpenLDAP directory
			server, first copy the samba.schema file to slapd's configuration directory.
			The samba.schema file can be found in the directory <filename>examples/LDAP</filename>
			in the Samba source distribution.
			</para>

<para>
<screen>
&rootprompt;<userinput>cp samba.schema /etc/openldap/schema/</userinput>
</screen>
</para>

			<para>
			Next, include the <filename>samba.schema</filename> file in <filename>slapd.conf</filename>.
			The sambaSamAccount object contains two attributes that depend on other schema
			files. The <parameter>uid</parameter> attribute is defined in <filename>cosine.schema</filename> and
			the <parameter>displayName</parameter> attribute is defined in the <filename>inetorgperson.schema</filename>
			file. Both of these must be included before the <filename>samba.schema</filename> file.
			</para>

<para>
<programlisting>
## /etc/openldap/slapd.conf

## schema files (core.schema is required by default)
include	           /etc/openldap/schema/core.schema

## needed for sambaSamAccount
include            /etc/openldap/schema/cosine.schema
include            /etc/openldap/schema/inetorgperson.schema
include            /etc/openldap/schema/nis.schema
include            /etc/openldap/schema/samba.schema
....
</programlisting>
</para>

		<para>
		It is recommended that you maintain some indices on some of the most useful attributes,
		as in the following example, to speed up searches made on sambaSamAccount objectclasses
		(and possibly posixAccount and posixGroup as well):
		</para>

<para>
<programlisting>
# Indices to maintain
## required by OpenLDAP
index objectclass             eq

index cn                      pres,sub,eq
index sn                      pres,sub,eq
## required to support pdb_getsampwnam
index uid                     pres,sub,eq
## required to support pdb_getsambapwrid()
index displayName             pres,sub,eq

## uncomment these if you are storing posixAccount and
## posixGroup entries in the directory as well
##index uidNumber               eq
##index gidNumber               eq
##index memberUid               eq

index   sambaSID              eq
index   sambaPrimaryGroupSID  eq
index   sambaDomainName       eq
index   default               sub
</programlisting>
</para>

		<para>
		Create the new index by executing:
		</para>

<para>
<screen>
&rootprompt;./sbin/slapindex -f slapd.conf
</screen>
</para>

		<para>
		Remember to restart slapd after making these changes:
		</para>

<para>
<screen>
&rootprompt;<userinput>/etc/init.d/slapd restart</userinput>
</screen>
</para>

		</sect3>

		<sect3>
		<title>Initialize the LDAP Database</title>

		<para>
		Before you can add accounts to the LDAP database you must create the account containers
		that they will be stored in. The following LDIF file should be modified to match your
		needs (DNS entries, and so on):
		</para>
		
<para>
<programlisting>
# Organization for Samba Base
dn: dc=quenya,dc=org
objectclass: dcObject
objectclass: organization
dc: quenya
o: Quenya Org Network
description: The Samba-3 Network LDAP Example

# Organizational Role for Directory Management
dn: cn=Manager,dc=quenya,dc=org
objectclass: organizationalRole
cn: Manager
description: Directory Manager

# Setting up container for users
dn: ou=People,dc=quenya,dc=org
objectclass: top
objectclass: organizationalUnit
ou: People

# Setting up admin handle for People OU
dn: cn=admin,ou=People,dc=quenya,dc=org
cn: admin
objectclass: top
objectclass: organizationalRole
objectclass: simpleSecurityObject
userPassword: {SSHA}c3ZM9tBaBo9autm1dL3waDS21+JSfQVz

# Setting up container for groups
dn: ou=Groups,dc=quenya,dc=org
objectclass: top
objectclass: organizationalUnit
ou: Groups

# Setting up admin handle for Groups OU
dn: cn=admin,ou=Groups,dc=quenya,dc=org
cn: admin
objectclass: top
objectclass: organizationalRole
objectclass: simpleSecurityObject
userPassword: {SSHA}c3ZM9tBaBo9autm1dL3waDS21+JSfQVz

# Setting up container for computers
dn: ou=Computers,dc=quenya,dc=org
objectclass: top
objectclass: organizationalUnit
ou: Computers

# Setting up admin handle for Computers OU
dn: cn=admin,ou=Computers,dc=quenya,dc=org
cn: admin
objectclass: top
objectclass: organizationalRole
objectclass: simpleSecurityObject
userPassword: {SSHA}c3ZM9tBaBo9autm1dL3waDS21+JSfQVz
</programlisting>
</para>

		<para>
		The userPassword shown above should be generated using <command>slappasswd</command>.
		</para>

		<para>
		The following command will then load the contents of the LDIF file into the LDAP
		database.
		</para>

<para>
<screen>
&prompt;<userinput>slapadd -v -l initldap.dif</userinput>
</screen>
</para>

		<para>
		Do not forget to secure your LDAP server with an adequate access control list
		as well as an admin password.
		</para>

		<note>
		<para>
		Before Samba can access the LDAP server you need to store the LDAP admin password
		into the Samba-3 <filename>secrets.tdb</filename> database by:
<screen>
&rootprompt;<userinput>smbpasswd -w <replaceable>secret</replaceable></userinput>
</screen>
		</para>
		</note>

		</sect3>

		<sect3>
		<title>Configuring Samba</title>

			<para>
			The following parameters are available in smb.conf only if your
			version of Samba was built with LDAP support. Samba automatically builds with LDAP support if the
			LDAP libraries are found.
			</para>

			<para>LDAP related smb.conf options:
			<smbconfoption><name>passdb backend</name><value>ldapsam:url</value></smbconfoption>,
			<smbconfoption><name>ldap admin dn</name></smbconfoption>,
			<smbconfoption><name>ldap delete dn</name></smbconfoption>,
			<smbconfoption><name>ldap filter</name></smbconfoption>,
			<smbconfoption><name>ldap group suffix</name></smbconfoption>,
			<smbconfoption><name>ldap idmap suffix</name></smbconfoption>,
			<smbconfoption><name>ldap machine suffix</name></smbconfoption>,
			<smbconfoption><name>ldap passwd sync</name></smbconfoption>,
			<smbconfoption><name>ldap ssl</name></smbconfoption>,
			<smbconfoption><name>ldap suffix</name></smbconfoption>,
			<smbconfoption><name>ldap user suffix</name></smbconfoption>,
		</para>

			<para>
			These are described in the &smb.conf; man
			page and so will not be repeated here. However, a <link linkend="confldapex">sample &smb.conf; file</link> for
			use with an LDAP directory could appear as shown below.
			</para>

<para>
<smbconfexample id="confldapex">
<title>Configuration with LDAP</title>
<smbconfsection>[global]</smbconfsection>
<smbconfoption><name>security</name><value>user</value></smbconfoption>
<smbconfoption><name>encrypt passwords</name><value>yes</value></smbconfoption>
<smbconfoption><name>netbios name</name><value>MORIA</value></smbconfoption>
<smbconfoption><name>workgroup</name><value>NOLDOR</value></smbconfoption>

<smbconfcomment>ldap related parameters</smbconfcomment>

<smbconfcomment>define the DN to use when binding to the directory servers</smbconfcomment>
<smbconfcomment>The password for this DN is not stored in smb.conf. Rather it</smbconfcomment>
<smbconfcomment>must be set by using 'smbpasswd -w <replaceable>secretpw</replaceable>' to store the</smbconfcomment>
<smbconfcomment>passphrase in the secrets.tdb file. If the "ldap admin dn" values</smbconfcomment>
<smbconfcomment>change, this password will need to be reset.</smbconfcomment>
<smbconfoption><name>ldap admin dn</name><value>"cn=Manager,dc=quenya,dc=org"</value></smbconfoption>

<smbconfcomment>Define the SSL option when connecting to the directory</smbconfcomment>
<smbconfcomment>('off', 'start tls', or 'on' (default))</smbconfcomment>
<smbconfoption><name>ldap ssl</name><value>start tls</value></smbconfoption>

<smbconfcomment>syntax: passdb backend = ldapsam:ldap://server-name[:port]</smbconfcomment>
<smbconfoption><name>passdb backend</name><value>ldapsam:ldap://frodo.quenya.org</value></smbconfoption>

<smbconfcomment>smbpasswd -x delete the entire dn-entry</smbconfcomment>
<smbconfoption><name>ldap delete dn</name><value>no</value></smbconfoption>

<smbconfcomment>the machine and user suffix added to the base suffix</smbconfcomment>
<smbconfcomment>wrote WITHOUT quotes. NULL suffixes by default</smbconfcomment>
<smbconfoption><name>ldap user suffix</name><value>ou=People</value></smbconfoption>
<smbconfoption><name>ldap group suffix</name><value>ou=Groups</value></smbconfoption>
<smbconfoption><name>ldap machine suffix</name><value>ou=Computers</value></smbconfoption>

<smbconfcomment>Trust UNIX account information in LDAP</smbconfcomment>
<smbconfcomment> (see the smb.conf man page for details)</smbconfcomment>

<smbconfcomment> specify the base DN to use when searching the directory</smbconfcomment>
<smbconfoption><name>ldap suffix</name><value>dc=quenya,dc=org</value></smbconfoption>

<smbconfcomment> generally the default ldap search filter is ok</smbconfcomment>
<smbconfoption><name>ldap filter</name><value>(&amp;(uid=%u)(objectclass=sambaSamAccount))</value></smbconfoption>
</smbconfexample>
</para>

		</sect3>

		<sect3>
		<title>Accounts and Groups Management</title>

			<para>
<indexterm><primary>User Management</primary></indexterm>
<indexterm><primary>User Accounts</primary><secondary>Adding/Deleting</secondary></indexterm>

			As user accounts are managed through the sambaSamAccount objectclass, you should
			modify your existing administration tools to deal with sambaSamAccount attributes.
			</para>

			<para>
			Machine accounts are managed with the sambaSamAccount objectclass, just
			like users accounts. However, it is up to you to store those accounts
			in a different tree of your LDAP namespace. You should use
			<quote>ou=Groups,dc=quenya,dc=org</quote> to store groups and
			<quote>ou=People,dc=quenya,dc=org</quote> to store users. Just configure your
			NSS and PAM accordingly (usually, in the <filename>/etc/openldap/sldap.conf</filename>
			configuration file).
			</para>

			<para>
			In Samba-3, the group management system is based on POSIX
			groups. This means that Samba makes use of the posixGroup objectclass.
			For now, there is no NT-like group system management (global and local
			groups). Samba-3 knows only about <constant>Domain Groups</constant>
			and, unlike MS Windows 2000 and Active Directory, Samba-3 does not
			support nested groups.
			</para>

		</sect3>

		<sect3>
		<title>Security and sambaSamAccount</title>


			<para>
			There are two important points to remember when discussing the security
			of sambaSamAccount entries in the directory.
			</para>

			<itemizedlist>
				<listitem><para><emphasis>Never</emphasis> retrieve the lmPassword or
				ntPassword attribute values over an unencrypted LDAP session.</para></listitem>
				<listitem><para><emphasis>Never</emphasis> allow non-admin users to
				view the lmPassword or ntPassword attribute values.</para></listitem>
			</itemizedlist>

			<para>
			These password hashes are clear-text equivalents and can be used to impersonate
			the user without deriving the original clear-text strings. For more information
			on the details of LM/NT password hashes, refer to the
			<link linkend="passdb">Account Information Database</link> section of this chapter.
			</para>

			<para>
			To remedy the first security issue, the <smbconfoption><name>ldap ssl</name></smbconfoption> &smb.conf; parameter defaults
			to require an encrypted session (<smbconfoption><name>ldap ssl</name><value>on</value></smbconfoption>) using
			the default port of <constant>636</constant>
			when contacting the directory server. When using an OpenLDAP server, it
			is possible to use the use the StartTLS LDAP extended  operation in the place of
			LDAPS. In either case, you are strongly discouraged to disable this security
			(<smbconfoption><name>ldap ssl</name><value>off</value></smbconfoption>).
			</para>

			<para>
			Note that the LDAPS protocol is deprecated in favor of the LDAPv3 StartTLS
			extended operation. However, the OpenLDAP library still provides support for
			the older method of securing communication between clients and servers.
			</para>

			<para>
			The second security precaution is to prevent non-administrative users from
			harvesting password hashes from the directory. This can be done using the
			following ACL in <filename>slapd.conf</filename>:
			</para>

<para>
<programlisting>
## allow the "ldap admin dn" access, but deny everyone else
access to attrs=sambaLMPassword,sambaNTPassword
     by dn="cn=Samba Admin,ou=People,dc=quenya,dc=org" write
     by * none
</programlisting>
</para>

		</sect3>

		<sect3>
		<title>LDAP Special Attributes for sambaSamAccounts</title>

			<para> The sambaSamAccount objectclass is composed of the attributes shown in next tables: <link
			linkend="attribobjclPartA">Part A</link>, and <link linkend="attribobjclPartB">Part B</link>.
			</para>

			<para>
			<table frame="all" id="attribobjclPartA">
				<title>Attributes in the sambaSamAccount objectclass (LDAP) &smbmdash; Part A</title>
			<tgroup cols="2" align="justify">
					<colspec align="left"/>
					<colspec align="justify" colwidth="1*"/>
			<tbody>
				<row><entry><constant>sambaLMPassword</constant></entry><entry>The LANMAN password 16-byte hash stored as a character
						representation of a hexadecimal string.</entry></row>
				<row><entry><constant>sambaNTPassword</constant></entry><entry>The NT password hash 16-byte stored as a character
						representation of a hexadecimal string.</entry></row>
				<row><entry><constant>sambaPwdLastSet</constant></entry><entry>The integer time in seconds since 1970 when the
						<constant>sambaLMPassword</constant> and <constant>sambaNTPassword</constant> attributes were last set.
				</entry></row>

				<row><entry><constant>sambaAcctFlags</constant></entry><entry>String of 11 characters surrounded by square brackets []
						representing account flags such as U (user), W (workstation), X (no password expiration),
						I (Domain trust account), H (Home dir required), S (Server trust account),
						and D (disabled).</entry></row>

				<row><entry><constant>sambaLogonTime</constant></entry><entry>Integer value currently unused</entry></row>

				<row><entry><constant>sambaLogoffTime</constant></entry><entry>Integer value currently unused</entry></row>

				<row><entry><constant>sambaKickoffTime</constant></entry><entry>Specifies the time (UNIX time format) when the user
				will be locked down and cannot login any longer. If this attribute is omitted, then the account will never expire.
				If you use this attribute together with `shadowExpire' of the `shadowAccount' objectClass, will enable accounts to	
				expire completely on an exact date.</entry></row>

				<row><entry><constant>sambaPwdCanChange</constant></entry><entry>Specifies the time (UNIX time format) from which on the user is allowed to
				change his password. If attribute is not set, the user will be free to change his password whenever he wants.</entry></row>

				<row><entry><constant>sambaPwdMustChange</constant></entry><entry>Specifies the time (UNIX time format) since when the user is
				forced to change his password. If this value is set to `0', the user will have to change his password at first login.
				If this attribute is not set, then the password will never expire.</entry></row>

				<row><entry><constant>sambaHomeDrive</constant></entry><entry>Specifies the drive letter to which to map the
				UNC path specified by sambaHomePath. The drive letter must be specified in the form <quote>X:</quote>
				where X is the letter of the drive to map. Refer to the <quote>logon drive</quote> parameter in the
				smb.conf(5) man page for more information.</entry></row>

				<row><entry><constant>sambaLogonScript</constant></entry><entry>The sambaLogonScript property specifies the path of
				the user's logon script, .CMD, .EXE, or .BAT file. The string can be null. The path
				is relative to the netlogon share. Refer to the <smbconfoption><name>logon script</name></smbconfoption> parameter in the
				&smb.conf; man page for more information.</entry></row>

				<row><entry><constant>sambaProfilePath</constant></entry><entry>Specifies a path to the user's profile.
				This value can be a null string, a local absolute path, or a UNC path. Refer to the
				<smbconfoption><name>logon path</name></smbconfoption> parameter in the &smb.conf; man page for more information.</entry></row>

				<row><entry><constant>sambaHomePath</constant></entry><entry>The sambaHomePath property specifies the path of
				the home directory for the user. The string can be null. If sambaHomeDrive is set and specifies
				a drive letter, sambaHomePath should be a UNC path. The path must be a network
				UNC path of the form <filename>\\server\share\directory</filename>. This value can be a null string.
				Refer to the <command>logon home</command> parameter in the &smb.conf; man page for more information.
				</entry></row>
			</tbody>
			</tgroup></table>
			</para>
			<para>
			<table frame="all" id="attribobjclPartB">
				<title>Attributes in the sambaSamAccount objectclass (LDAP) &smbmdash; Part B</title>
			<tgroup cols="2" align="justify">
					<colspec align="left"/>
					<colspec align="justify" colwidth="1*"/>
			<tbody>
				<row><entry><constant>sambaUserWorkstations</constant></entry><entry>Here you can give a comma-separated list of machines
				on which the user is allowed to login. You may observe problems when you try to connect to an Samba Domain Member.
				Because Domain Members are not in this list, the Domain Controllers will reject them. Where this attribute is omitted,
				the default implies no restrictions.
				</entry></row>

				<row><entry><constant>sambaSID</constant></entry><entry>The security identifier(SID) of the user.
				The Windows equivalent of UNIX UIDs.</entry></row>

				<row><entry><constant>sambaPrimaryGroupSID</constant></entry><entry>The Security IDentifier (SID) of the primary group
				of the user.</entry></row>

				<row><entry><constant>sambaDomainName</constant></entry><entry>Domain the user is part of.</entry></row>
			</tbody>
			</tgroup></table>
			</para>

			<para>
			The majority of these parameters are only used when Samba is acting as a PDC of
			a domain (refer to <link linkend="samba-pdc">Domain Control</link>, for details on
			how to configure Samba as a Primary Domain Controller). The following four attributes
			are only stored with the sambaSamAccount entry if the values are non-default values:
			</para>

			<itemizedlist>
				<listitem>sambaHomePath</listitem>
				<listitem>sambaLogonScript</listitem>
				<listitem>sambaProfilePath</listitem>
				<listitem>sambaHomeDrive</listitem>
			</itemizedlist>

			<para>
			These attributes are only stored with the sambaSamAccount entry if
			the values are non-default values. For example, assume MORIA has now been
			configured as a PDC and that <smbconfoption><name>logon home</name><value>\\%L\%u</value></smbconfoption> was defined in
			its &smb.conf; file. When a user named <quote>becky</quote> logons to the domain,
			the <smbconfoption><name>logon home</name></smbconfoption> string is expanded to \\MORIA\becky.
			If the smbHome attribute exists in the entry <quote>uid=becky,ou=People,dc=samba,dc=org</quote>,
			this value is used. However, if this attribute does not exist, then the value
			of the <smbconfoption><name>logon home</name></smbconfoption> parameter is used in its place. Samba
			will only write the attribute value to the directory entry if the value is
			something other than the default (e.g., <filename>\\MOBY\becky</filename>).
			</para>

		</sect3>

		<sect3>
		<title>Example LDIF Entries for a sambaSamAccount</title>

			<para>
			The following is a working LDIF that demonstrates the use of the SambaSamAccount objectclass:
			</para>

	<para>
	<programlisting>
	dn: uid=guest2, ou=People,dc=quenya,dc=org
	sambaLMPassword: 878D8014606CDA29677A44EFA1353FC7
	sambaPwdMustChange: 2147483647
	sambaPrimaryGroupSID: S-1-5-21-2447931902-1787058256-3961074038-513
	sambaNTPassword: 552902031BEDE9EFAAD3B435B51404EE
	sambaPwdLastSet: 1010179124
	sambaLogonTime: 0
	objectClass: sambaSamAccount
	uid: guest2
	sambaKickoffTime: 2147483647
	sambaAcctFlags: [UX         ]
	sambaLogoffTime: 2147483647
	sambaSID: S-1-5-21-2447931902-1787058256-3961074038-5006
	sambaPwdCanChange: 0
	</programlisting>
	</para>

			<para>
			The following is an LDIF entry for using both the sambaSamAccount and
			posixAccount objectclasses:
			</para>

	<para>
	<programlisting>
	dn: uid=gcarter, ou=People,dc=quenya,dc=org
	sambaLogonTime: 0
	displayName: Gerald Carter
	sambaLMPassword: 552902031BEDE9EFAAD3B435B51404EE
	sambaPrimaryGroupSID: S-1-5-21-2447931902-1787058256-3961074038-1201
	objectClass: posixAccount
	objectClass: sambaSamAccount
	sambaAcctFlags: [UX         ]
	userPassword: {crypt}BpM2ej8Rkzogo
	uid: gcarter
	uidNumber: 9000
	cn: Gerald Carter
	loginShell: /bin/bash
	logoffTime: 2147483647
	gidNumber: 100
	sambaKickoffTime: 2147483647
	sambaPwdLastSet: 1010179230
	sambaSID: S-1-5-21-2447931902-1787058256-3961074038-5004
	homeDirectory: /home/moria/gcarter
	sambaPwdCanChange: 0
	sambaPwdMustChange: 2147483647
	sambaNTPassword: 878D8014606CDA29677A44EFA1353FC7
</programlisting>
	</para>

		</sect3>

		<sect3>
		<title>Password Synchronization</title>

		<para>
		Samba-3 and later can update the non-samba (LDAP) password stored with an account. When
		using pam_ldap, this allows changing both UNIX and Windows passwords at once.
		</para>

		<para>The <smbconfoption><name>ldap passwd sync</name></smbconfoption> options can have the  values shown in
		<link linkend="ldappwsync">the next table</link>.</para>

		<table iframe="all" id="ldappwsync">
			<title>Possible <emphasis>ldap passwd sync</emphasis> values</title>
		<tgroup cols="2">
			<colspec align="left" width="1*"/>
			<colspec align="justify" width="4*"/>
		<thead>
			<row><entry align="left">Value</entry><entry align="center">Description</entry></row>
		</thead>
		<tbody>
		<row><entry>yes</entry><entry><para>When the user changes his password, update
			       <constant>ntPassword</constant>, <constant>lmPassword</constant>
			       and the <constant>password</constant> fields.</para></entry></row>

		<row><entry>no</entry><entry><para>Only update <constant>ntPassword</constant> and <constant>lmPassword</constant>.</para></entry></row>

		<row><entry>only</entry><entry><para>Only update the LDAP password and let the LDAP server worry about the other fields.
			This option is only available on some LDAP servers. Only when the LDAP server
			supports LDAP_EXOP_X_MODIFY_PASSWD.</para></entry></row>
		</tbody>
		</tgroup>
		</table>


		<para>More information can be found in the &smb.conf; man page.</para>

		</sect3>

	</sect2>

	<sect2>
	<title>MySQL</title>

	<para>
<indexterm><primary>SAM backend</primary><secondary>mysqlsam</secondary></indexterm>
	Every so often someone will come along with a great new idea. Storing user accounts in a
	SQL backend is one of them. Those who want to do this are in the best position to know what the
	specific benefits are to them. This may sound like a cop-out, but in truth we cannot attempt
	to document every little detail why certain things of marginal utility to the bulk of
	Samba users might make sense to the rest. In any case, the following instructions should help
	the determined SQL user to implement a working system.
	</para>

		<sect3>
		<title>Creating the Database</title>

			<para>
			You can set up your own table and specify the field names to pdb_mysql (see below
			for the column names) or use the default table. The file <filename>examples/pdb/mysql/mysql.dump</filename>
			contains the correct queries to create the required tables. Use the command:

<screen>
&prompt;<userinput>mysql -u<replaceable>username</replaceable> -h<replaceable>hostname</replaceable> -p<replaceable>password</replaceable> \
	<replaceable>databasename</replaceable> &lt; <filename>/path/to/samba/examples/pdb/mysql/mysql.dump</filename></userinput>
</screen>
			</para>
		</sect3>

		<sect3>
		<title>Configuring</title>

			<para>This plug-in lacks some good documentation, but here is some brief information. Add the following to the
			<smbconfoption><name>passdb backend</name></smbconfoption> variable in your &smb.conf;:
<smbconfblock>
<smbconfoption><name>passdb backend</name><value>[other-plugins] mysql:identifier [other-plugins]</value></smbconfoption>
</smbconfblock>
			</para>

			<para>The identifier can be any string you like, as long as it does not collide with
			the identifiers of other plugins or other instances of pdb_mysql. If you
			specify multiple pdb_mysql.so entries in <smbconfoption><name>passdb backend</name></smbconfoption>, you also need to
			use different identifiers.
			</para>

			<para>
			Additional options can be given through the &smb.conf; file in the <smbconfsection>[global]</smbconfsection> section.
			Refer to <link linkend="mysqlpbe">the following table</link>.
			</para>

			<table frame="all" id="mysqlpbe">
				<title>Basic smb.conf options for MySQL passdb backend</title>
				<tgroup cols="2">
					<colspec align="left"/>
					<colspec align="justify" colwidth="1*"/>
				<thead>
					<row><entry>Field</entry><entry>Contents</entry></row>
				</thead>
				<tbody>
					<row><entry>mysql host</entry><entry>Host name, defaults to `localhost'</entry></row>
					<row><entry>mysql password</entry><entry></entry></row>
					<row><entry>mysql user</entry><entry>Defaults to `samba'</entry></row>
					<row><entry>mysql database</entry><entry>Defaults to `samba'</entry></row>
					<row><entry>mysql port</entry><entry>Defaults to 3306</entry></row>
					<row><entry>table</entry><entry>Name of the table containing the users</entry></row>
				</tbody>
				</tgroup>
			</table>

			<warning>
			<para>
			Since the password for the MySQL user is stored in the &smb.conf; file, you should make the &smb.conf; file
			readable only to the user who runs Samba. This is considered a security bug and will soon be fixed.
			</para>
			</warning>

			<para>Names of the columns are given in <link linkend="moremysqlpdbe">the next table</link>.
			The default column names can be found in the example table dump.
			 </para>

		<para>
			<table frame="all" id="moremysqlpdbe">
				<title>MySQL field names for MySQL passdb backend</title>
				<tgroup cols="3" align="justify">
					<colspec align="left"/>
					<colspec align="left"/>
					<colspec align="justify" colwidth="1*"/>
			<thead>		
				<row><entry>Field</entry><entry>Type</entry><entry>Contents</entry></row>
			</thead>
			<tbody>
				<row><entry>logon time column</entry><entry>int(9)</entry><entry>UNIX time stamp of last logon of user</entry></row>
				<row><entry>logoff time column</entry><entry>int(9)</entry><entry>UNIX time stamp of last logoff of user</entry></row>
				<row><entry>kickoff time column</entry><entry>int(9)</entry><entry>UNIX time stamp of moment user should be kicked off workstation (not enforced)</entry></row>
				<row><entry>pass last set time column</entry><entry>int(9)</entry><entry>UNIX time stamp of moment password was last set</entry></row>
				<row><entry>pass can change time column</entry><entry>int(9)</entry><entry>UNIX time stamp of moment from which password can be changed</entry></row>
				<row><entry>pass must change time column</entry><entry>int(9)</entry><entry>UNIX time stamp of moment on which password must be changed</entry></row>
				<row><entry>username column</entry><entry>varchar(255)</entry><entry>UNIX username</entry></row>
				<row><entry>domain column</entry><entry>varchar(255)</entry><entry>NT domain user belongs to</entry></row>
				<row><entry>nt username column</entry><entry>varchar(255)</entry><entry>NT username</entry></row>
				<row><entry>fullname column</entry><entry>varchar(255)</entry><entry>Full name of user</entry></row>
				<row><entry>home dir column</entry><entry>varchar(255)</entry><entry>UNIX homedir path (equivalent of the <smbconfoption><name>logon home</name></smbconfoption> parameter.</entry></row>
				<row><entry>dir drive column</entry><entry>varchar(2)</entry><entry>Directory drive path (e.g., <quote>H:</quote>)</entry></row>
				<row><entry>logon script column</entry><entry>varchar(255)</entry><entry>Batch file to run on client side when logging on</entry></row>
				<row><entry>profile path column</entry><entry>varchar(255)</entry><entry>Path of profile</entry></row>
				<row><entry>acct desc column</entry><entry>varchar(255)</entry><entry>Some ASCII NT user data</entry></row>
				<row><entry>workstations column</entry><entry>varchar(255)</entry><entry>Workstations user can logon to (or NULL for all)</entry></row>
				<row><entry>unknown string column</entry><entry>varchar(255)</entry><entry>Unknown string</entry></row>
				<row><entry>munged dial column</entry><entry>varchar(255)</entry><entry>Unknown</entry></row>
				<row><entry>user sid column</entry><entry>varchar(255)</entry><entry>NT user SID</entry></row>
				<row><entry>group sid column</entry><entry>varchar(255)</entry><entry>NT group SID</entry></row>
				<row><entry>lanman pass column</entry><entry>varchar(255)</entry><entry>Encrypted lanman password</entry></row>
				<row><entry>nt pass column</entry><entry>varchar(255)</entry><entry>Encrypted nt passwd</entry></row>
				<row><entry>plain pass column</entry><entry>varchar(255)</entry><entry>Plaintext password</entry></row>
				<row><entry>acct ctrl column</entry><entry>int(9)</entry><entry>NT user data</entry></row>
				<row><entry>unknown 3 column</entry><entry>int(9)</entry><entry>Unknown</entry></row>
				<row><entry>logon divs column</entry><entry>int(9)</entry><entry>Unknown</entry></row>
				<row><entry>hours len column</entry><entry>int(9)</entry><entry>Unknown</entry></row>
				<row><entry>bad password count column</entry><entry>int(5)</entry><entry>Number of failed password tries before disabling an account</entry></row>
				<row><entry>logon count column</entry><entry>int(5)</entry><entry>Number of logon attempts</entry></row>
				<row><entry>unknown 6 column</entry><entry>int(9)</entry><entry>Unknown</entry></row>
			</tbody></tgroup>
		</table>
		</para>

			<para>
			You can put a colon (:) after the name of each column, which
			should specify the column to update when updating the table. You can also
			specify nothing behind the colon. Then the field data will not be updated. Setting a column name to <parameter>NULL</parameter> means the field should not be used.
			</para>

			<para><link linkend="mysqlsam">An example configuration</link> looks like:
			</para>

			<smbconfexample id="mysqlsam">
				<title>Example configuration for the MySQL passdb backend</title>
			<smbconfsection>[global]</smbconfsection>
			<smbconfoption><name>passdb backend</name><value>mysql:foo</value></smbconfoption>
			<smbconfoption><name>foo:mysql user</name><value>samba</value></smbconfoption>
			<smbconfoption><name>foo:mysql password</name><value>abmas</value></smbconfoption>
			<smbconfoption><name>foo:mysql database</name><value>samba</value></smbconfoption>
			<smbconfcomment>domain name is static and can't be changed</smbconfcomment>
			<smbconfoption><name>foo:domain column</name><value>'MYWORKGROUP':</value></smbconfoption>
			<smbconfcomment>The fullname column comes from several other columns</smbconfcomment>
			<smbconfoption><name>foo:fullname column</name><value>CONCAT(firstname,' ',surname):</value></smbconfoption>
			<smbconfcomment>Samba should never write to the password columns</smbconfcomment>
			<smbconfoption><name>foo:lanman pass column</name><value>lm_pass:</value></smbconfoption>
			<smbconfoption><name>foo:nt pass column</name><value>nt_pass:</value></smbconfoption>
			<smbconfcomment>The unknown 3 column is not stored</smbconfcomment>
			<smbconfoption><name>foo:unknown 3 column</name><value>NULL</value></smbconfoption>
			</smbconfexample>
		</sect3>

		<sect3>
		<title>Using Plaintext Passwords or Encrypted Password</title>

			<para>
<indexterm><primary>encrypted passwords</primary></indexterm>
			I strongly discourage the use of plaintext passwords, however, you can use them.
			</para>

			<para>
			If you would like to use plaintext passwords, set
			`identifier:lanman pass column' and `identifier:nt pass column' to
			`NULL' (without the quotes) and `identifier:plain pass column' to the
			name of the column containing the plaintext passwords.
			</para>

			<para>
			If you use encrypted passwords, set the 'identifier:plain pass
			column' to 'NULL' (without the quotes). This is the default.
			</para>

		</sect3>

		<sect3>
		<title>Getting Non-Column Data from the Table</title>

			<para>
			It is possible to have not all data in the database by making some `constant'.
			</para>

			<para>
			For example, you can set `identifier:fullname column' to
			something like <?latex \linebreak ?><command>CONCAT(Firstname,' ',Surname)</command>
			</para>

			<para>
			Or, set `identifier:workstations column' to:
			<command>NULL</command></para>

			<para>See the MySQL documentation for more language constructs.</para>

		</sect3>
	</sect2>

	<sect2 id="XMLpassdb">
	<title>XML</title>

	<para>
<indexterm><primary>SAM backend</primary><secondary>xmlsam</secondary></indexterm>
		This module requires libxml2 to be installed.</para>

		<para>The usage of pdb_xml is fairly straightforward. To export data, use:
		</para>

		<para>
<indexterm><primary>pdbedit</primary></indexterm>
			<prompt>$ </prompt> <userinput>pdbedit -e xml:filename</userinput>
		</para>

		<para>
		(where filename is the name of the file to put the data in)
		</para>

		<para>
		To import data, use:
		<prompt>$ </prompt> <userinput>pdbedit -i xml:filename</userinput>
		</para>
	</sect2>
</sect1>

<sect1>
<title>Common Errors</title>

	<sect2>
		<title>Users Cannot Logon</title>

		<para><quote>I've installed Samba, but now I can't log on with my UNIX account! </quote></para>

		<para>Make sure your user has been added to the current Samba <smbconfoption><name>passdb backend</name></smbconfoption>.
		Read the section <link linkend="acctmgmttools">Account Management Tools</link> for details.</para>

	</sect2>

	<sect2>
	<title>Users Being Added to the Wrong Backend Database</title>

	<para>
	A few complaints have been received from users that just moved to Samba-3. The following
	&smb.conf; file entries were causing problems, new accounts were being added to the old
	smbpasswd file, not to the tdbsam passdb.tdb file:
	</para>

	<para>
	<smbconfblock>
	<smbconfsection>[global]</smbconfsection>
	<member>...</member>
	<smbconfoption><name>passdb backend</name><value>smbpasswd, tdbsam</value></smbconfoption>
	<member>...</member>
	</smbconfblock>
	</para>

	<para>
	Samba will add new accounts to the first entry in the <emphasis>passdb backend</emphasis>
	parameter entry. If you want to update to the tdbsam, then change the entry to:
	</para>

	<para>
<smbconfblock>
[globals]
...
<smbconfoption><name>passdb backend</name><value>tdbsam, smbpasswd</value></smbconfoption>
...
</smbconfblock>
	</para>

	</sect2>

	<sect2>
	<title>Configuration of <parameter>auth methods</parameter></title>

	<para>
	When explicitly setting an <smbconfoption><name>auth methods</name></smbconfoption> parameter,
	<parameter>guest</parameter> must be specified as the first entry on the line,
	for example, <smbconfoption><name>auth methods</name><value>guest sam</value></smbconfoption>.
	</para>

	<para>
	This is the exact opposite of the requirement for the <smbconfoption><name>passdb backend</name></smbconfoption>
	option, where it must be the <emphasis>LAST</emphasis> parameter on the line.
	</para>

	</sect2>

</sect1>

</chapter>
